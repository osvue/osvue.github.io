import{_ as e,p as t,q as a,a1 as r}from"./framework-d81ad7e5.js";const n="/assets/image-20200207162242385-2d9c88e7.png",o={},c=r(`<h3 id="queue-browser" tabindex="-1"><a class="header-anchor" href="#queue-browser" aria-hidden="true">#</a> queue browser</h3><p>可以查看队列中的消息而不消费，没有订阅的功能</p><h3 id="jmscorrelationid" tabindex="-1"><a class="header-anchor" href="#jmscorrelationid" aria-hidden="true">#</a> JMSCorrelationID</h3><p>用于消息之间的关联，给人一种会话的感觉</p><p>http://activemq.apache.org/how-should-i-implement-request-response-with-jms.html</p><hr><h3 id="jmsreplyto" tabindex="-1"><a class="header-anchor" href="#jmsreplyto" aria-hidden="true">#</a> <strong>JMSReplyTo</strong></h3><p>发送方可以接受到消息消费确认的地址</p><h3 id="queuerequestor同步消息" tabindex="-1"><a class="header-anchor" href="#queuerequestor同步消息" aria-hidden="true">#</a> QueueRequestor同步消息</h3><p>可以发送同步消息</p><p>本质违背了mq的异步通讯原则</p><p>但是mq还是能够提供应用解耦、异构系统的特性</p><p>因为使用QueueRequestor发送消息后，会等待接收端的回复，如果收不到回复就会造成死等现象!而且该方法没有设置超时等待的功能</p><h3 id="生产环境中影响性能的几个因素" tabindex="-1"><a class="header-anchor" href="#生产环境中影响性能的几个因素" aria-hidden="true">#</a> 生产环境中影响性能的几个因素</h3><h4 id="out-of-memory" tabindex="-1"><a class="header-anchor" href="#out-of-memory" aria-hidden="true">#</a> Out of memory</h4><p>activemq启动脚本中配置内存</p><div class="language-text" data-ext="text"><pre class="language-text"><code>%ACTIVEMQ_OPTS%&quot; == &quot;&quot; set ACTIVEMQ_OPTS=-Xms1G -Xmx1G
</code></pre></div><p>以及配置文件中的百分比</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&lt;memoryUsage percentOfJvmHeap=&quot;70&quot; /&gt;
</code></pre></div><p>SystemUsage配置设置了一些系统内存和硬盘容量，当系统消耗超过这些容量设置时，amq会“slow down producer”，还是很重要的。</p><h4 id="持久化和非持久化" tabindex="-1"><a class="header-anchor" href="#持久化和非持久化" aria-hidden="true">#</a> 持久化和非持久化</h4><h4 id="消息异步发送" tabindex="-1"><a class="header-anchor" href="#消息异步发送" aria-hidden="true">#</a> 消息异步发送</h4><p>建议使用默认，强制开启有可能丢失消息</p><p>异步发送丢失消息的场景是：生产者设置UseAsyncSend=true，使用producer.send(msg)持续发送消息。由于消息不阻塞，生产者会认为所有send的消息均被成功发送至MQ。如果服务端突然宕机，此时生产者端内存中尚未被发送至MQ的消息都会丢失。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>new ActiveMQConnectionFactory(&quot;tcp://locahost:61616?jms.useAsyncSend=true&quot;);
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>((ActiveMQConnectionFactory)connectionFactory).setUseAsyncSend(true);
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>((ActiveMQConnection)connection).setUseAsyncSend(true)
</code></pre></div><h4 id="批量确认" tabindex="-1"><a class="header-anchor" href="#批量确认" aria-hidden="true">#</a> 批量确认</h4><p>ActiveMQ缺省支持批量确认消息，批量确认可以提高系统性能</p><p><strong>关闭方法</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>new ActiveMQConnectionFactory(&quot;tcp://locahost:61616?jms.optimizeAcknowledge=false&quot;);
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>((ActiveMQConnectionFactory)connectionFactory).setOptimizeAcknowledge(fase);
</code></pre></div><div class="language-text" data-ext="text"><pre class="language-text"><code>((ActiveMQConnection)connection).setOptimizeAcknowledge(true);
</code></pre></div><h3 id="消费缓冲与消息积压prefetchsize" tabindex="-1"><a class="header-anchor" href="#消费缓冲与消息积压prefetchsize" aria-hidden="true">#</a> 消费缓冲与消息积压prefetchSize</h3><p>消费者端，一般来说消费的越快越好，broker的积压越小越好。</p><p>但是考虑到事务性和客户端确认的情况，如果一个消费者一次获取到了很多消息却都不确认，这会造成事务上下文变大，broker端这种“半消费状态”的数据变多，所以ActiveMQ有一个prefetchSize参数来控制未确认情况下，最多可以预获取多少条记录。</p><p><strong>Pre-fetch默认值</strong></p><table><thead><tr><th>consumer type</th><th>default value</th></tr></thead><tbody><tr><td>queue</td><td>1000</td></tr><tr><td>queue browser</td><td>500</td></tr><tr><td>topic</td><td>32766</td></tr><tr><td>durable topic</td><td>1000</td></tr></tbody></table><h4 id="可以通过3中方式设置prefetchsize" tabindex="-1"><a class="header-anchor" href="#可以通过3中方式设置prefetchsize" aria-hidden="true">#</a> 可以通过3中方式设置prefetchSize</h4><p><strong>创建连接时整体设置</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>	ActiveMQConnectionFactory connectio nFactory = new ActiveMQConnectionFactory(
				&quot;admin&quot;,
				&quot;admin&quot;,
				&quot;tcp://localhost:5671?jms.prefetchPolicy.all=50&quot;
				);
</code></pre></div><p><strong>创建连接时对topic和queue单独设置</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>		ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
				&quot;admin&quot;,
				&quot;admin&quot;,
				&quot;tcp://localhost:5671?jms.prefetchPolicy.queuePrefetch=1&amp;jms.prefetchPolicy.topicPrefetch=1&quot;
				);
</code></pre></div><p><strong>针对destination单独设置</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>Destination topic = session.createTopic(&quot;user?consumer.prefetchSize=10&quot;);
</code></pre></div><p>注意：对destination设置prefetchsize后会覆盖连接时的设置值</p><h3 id="消息到底是推还是拉" tabindex="-1"><a class="header-anchor" href="#消息到底是推还是拉" aria-hidden="true">#</a> 消息到底是推还是拉?</h3><p>发送消息时是推向broker</p><p>获取消息时：</p><ul><li>默认是一条一条的推</li><li>当customer的prefetchSize满的时候停止推消息</li><li>当customer的prefetchSize ==0时 拉取消息</li></ul><h3 id="eip-enterprise-integration-patterns" tabindex="-1"><a class="header-anchor" href="#eip-enterprise-integration-patterns" aria-hidden="true">#</a> EIP Enterprise Integration Patterns.</h3><p>EIP系统是以数据为基础，应用为核心，以实现业务及业务流程的自动化为目的多功能企业信息平台。为企业的信息化建设提供一种循序渐进，逐步优化的路径</p><p><img src="`+n+'" alt="image-20200207162242385"></p><p>一个围绕消息集成的企业应用集成场景基本在上面的图中描述的比较清楚的，简单说明如下</p><p>1)消息发送方和接收方：可以是异构的业务系统，但是都需要提供Endpoint实现集成。 2)消息本身：两个应用系统通过channel连接，实现了消息本身的发送和接收操作 3)消息Channel：即消息传输的通道，消息本身必须要通过channel来实现传输，从源到达目标。 4)消息路由：当有多个目标接收方的时候，如果根据消息的特征来确定究竟发送到哪个接收方？ 5)消息转换：消息在传输过程中是否需要进行转换和数据映射，包括报文格式转换和内容转换映射。 6)Pipe and Filter：在执行复杂的消息流处理时，如何维护消息本身的独立性和灵活性。</p><p>常用实现Camel</p><p>支持ActiveMQ、RabbitMQ、kafka、WebService</p><p><strong>camel实现了客户端与服务端的解耦， 生产者和消费者的解耦。</strong></p>',58),i=[c];function s(d,p){return t(),a("div",null,i)}const l=e(o,[["render",s],["__file","ActiveMQ_05.html.vue"]]);export{l as default};
