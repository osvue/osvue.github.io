import{_ as a,p as e,q as t,a1 as r}from"./framework-d81ad7e5.js";const o={},c=r(`<h2 id="一、concat-函数" tabindex="-1"><a class="header-anchor" href="#一、concat-函数" aria-hidden="true">#</a> 一、CONCAT（）函数</h2><h4 id="concat-函数用于将多个字符串连接成一个字符串。" tabindex="-1"><a class="header-anchor" href="#concat-函数用于将多个字符串连接成一个字符串。" aria-hidden="true">#</a> CONCAT（）函数用于将多个字符串连接成一个字符串。</h4><p>使用数据表Info作为示例，其中SELECT id,name FROM info LIMIT 1;的返回结果为 +----+--------+ | id | name | +----+--------+ | 1 | BioCyc | +----+--------+</p><h4 id="_1、语法及使用特点" tabindex="-1"><a class="header-anchor" href="#_1、语法及使用特点" aria-hidden="true">#</a> 1、语法及使用特点：</h4><p>CONCAT(str1,str2,…)<br> 返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。</p><h4 id="_2、使用示例" tabindex="-1"><a class="header-anchor" href="#_2、使用示例" aria-hidden="true">#</a> 2、使用示例：</h4><p>SELECT CONCAT(id, ‘，’, name) AS con FROM info LIMIT 1;返回结果为 +----------+ | con | +----------+ | 1,BioCyc | +----------+</p><p>SELECT CONCAT(‘My’, NULL, ‘QL’);返回结果为 +--------------------------+ | CONCAT(&#39;My&#39;, NULL, &#39;QL&#39;) | +--------------------------+ | NULL | +--------------------------+</p><h4 id="_3、如何指定参数之间的分隔符" tabindex="-1"><a class="header-anchor" href="#_3、如何指定参数之间的分隔符" aria-hidden="true">#</a> 3、如何指定参数之间的分隔符</h4><h2 id="函数concat-ws-。" tabindex="-1"><a class="header-anchor" href="#函数concat-ws-。" aria-hidden="true">#</a> 函数CONCAT_WS（）。</h2><h5 id="使用语法为-concat-ws-separator-str1-str2" tabindex="-1"><a class="header-anchor" href="#使用语法为-concat-ws-separator-str1-str2" aria-hidden="true">#</a> 使用语法为：CONCAT_WS(separator,str1,str2,…)</h5><p>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。</p><p>如SELECT CONCAT_WS(&#39;_&#39;,id,name) AS con_ws FROM info LIMIT 1;返回结果为 +----------+ | con_ws | +----------+ | 1_BioCyc | +----------+</p><p>SELECT CONCAT_WS(&#39;,&#39;,&#39;First name&#39;,NULL,&#39;Last Name&#39;);返回结果为 +----------------------------------------------+ | CONCAT_WS(&#39;,&#39;,&#39;First name&#39;,NULL,&#39;Last Name&#39;) | +----------------------------------------------+ | First name,Last Name | +----------------------------------------------+</p><h2 id="二、group-concat-函数" tabindex="-1"><a class="header-anchor" href="#二、group-concat-函数" aria-hidden="true">#</a> 二、GROUP_CONCAT（）函数</h2><p>GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。 使用表info作为示例，其中语句SELECT locus,id,journal FROM info WHERE locus IN(&#39;AB086827&#39;,&#39;AF040764&#39;);的返回结果为 +----------+----+--------------------------+ | locus | id | journal | +----------+----+--------------------------+ | AB086827 | 1 | Unpublished | | AB086827 | 2 | Submitted (20-JUN-2002) | | AF040764 | 23 | Unpublished | | AF040764 | 24 | Submitted (31-DEC-1997) | +----------+----+--------------------------+</p><h4 id="_1、使用语法及特点" tabindex="-1"><a class="header-anchor" href="#_1、使用语法及特点" aria-hidden="true">#</a> 1、使用语法及特点：</h4><p>GROUP_CONCAT([DISTINCT] expr [,expr ...] [ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] [,col ...]] [SEPARATOR str_val]) 在 MySQL 中，你可以得到表达式结合体的连结值。通过使用 DISTINCT 可以排除重复值。如果希望对结果中的值进行排序，可以使用 ORDER BY 子句。 SEPARATOR 是一个字符串值，它被用于插入到结果值中。缺省为一个逗号 (&quot;,&quot;)，可以通过指定 SEPARATOR &quot;&quot; 完全地移除这个分隔符。 可以通过变量 group_concat_max_len 设置一个最大的长度。在运行时执行的句法如下： SET [SESSION | GLOBAL] group_concat_max_len = unsigned_integer; 如果最大长度被设置，结果值被剪切到这个最大长度。如果分组的字符过长，可以对系统参数进行设置：SET @@global.group_concat_max_len=40000;</p><h4 id="_2、使用示例-1" tabindex="-1"><a class="header-anchor" href="#_2、使用示例-1" aria-hidden="true">#</a> 2、使用示例：</h4><p>语句 SELECT locus,GROUP_CONCAT(id) FROM info WHERE locus IN(&#39;AB086827&#39;,&#39;AF040764&#39;) GROUP BY locus; 的返回结果为 +----------+------------------+ | locus | GROUP_CONCAT(id) | +----------+------------------+ | AB086827 | 1,2 | | AF040764 | 23,24 | +----------+------------------+</p><p>语句 SELECT locus,GROUP_CONCAT(distinct id ORDER BY id DESC SEPARATOR &#39;<em>&#39;) FROM info WHERE locus IN(&#39;AB086827&#39;,&#39;AF040764&#39;) GROUP BY locus;的返回结果为 +----------+----------------------------------------------------------+ | locus | GROUP_CONCAT(distinct id ORDER BY id DESC SEPARATOR &#39;</em>&#39;) | +----------+----------------------------------------------------------+ | AB086827 | 2_1 | | AF040764 | 24_23 | +----------+----------------------------------------------------------+</p><p>语句SELECT locus,GROUP_CONCAT(concat_ws(&#39;, &#39;,id,journal) ORDER BY id DESC SEPARATOR &#39;. &#39;) FROM info WHERE locus IN(&#39;AB086827&#39;,&#39;AF040764&#39;) GROUP BY locus;的返回结果为 +----------+--------------------------------------------------------------------------+ | locus | GROUP_CONCAT(concat_ws(&#39;, &#39;,id,journal) ORDER BY id DESC SEPARATOR &#39;. &#39;) | +----------+--------------------------------------------------------------------------+ | AB086827 | 2, Submitted (20-JUN-2002). 1, Unpublished | | AF040764 | 24, Submitted (31-DEC-1997) . 23, Unpublished | +----------+--------------------------------------------------------------------------+</p><h2 id="group-concat" tabindex="-1"><a class="header-anchor" href="#group-concat" aria-hidden="true">#</a> GROUP_CONCAT()</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’]) <br> oracle中为wm_concat函数</p></div><ul><li>可以帮我们拼接字符串, 跟列, 非常好用 在一次使用中, 发现 GROUP_CONCAT() 之后的结果为NULL 在 GROUP_CONCAT() 中, 如果某列为NULL的话, 得到的结果就会为NULL (空) 在场景条件下, 我们可以增加一些为空的判断函数进行判断, 使得结果到达我们的预期</li></ul><p>例如:  IF函数, IFNULL函数</p><p></p><p>扩展:</p><ul><li>GROUP_CONCAT 默认使用逗号( , )来作为分隔符, 如果想要其他字符作为分隔符的话,可以使用 Separator 来实现</li></ul><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><ul><li>mysql中去除字符串的头尾空格：TRIM(str)</li><li>mysql中去除左空格函数：LTRIM(str)</li><li>mysql中去除右空格函数：RTRIM(str)</li><li>mysql中取字符串长度函数：LENGTH(str)</li><li>mysql中判断符串是否为NULL：ISNULL(str)</li></ul><p>注意点: 在判断为空值和NULL的时候的一些注意事项</p><blockquote><p>使用 ISNULL函数 或 IS NULL时，只能判断出字段中是否为NULL，不能查出空值。判断空字符用 =&#39;&#39;或者LENGTH(TRIM(str))=0来进行判断处理。</p></blockquote><blockquote><p>其中在进行count()统计某列的记录数的时候count(column)，如果采用的NULL值，会别系统自动忽略掉，但是空值(&#39;&#39;)是会算入统计中。</p></blockquote><ul><li>count(*)对行的数目进行计算,包含NULL</li><li>count(column)对特定的列的值具有的行数进行计算,不包含NULL值。 count(1)和count(*)的结果是一样的</li><li>group_concat()将符合条件的所有数据中某列字段合并到一个字段中，默认分隔符为,其中SEPARATOR可以定义分隔符</li><li>group_concat([DISTINCT] 要连接的字段</li><li>oracle中为wm_concat函数</li></ul><h2 id="ifnull" tabindex="-1"><a class="header-anchor" href="#ifnull" aria-hidden="true">#</a> IFNULL()</h2><p>IFNULL() 函数用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。</p><p>IFNULL() 函数语法格式为：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>IFNULL(expression, alt_value)
</code></pre></div><p>如果第一个参数的表达式 expression 为 NULL，则返回第二个参数的备用值。</p><p><strong>参数说明:</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><em>expression</em></td><td>必须，要测试的值</td></tr><tr><td><em>alt_value</em></td><td>必须，expression 表达式为 NULL 时返回的值</td></tr></tbody></table><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><p>第一个参数为 NULL：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>SELECT IFNULL(NULL, &quot;RUNOOB&quot;);
</code></pre></div><p>以上实例输出结果为：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>RUNOOB
</code></pre></div><p>第一个参数不为 NULL：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>SELECT IFNULL(&quot;Hello&quot;, &quot;RUNOOB&quot;);
</code></pre></div><p>以上实例输出结果为：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>Hello
</code></pre></div>`,51),i=[c];function n(d,s){return e(),t("div",null,i)}const u=a(o,[["render",n],["__file","mysqlconcat.html.vue"]]);export{u as default};
