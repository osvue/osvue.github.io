import{_ as o,M as e,p as c,q as l,R as n,t as s,N as t,a1 as p}from"./framework-d81ad7e5.js";const r="/assets/cf-fa27ecac.png",u={},k=p(`<h2 id="父组件向子组件传递值" tabindex="-1"><a class="header-anchor" href="#父组件向子组件传递值" aria-hidden="true">#</a> 父组件向子组件传递值</h2><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 父组件向子组件传值. 属性名称 , 也需要使用- --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:parent-msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>temp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{parentMsg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkgeMsg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;父组件 : parent-msg&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;my-component&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;#temp&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token function">checkgeMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>parentMsg <span class="token operator">=</span> <span class="token string">&quot;我被修改了&quot;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token comment">// props中的数据，都是通过父组件传递给子组件的。</span>
                    <span class="token comment">// props中的数据都是只读的，无法去赋值</span>
                    <span class="token comment">// props使用数组是非常不标准的写法。建议使用对象，并给每一个prop声明类型和默认值</span>
                    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token literal-property property">parentMsg</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
                            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
                            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">null</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="父组件向子组件传递方法" tabindex="-1"><a class="header-anchor" href="#父组件向子组件传递方法" aria-hidden="true">#</a> 父组件向子组件传递方法</h2><blockquote><p>父组件向子组件传递方法，需要使用v-on。 v-on属性表示子组件调用方法的名称。值表示父组件传递的方法。 这里也不能使用驼峰规则。建议也不要使用 - ，这里的名称就使用单个单词</p></blockquote><p><img src="`+r+`" alt="alert"></p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        {{msg}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
        {{title}}

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>changeMsg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>temp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>changeMsgChild<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;我是父级组件的标题&quot;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&quot;我是父级组件的内容&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">changeMsg</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg
                    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;my-component&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;#temp&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token function">changeMsgChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// emit 第一个参数是要调用的方法名称</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&quot;change&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我是子级组件的标题&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我是子级组件的内容&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>



<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 父组件向子组件传递方法，使用的是事件绑定机制，v-on 当我们自定义一个事件属性之后，那么子组件就能够通过某些方法来
        调用，传递进去的这个方法了 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>dataflog</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>msg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@funcshow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>log<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是子组件界面----{{dataflog}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myclick<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>父组件传递过来的方法 子组件接收<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;fuzujian msg&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 父方法接受参数</span>
            <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;父组件方法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;#log&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;dataflog&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token punctuation">{</span>
                        <span class="token literal-property property">lusifer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lusifer&#39;</span><span class="token punctuation">,</span>
                            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token function">myclick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 当点击子组件按钮的时候，如何拿到父组件传递过来的func 方法，并调用呢？</span>
                        <span class="token comment">// emit英文愿意：是触发调用 发射的意思。</span>
                        <span class="token comment">// this.$emit(&#39;funcshow&#39;)</span>
                        <span class="token comment">// emit传递父组件中的方法，并且子组件向父组件传递消息</span>
                        <span class="token comment">// this.$emit(&#39;funcshow&#39;,123,345)</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;funcshow&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lusifer<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token punctuation">}</span><span class="token punctuation">,</span>

                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
 
</code></pre></div><h2 id="父级组件调用子组件的方法" tabindex="-1"><a class="header-anchor" href="#父级组件调用子组件的方法" aria-hidden="true">#</a> 父级组件调用子组件的方法</h2><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handlerChildFunction<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是父级组件 : 调用子集组件方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>temp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">handlerChildFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 父组件调用子组件方法。，直接使用ref去调用方法。方法的用法和子组件中一模一样</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">childFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;my-component&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;#temp&quot;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                        <span class="token function">childFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是子级组件 , 调用成功&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="dialog-父子组件传值" tabindex="-1"><a class="header-anchor" href="#dialog-父子组件传值" aria-hidden="true">#</a> dialog 父子组件传值</h2><ul><li>第一种方式,在定义组件的时候, 使用ref 属性, 原生DOM 操作;</li></ul><p>//父组件中, 使用ref</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ApprovalRecord ref<span class="token operator">=</span><span class="token string">&quot;**appDialog**&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token function">showDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
​    <span class="token comment">// 直接操作组件的属性</span>
​    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>appDialog<span class="token punctuation">.</span>dialogVisible <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div><p>//子组件中定义初始化 dialog 属性</p><ul><li>第二种方式,使用 props</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//父组件在使用时绑定 , 子组件用props 接受 dialogVisible 使用this.$emit(&#39;closeDialog&#39;) 调用父组件的方法</span>
<span class="token operator">&lt;</span>ApprovalRecord <span class="token operator">:</span>dialogVisible<span class="token operator">=</span><span class="token string">&quot;showMe&quot;</span> @closeDialog<span class="token operator">=</span><span class="token string">&quot;hiddenDialog&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
​    <span class="token keyword">return</span> <span class="token punctuation">{</span>
​        showMe<span class="token operator">:</span><span class="token boolean">false</span>
​    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//子组件</span>
<span class="token operator">&lt;</span>el<span class="token operator">-</span>dialog
<span class="token literal-property property">​</span>        <span class="token operator">:</span>visible<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;vis&quot;</span>
<span class="token literal-property property">​</span>        <span class="token operator">:</span>close<span class="token operator">-</span>on<span class="token operator">-</span>click<span class="token operator">-</span>modal<span class="token operator">=</span><span class="token string">&quot;false&quot;</span>
<span class="token literal-property property">​</span>        <span class="token operator">:</span>close<span class="token operator">-</span>on<span class="token operator">-</span>press<span class="token operator">-</span>escape<span class="token operator">=</span><span class="token string">&quot;false&quot;</span> \\<span class="token operator">&gt;</span>

<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
​    <span class="token operator">**</span>dialogVisible<span class="token operator">**</span><span class="token operator">:</span> Boolean
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
​    <span class="token operator">**</span>dialogVisible<span class="token operator">**</span><span class="token punctuation">(</span>newval<span class="token punctuation">,</span> oval<span class="token punctuation">)</span> <span class="token punctuation">{</span>
​        <span class="token keyword">this</span><span class="token punctuation">.</span>vis <span class="token operator">=</span> newval
​    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
​    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;closeDialog&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 传递关闭事件</span>
<span class="token punctuation">}</span>
</code></pre></div>`,15),i={id:"prop-的大小写-camelcase-vs-kebab-case",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#prop-的大小写-camelcase-vs-kebab-case","aria-hidden":"true"},"#",-1),d={href:"https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99-camelCase-vs-kebab-case",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>HTML 中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;blog-post&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在 JavaScript 中是 camelCase 的</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;postTitle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;h3&gt;{{ postTitle }}&lt;/h3&gt;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在 <span class="token constant">HTML</span> 中是 kebab<span class="token operator">-</span><span class="token keyword">case</span> 的 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>blog<span class="token operator">-</span>post post<span class="token operator">-</span>title<span class="token operator">=</span><span class="token string">&quot;hello!&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>blog<span class="token operator">-</span>post<span class="token operator">&gt;</span>
</code></pre></div><p>重申一次，如果你使用字符串模板，那么这个限制就不存在了。</p>`,3),h={id:"prop-类型",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#prop-类型","aria-hidden":"true"},"#",-1),v={href:"https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>到这里，我们只看到了以字符串数组形式列出的 prop：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;likes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;isPublished&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;commentIds&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;author&#39;</span><span class="token punctuation">]</span>
</code></pre></div><p>但是，通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些 property 的名称和值分别是 prop 各自的名称和类型：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">likes</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
  <span class="token literal-property property">isPublished</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">commentIds</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
  <span class="token literal-property property">callback</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  <span class="token literal-property property">contactsPromise</span><span class="token operator">:</span> Promise <span class="token comment">// or any other constructor</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4),q={href:"https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81",target:"_blank",rel:"noopener noreferrer"},_={id:"传递静态或动态-prop",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#传递静态或动态-prop","aria-hidden":"true"},"#",-1),E={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E4%BC%A0%E9%80%92%E9%9D%99%E6%80%81%E6%88%96%E5%8A%A8%E6%80%81-Prop",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>像这样，你已经知道了可以像这样给 prop 传入一个静态的值：</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>My journey with Vue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>你也知道 prop 可以通过 <code>v-bind</code> 动态赋值，例如：</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span>
  <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.title + &#39; by &#39; + post.author.name<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>在上述两个示例中，我们传入的值都是字符串类型的，但实际上<em>任何</em>类型的值都可以传给一个 prop。</p>`,5),A={id:"传入一个数字",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#传入一个数字","aria-hidden":"true"},"#",-1),w={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97",target:"_blank",rel:"noopener noreferrer"},x=p(`<div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 即便 \`42\` 是静态的，我们仍然需要 \`v-bind\` 来告诉 Vue --&gt;</span>
<span class="token comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>likes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>42<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>likes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.likes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,1),V={id:"传入一个布尔值",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#传入一个布尔值","aria-hidden":"true"},"#",-1),D={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E5%B8%83%E5%B0%94%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},M=p(`<div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 \`true\`。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name">is-published</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 即便 \`false\` 是静态的，我们仍然需要 \`v-bind\` 来告诉 Vue --&gt;</span>
<span class="token comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is-published</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>is-published</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.isPublished<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,1),P={id:"传入一个数组",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#传入一个数组","aria-hidden":"true"},"#",-1),N={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84",target:"_blank",rel:"noopener noreferrer"},S=p(`<div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 即便数组是静态的，我们仍然需要 \`v-bind\` 来告诉 Vue --&gt;</span>
<span class="token comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>comment-ids</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[234, 266, 273]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 用一个变量进行动态赋值。--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blog-post</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>comment-ids</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post.commentIds<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blog-post</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,1),$={id:"传入一个对象",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#传入一个对象","aria-hidden":"true"},"#",-1),L={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"},O=p(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 即便对象是静态的，我们仍然需要 <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">v-bind</span><span class="token template-punctuation string">\`</span></span> 来告诉 Vue <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这是一个 JavaScript 表达式而不是一个字符串。<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>blog<span class="token operator">-</span>post
  v<span class="token operator">-</span>bind<span class="token operator">:</span>author<span class="token operator">=</span>&quot;<span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Veronica&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">company</span><span class="token operator">:</span> <span class="token string">&#39;Veridian Dynamics&#39;</span>
  <span class="token punctuation">}</span>&quot;
<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>blog<span class="token operator">-</span>post<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 用一个变量进行动态赋值。<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>blog<span class="token operator">-</span>post v<span class="token operator">-</span>bind<span class="token operator">:</span>author<span class="token operator">=</span><span class="token string">&quot;post.author&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>blog<span class="token operator">-</span>post<span class="token operator">&gt;</span>
</code></pre></div>`,1),T={id:"传入一个对象的所有-property",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#传入一个对象的所有-property","aria-hidden":"true"},"#",-1),I={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%80%E6%9C%89-property",target:"_blank",rel:"noopener noreferrer"},H=p(`<p>如果你想要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 <code>v-bind</code> (取代 <code>v-bind:prop-name</code>)。例如，对于一个给定的对象 <code>post</code>：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">post</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;My Journey with Vue&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>下面的模板：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>blog<span class="token operator">-</span>post v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">&quot;post&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>blog<span class="token operator">-</span>post<span class="token operator">&gt;</span>
</code></pre></div><p>等价于：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>blog<span class="token operator">-</span>post
  v<span class="token operator">-</span>bind<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">&quot;post.id&quot;</span>
  v<span class="token operator">-</span>bind<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">&quot;post.title&quot;</span>
<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>blog<span class="token operator">-</span>post<span class="token operator">&gt;</span>
</code></pre></div>`,6),R={id:"单向数据流",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#单向数据流","aria-hidden":"true"},"#",-1),G={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81",target:"_blank",rel:"noopener noreferrer"},K=p(`<p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生变更时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p><p>这里有两种常见的试图变更一个 prop 的情形：</p><ol><li><p>**这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。**在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;initialCounter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li><li><p>**这个 prop 以一种原始的值传入且需要进行转换。**在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">normalizedSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></li></ol><p>注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身<strong>将会</strong>影响到父组件的状态。</p>`,5),Q={id:"prop-验证",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#prop-验证","aria-hidden":"true"},"#",-1),X={href:"https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81",target:"_blank",rel:"noopener noreferrer"},Y=p(`<p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。</p><p>为了定制 prop 的验证方式，你可以为 <code>props</code> 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 基础的类型检查 (\`null\` 和 \`undefined\` 会通过任何类型验证)</span>
    <span class="token literal-property property">propA</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token comment">// 多个可能的类型</span>
    <span class="token literal-property property">propB</span><span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 必填的字符串</span>
    <span class="token literal-property property">propC</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 带有默认值的数字</span>
    <span class="token literal-property property">propD</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">100</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 带有默认值的对象</span>
    <span class="token literal-property property">propE</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
      <span class="token comment">// 对象或数组默认值必须从一个工厂函数获取</span>
      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 自定义验证函数</span>
    <span class="token literal-property property">propF</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个值必须匹配下列字符串中的一个</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;danger&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>当 prop 验证失败的时候，(开发环境构建版本的) Vue 将会产生一个控制台的警告。</p><p>注意那些 prop 会在一个组件实例创建<strong>之前</strong>进行验证，所以实例的 property (如 <code>data</code>、<code>computed</code> 等) 在 <code>default</code> 或 <code>validator</code> 函数中是不可用的。</p>`,5),Z={id:"类型检查",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#类型检查","aria-hidden":"true"},"#",-1),sn={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5",target:"_blank",rel:"noopener noreferrer"},an=p(`<p><code>type</code> 可以是下列原生构造函数中的一个：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul><p>额外的，<code>type</code> 还可以是一个自定义的构造函数，并且通过 <code>instanceof</code> 来进行检查确认。例如，给定下列现成的构造函数：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName
<span class="token punctuation">}</span>
</code></pre></div><p>你可以使用：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;blog-post&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">author</span><span class="token operator">:</span> Person
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>来验证 <code>author</code> prop 的值是否是通过 <code>new Person</code> 创建的。</p>`,7),tn={id:"非-prop-的-attribute",tabindex:"-1"},pn=n("a",{class:"header-anchor",href:"#非-prop-的-attribute","aria-hidden":"true"},"#",-1),on={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E9%9D%9E-Prop-%E7%9A%84-Attribute",target:"_blank",rel:"noopener noreferrer"},en=p(`<p>一个非 prop 的 attribute 是指传向一个组件，但是该组件并没有相应 prop 定义的 attribute。</p><p>因为显式定义的 prop 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的 attribute，而这些 attribute 会被添加到这个组件的根元素上。</p><p>例如，想象一下你通过一个 Bootstrap 插件使用了一个第三方的 <code>&lt;bootstrap-date-input&gt;</code> 组件，这个插件需要在其 <code>&lt;input&gt;</code> 上用到一个 <code>data-date-picker</code> attribute。我们可以将这个 attribute 添加到你的组件实例上：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>bootstrap<span class="token operator">-</span>date<span class="token operator">-</span>input data<span class="token operator">-</span>date<span class="token operator">-</span>picker<span class="token operator">=</span><span class="token string">&quot;activated&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>bootstrap<span class="token operator">-</span>date<span class="token operator">-</span>input<span class="token operator">&gt;</span>
</code></pre></div><p>然后这个 <code>data-date-picker=&quot;activated&quot;</code> attribute 就会自动添加到 <code>&lt;bootstrap-date-input&gt;</code> 的根元素上。</p>`,5),cn={id:"替换-合并已有的-attribute",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#替换-合并已有的-attribute","aria-hidden":"true"},"#",-1),rn={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E6%9B%BF%E6%8D%A2-%E5%90%88%E5%B9%B6%E5%B7%B2%E6%9C%89%E7%9A%84-Attribute",target:"_blank",rel:"noopener noreferrer"},un=p(`<p>想象一下 <code>&lt;bootstrap-date-input&gt;</code> 的模板是这样的：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;date&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;form-control&quot;</span><span class="token operator">&gt;</span>
</code></pre></div><p>为了给我们的日期选择器插件定制一个主题，我们可能需要像这样添加一个特别的类名：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>bootstrap<span class="token operator">-</span>date<span class="token operator">-</span>input
  data<span class="token operator">-</span>date<span class="token operator">-</span>picker<span class="token operator">=</span><span class="token string">&quot;activated&quot;</span>
  <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;date-picker-theme-dark&quot;</span>
<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>bootstrap<span class="token operator">-</span>date<span class="token operator">-</span>input<span class="token operator">&gt;</span>
</code></pre></div><p>在这种情况下，我们定义了两个不同的 <code>class</code> 的值：</p><ul><li><code>form-control</code>，这是在组件的模板内设置好的</li><li><code>date-picker-theme-dark</code>，这是从组件的父级传入的</li></ul><p>对于绝大多数 attribute 来说，从外部提供给组件的值会替换掉组件内部设置好的值。所以如果传入 <code>type=&quot;text&quot;</code> 就会替换掉 <code>type=&quot;date&quot;</code> 并把它破坏！庆幸的是，<code>class</code> 和 <code>style</code> attribute 会稍微智能一些，即两边的值会被合并起来，从而得到最终的值：<code>form-control date-picker-theme-dark</code>。</p>`,7),kn={id:"禁用-attribute-继承",tabindex:"-1"},gn=n("a",{class:"header-anchor",href:"#禁用-attribute-继承","aria-hidden":"true"},"#",-1),dn={href:"https://cn.vuejs.org/v2/guide/components-props.html#%E7%A6%81%E7%94%A8-Attribute-%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"},mn=p(`<p>如果你<strong>不</strong>希望组件的根元素继承 attribute，你可以在组件的选项中设置 <code>inheritAttrs: false</code>。例如：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>这尤其适合配合实例的 <code>$attrs</code> property 使用，该 property 包含了传递给一个组件的 attribute 名和 attribute 值，例如：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">&#39;Enter your username&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4),hn=n("code",null,"inheritAttrs: false",-1),yn=n("code",null,"$attrs",-1),vn={href:"https://cn.vuejs.org/v2/style-guide/#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%90%8D-%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90",target:"_blank",rel:"noopener noreferrer"},bn=p(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;base-input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;label&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;label&gt;
      {{ label }}
      &lt;input
        v-bind=&quot;$attrs&quot;
        v-bind:value=&quot;value&quot;
        v-on:input=&quot;$emit(&#39;input&#39;, $event.target.value)&quot;
      &gt;
    &lt;/label&gt;
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>注意 <code>inheritAttrs: false</code> 选项<strong>不会</strong>影响 <code>style</code> 和 <code>class</code> 的绑定。</p><p>这个模式允许你在使用基础组件的时候更像是使用原始的 HTML 元素，而不会担心哪个元素是真正的根元素：</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-input</span>
  <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Username:<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">required</span>
  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter your username<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-input</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,4);function qn(_n,fn){const a=e("ExternalLinkIcon");return c(),l("div",null,[k,n("h2",i,[g,s(),n("a",d,[s("Prop 的大小写 (camelCase vs kebab-case)"),t(a)])]),m,n("h2",h,[y,s(),n("a",v,[s("Prop 类型"),t(a)])]),b,n("p",null,[s("这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。你会在这个页面接下来的部分看到"),n("a",q,[s("类型检查和其它 prop 验证"),t(a)]),s("。")]),n("h2",_,[f,s(),n("a",E,[s("传递静态或动态 Prop"),t(a)])]),j,n("h3",A,[B,s(),n("a",w,[s("传入一个数字"),t(a)])]),x,n("h3",V,[C,s(),n("a",D,[s("传入一个布尔值"),t(a)])]),M,n("h3",P,[F,s(),n("a",N,[s("传入一个数组"),t(a)])]),S,n("h3",$,[J,s(),n("a",L,[s("传入一个对象"),t(a)])]),O,n("h3",T,[z,s(),n("a",I,[s("传入一个对象的所有 property"),t(a)])]),H,n("h2",R,[U,s(),n("a",G,[s("单向数据流"),t(a)])]),K,n("h2",Q,[W,s(),n("a",X,[s("Prop 验证"),t(a)])]),Y,n("h3",Z,[nn,s(),n("a",sn,[s("类型检查"),t(a)])]),an,n("h2",tn,[pn,s(),n("a",on,[s("非 Prop 的 Attribute"),t(a)])]),en,n("h3",cn,[ln,s(),n("a",rn,[s("替换/合并已有的 Attribute"),t(a)])]),un,n("h3",kn,[gn,s(),n("a",dn,[s("禁用 Attribute 继承"),t(a)])]),mn,n("p",null,[s("有了 "),hn,s(" 和 "),yn,s("，你就可以手动决定这些 attribute 会被赋予哪个元素。在撰写"),n("a",vn,[s("基础组件"),t(a)]),s("的时候是常会用到的：")]),bn])}const jn=o(u,[["render",qn],["__file","compomentsb.html.vue"]]);export{jn as default};
