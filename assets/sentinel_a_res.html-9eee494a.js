import{_ as a,p as n,q as s,a1 as e}from"./framework-d81ad7e5.js";const t={},l=e(`<p>参考源码的注释，逐个解释下这几个属性的作用。</p><h4 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> value</h4><p>资源名称，必需项，因为需要通过resource name找到对应的规则，这个是必须配置的。</p><h4 id="entrytype" tabindex="-1"><a class="header-anchor" href="#entrytype" aria-hidden="true">#</a> entryType</h4><p>entry 类型，可选项， 有IN和OUT两个选项，默认为 EntryType.OUT。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>public enum EntryType {
    IN(&quot;IN&quot;),
    OUT(&quot;OUT&quot;);
}
</code></pre></div><h4 id="blockhandler" tabindex="-1"><a class="header-anchor" href="#blockhandler" aria-hidden="true">#</a> blockHandler</h4><p>blockHandler 对应处理 BlockException 的函数名称，可选项。 blockHandler 函数访问范围需要是 public，返回类型需要与原方法相匹配， 参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。</p><div class="language-java" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/gtr&quot;</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;gtr&quot;</span> <span class="token punctuation">,</span>blockHandler <span class="token operator">=</span> <span class="token string">&quot;errorHandle&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">ResultBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">tsRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;测试全局的ResultController&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token class-name">ResultBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">errorHandle</span><span class="token punctuation">(</span><span class="token class-name">BlockException</span> gl<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">888</span><span class="token punctuation">,</span><span class="token string">&quot;测试全局的ResultController&quot;</span><span class="token operator">+</span>gl<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre></div><ul><li>在Sentinel控制台主要是根据@SentinelResource的<code>value</code>来进行流控降级</li></ul><h4 id="blockhandlerclass" tabindex="-1"><a class="header-anchor" href="#blockhandlerclass" aria-hidden="true">#</a> blockHandlerClass</h4><p>blockHandler 函数默认需要和原方法在同一个类中，如果希望使用其他类的函数， 则需要指定 blockHandlerClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</p><h4 id="fallback" tabindex="-1"><a class="header-anchor" href="#fallback" aria-hidden="true">#</a> fallback</h4><p>fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。 fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。</p><h4 id="fallbackclass" tabindex="-1"><a class="header-anchor" href="#fallbackclass" aria-hidden="true">#</a> fallbackClass</h4><p>fallbackClass的应用和blockHandlerClass类似，fallback 函数默认需要和原方法在同一个类中。 若希望使用其他类的函数，则可以指定 fallbackClass 为对应的类的 Class 对象，注意对应的函数必需为 static 函数，否则无法解析。</p><h4 id="defaultfallback-since-1-6-0" tabindex="-1"><a class="header-anchor" href="#defaultfallback-since-1-6-0" aria-hidden="true">#</a> defaultFallback（since 1.6.0）</h4><p>如果没有配置defaultFallback方法，默认都会走到这里来。 默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑。 默认 fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。 若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。</p>`,18),c=[l];function p(o,u){return n(),s("div",null,c)}const i=a(t,[["render",p],["__file","sentinel_a_res.html.vue"]]);export{i as default};
