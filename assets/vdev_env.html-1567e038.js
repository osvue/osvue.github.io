import{_ as t,M as c,p as d,q as p,R as e,t as n,N as a,a1 as s}from"./framework-d81ad7e5.js";const l={},i=e("h2",{id:"env",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#env","aria-hidden":"true"},"#"),n(" env")],-1),r=e("p",null,"======",-1),u={href:"https://gitee.com/osvue/quartz_boot_vue/tree/master/dataCk/vu_coding/protal",target:"_blank",rel:"noopener noreferrer"},_={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html",target:"_blank",rel:"noopener noreferrer"},v=s('<ol><li><p>vue下默认 NODE_ENV 变量只提供了三个: NODE_ENV = development NODE_ENV = production NODE_ENV = test</p></li><li><p>环境模式切换 vue-cli-service serve --mode 环境名</p></li><li><p>默认模式： --mode development --mode production --mode test</p></li></ol><p>同时可以自定义模式名 自定义的模式对应的NODE_ENV实质: NODE_ENV = development --mode preview --mode feature --mode xxx</p><ol start="4"><li><p>配置文件命名: 带 .local 后缀文件会被git忽略 记得: 非开发的配置文件都加 .local 后缀 .env.【mode】 .env.【mode】.local</p></li><li><p>内部变量命名规则: VUE_APP_* VUE_APP_BASE_URL = localhost:8081 VUE_APP_API_PREFIX_V1 = /api/v1 VUE_APP_API_PREFIX_V2 = /api/v2</p></li></ol><h1 id="模式和环境变量" tabindex="-1"><a class="header-anchor" href="#模式和环境变量" aria-hidden="true">#</a> 模式和环境变量</h1>',4),h={id:"模式",tabindex:"-1"},E=e("a",{class:"header-anchor",href:"#模式","aria-hidden":"true"},"#",-1),g={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},m=s(`<p><strong>模式</strong>是 Vue CLI 项目中一个重要的概念。默认情况下，一个 Vue CLI 项目有三个模式：</p><ul><li><code>development</code> 模式用于 <code>vue-cli-service serve</code></li><li><code>test</code> 模式用于 <code>vue-cli-service test:unit</code></li><li><code>production</code> 模式用于 <code>vue-cli-service build</code> 和 <code>vue-cli-service test:e2e</code></li></ul><p>你可以通过传递 <code>--mode</code> 选项参数为命令行覆写默认的模式。例如，如果你想要在构建命令中使用开发环境变量：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>vue-cli-service build --mode development
</code></pre></div>`,4),k=e("code",null,"vue-cli-service",-1),b={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"NODE_ENV",-1),f=e("code",null,"production",-1),V=e("code",null,'"production"',-1),P=e("code",null,"test",-1),x=e("code",null,'"test"',-1),N=e("code",null,'"development"',-1),O=s("<p><code>NODE_ENV</code> 将决定您的应用运行的模式，是开发，生产还是测试，因此也决定了创建哪种 webpack 配置。</p><p>例如通过将 <code>NODE_ENV</code> 设置为 <code>&quot;test&quot;</code>，Vue CLI 会创建一个优化过后的，并且旨在用于单元测试的 webpack 配置，它并不会处理图片以及一些对单元测试非必需的其他资源。</p><p>同理，<code>NODE_ENV=development</code> 创建一个 webpack 配置，该配置启用热更新，不会对资源进行 hash 也不会打出 vendor bundles，目的是为了在开发的时候能够快速重新构建。</p><p>当你运行 <code>vue-cli-service build</code> 命令时，无论你要部署到哪个环境，应该始终把 <code>NODE_ENV</code> 设置为 <code>&quot;production&quot;</code> 来获取可用于部署的应用程序。</p><p>NODE_ENV</p><p>如果在环境中有默认的 <code>NODE_ENV</code>，你应该移除它或在运行 <code>vue-cli-service</code> 命令的时候明确地设置 <code>NODE_ENV</code>。</p>",6),D={id:"环境变量",tabindex:"-1"},T=e("a",{class:"header-anchor",href:"#环境变量","aria-hidden":"true"},"#",-1),B={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F",target:"_blank",rel:"noopener noreferrer"},I=s(`<p>你可以在你的项目根目录中放置下列文件来指定环境变量：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>.env                <span class="token comment"># 在所有的环境中被载入</span>
.env.local          <span class="token comment"># 在所有的环境中被载入，但会被 git 忽略</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>         <span class="token comment"># 只在指定的模式中被载入</span>
.env.<span class="token punctuation">[</span>mode<span class="token punctuation">]</span>.local   <span class="token comment"># 只在指定的模式中被载入，但会被 git 忽略</span>
</code></pre></div><p>一个环境文件只包含环境变量的“键=值”对：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>FOO=bar
VUE_APP_NOT_SECRET_CODE=some_value
</code></pre></div><p>警告</p><p>不要在你的应用程序中存储任何机密信息（例如私有 API 密钥）！</p><p>环境变量会随着构建打包嵌入到输出代码，意味着任何人都有机会能够看到它。</p><p>请注意，只有 <code>NODE_ENV</code>，<code>BASE_URL</code> 和以 <code>VUE_APP_</code> 开头的变量将通过 <code>webpack.DefinePlugin</code> 静态地嵌入到<em>客户端侧</em>的代码中。这是为了避免意外公开机器上可能具有相同名称的私钥。</p>`,8),C={href:"https://github.com/motdotla/dotenv#rules",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/motdotla/dotenv-expand",target:"_blank",rel:"noopener noreferrer"},F=s(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">FOO</span><span class="token operator">=</span>foo
<span class="token assign-left variable">BAR</span><span class="token operator">=</span>bar

<span class="token assign-left variable">CONCAT</span><span class="token operator">=</span><span class="token variable">$FOO</span><span class="token variable">$BAR</span> <span class="token comment"># CONCAT=foobar</span>
</code></pre></div><p>被载入的变量将会对 <code>vue-cli-service</code> 的所有命令、插件和依赖可用。</p><p>环境文件加载优先级</p><p>为一个特定模式准备的环境文件 (例如 <code>.env.production</code>) 将会比一般的环境文件 (例如 <code>.env</code>) 拥有更高的优先级。</p><p>此外，Vue CLI 启动时已经存在的环境变量拥有最高优先级，并不会被 <code>.env</code> 文件覆写。</p><p><code>.env</code> 环境文件是通过运行 <code>vue-cli-service</code> 命令载入的，因此环境文件发生变化，你需要重启服务。</p>`,6),S={id:"示例-staging-模式",tabindex:"-1"},U=e("a",{class:"header-anchor",href:"#示例-staging-模式","aria-hidden":"true"},"#",-1),L={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%A4%BA%E4%BE%8B%EF%BC%9Astaging-%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},R=s(`<p>假设我们有一个应用包含以下 <code>.env</code> 文件：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>VUE_APP_TITLE=My App
</code></pre></div><p>和 <code>.env.staging</code> 文件：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>NODE_ENV=production
VUE_APP_TITLE=My App (staging)
</code></pre></div><ul><li><code>vue-cli-service build</code> 会加载可能存在的 <code>.env</code>、<code>.env.production</code> 和 <code>.env.production.local</code> 文件然后构建出生产环境应用。</li><li><code>vue-cli-service build --mode staging</code> 会在 staging 模式下加载可能存在的 <code>.env</code>、<code>.env.staging</code> 和 <code>.env.staging.local</code> 文件然后构建出生产环境应用。</li></ul><p>这两种情况下，根据 <code>NODE_ENV</code>，构建出的应用都是生产环境应用，但是在 staging 版本中，<code>p<wbr>rocess.env.VUE_APP_TITLE</code> 被覆写成了另一个值。</p>`,6),w={id:"在客户端侧代码中使用环境变量",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#在客户端侧代码中使用环境变量","aria-hidden":"true"},"#",-1),M={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BE%A7%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F",target:"_blank",rel:"noopener noreferrer"},z=s(`<p>只有以 <code>VUE_APP_</code> 开头的变量会被 <code>webpack.DefinePlugin</code> 静态嵌入到客户端侧的包中。你可以在应用的代码中这样访问它们：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_SECRET</span><span class="token punctuation">)</span>
</code></pre></div><p>在构建过程中，<code>p<wbr>rocess.env.VUE_APP_SECRET</code> 将会被相应的值所取代。在 <code>VUE_APP_SECRET=secret</code> 的情况下，它会被替换为 <code>&quot;secret&quot;</code>。</p><p>除了 <code>VUE_APP_*</code> 变量之外，在你的应用代码中始终可用的还有两个特殊的变量：</p>`,4),y=e("code",null,"NODE_ENV",-1),K=e("code",null,'"development"',-1),Y=e("code",null,'"production"',-1),W=e("code",null,'"test"',-1),X={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},$=e("li",null,[e("code",null,"BASE_URL"),n(" - 会和 "),e("code",null,"vue.config.js"),n(" 中的 "),e("code",null,"publicPath"),n(" 选项相符，即你的应用会部署到的基础路径。")],-1),H=e("code",null,"public/index.html",-1),G={href:"https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E6%8F%92%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},J=s(`<p>提示</p><p>你可以在 <code>vue.config.js</code> 文件中计算环境变量。它们仍然需要以 <code>VUE_APP_</code> 前缀开头。这可以用于版本信息:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_VERSION</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// config</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),Q={id:"只在本地有效的变量",tabindex:"-1"},Z=e("a",{class:"header-anchor",href:"#只在本地有效的变量","aria-hidden":"true"},"#",-1),ee={href:"https://cli.vuejs.org/zh/guide/mode-and-env.html#%E5%8F%AA%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%9C%89%E6%95%88%E7%9A%84%E5%8F%98%E9%87%8F",target:"_blank",rel:"noopener noreferrer"},ne=s(`<p>有的时候你可能有一些不应该提交到代码仓库中的变量，尤其是当你的项目托管在公共仓库时。这种情况下你应该使用一个 <code>.env.local</code> 文件取而代之。本地环境文件默认会被忽略，且出现在 <code>.gitignore</code> 中。</p><p><code>.local</code> 也可以加在指定模式的环境文件上，比如 <code>.env.development.local</code> 将会在 development 模式下被载入，且被 git 忽略。</p><h2 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> vite</h2><p><code>.env</code> 文件 <code>Vite</code> 使用 dotenv 从你的 环境目录 中的下列文件加载额外的环境变量：</p><div class="language-env" data-ext="env"><pre class="language-env"><code>.env                # 所有情况下都会加载
.env.local          # 所有情况下都会加载，但会被 git 忽略
.env.[mode]         # 只在指定模式下加载
.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略
</code></pre></div><blockquote><p>环境加载优先级 一份用于指定模式的文件（例如 .env.production）会比通用形式的优先级更高（例如 .env）。 另外，Vite 执行时已经存在的环境变量有最高的优先级，不会被 .env 类文件覆盖。例如当运行 VITE_SOME_KEY=123 vite build 的时候。 .env 类文件会在 Vite 启动一开始时被加载，而改动会在重启服务器后生效。</p></blockquote><p>加载的环境变量也会通过 <code>i<wbr>mport.meta.env</code> 以字符串形式暴露给客户端源码。</p><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 <code>VITE_</code> 为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这些环境变量：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token constant">VITE_SOME_KEY</span><span class="token operator">=</span><span class="token number">123</span>
<span class="token constant">DB_PASSWORD</span><span class="token operator">=</span>foobar
</code></pre></div><ul><li>只有 <code>VITE_SOME_KEY</code> 会被暴露为 <code>i<wbr>mport.meta.env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_SOME_KEY</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DB_PASSWORD</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre></div><p>模式 默认情况下，开发服务器 (dev 命令) 运行在 development (开发) 模式，而 build 命令则运行在 production (生产) 模式。</p><p>这意味着当执行 vite build 时，它会自动加载 .env.production 中可能存在的环境变量：</p><h4 id="env-production" tabindex="-1"><a class="header-anchor" href="#env-production" aria-hidden="true">#</a> .env.production</h4><p><code>VITE_APP_TITLE=My App</code> 在你的应用中，你可以使用 <code>i<wbr>mport.meta.env.VITE_APP_TITLE</code> 渲染标题。</p><p>在某些情况下，若想在 <code>vite build</code> 时运行不同的模式来渲染不同的标题，你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。例如，如果你想在 <code>staging</code> （预发布）模式下构建应用：</p><p><code>vite build --mode staging</code> 还需要新建一个 <code>.env.staging</code> 文件：</p><h4 id="env-staging" tabindex="-1"><a class="header-anchor" href="#env-staging" aria-hidden="true">#</a> .env.staging</h4><p><code>VITE_APP_TITLE=My App (staging)</code> 由于 vite build 默认运行生产模式构建，你也可以通过使用不同的模式和对应的 <code>.env </code>文件配置来改变它，用以运行开发模式的构建：</p><h4 id="env-testing" tabindex="-1"><a class="header-anchor" href="#env-testing" aria-hidden="true">#</a> .env.testing</h4><p><code>NODE_ENV=development</code></p>`,21);function oe(ae,se){const o=c("ExternalLinkIcon");return d(),p("div",null,[i,r,e("blockquote",null,[e("p",null,[n("可参考我的"),e("a",u,[n("多数据源项目"),a(o)])])]),e("p",null,[e("a",_,[n("vue-cli 环境变量和模式"),a(o)])]),v,e("h2",h,[E,n(),e("a",g,[n("#"),a(o)]),n("模式")]),m,e("p",null,[n("当运行 "),k,n(" 命令时，所有的环境变量都从对应的"),e("a",b,[n("环境文件"),a(o)]),n("中载入。如果文件内部不包含 "),A,n(" 变量，它的值将取决于模式，例如，在 "),f,n(" 模式下被设置为 "),V,n("，在 "),P,n(" 模式下被设置为 "),x,n("，默认则是 "),N,n("。")]),O,e("h2",D,[T,n(),e("a",B,[n("#"),a(o)]),n("环境变量")]),I,e("p",null,[n("想要了解解析环境文件规则的细节，请参考 "),e("a",C,[n("dotenv"),a(o)]),n("。我们也使用 "),e("a",j,[n("dotenv-expand"),a(o)]),n(" 来实现变量扩展 (Vue CLI 3.5+ 支持)。例如：")]),F,e("h2",S,[U,n(),e("a",L,[n("#"),a(o)]),n("示例：Staging 模式")]),R,e("h2",w,[q,n(),e("a",M,[n("#"),a(o)]),n("在客户端侧代码中使用环境变量")]),z,e("ul",null,[e("li",null,[y,n(" - 会是 "),K,n("、"),Y,n(" 或 "),W,n(" 中的一个。具体的值取决于应用运行的"),e("a",X,[n("模式"),a(o)]),n("。")]),$]),e("p",null,[n("所有解析出来的环境变量都可以在 "),H,n(" 中以 "),e("a",G,[n("HTML 插值"),a(o)]),n("中介绍的方式使用。")]),J,e("h2",Q,[Z,n(),e("a",ee,[n("#"),a(o)]),n("只在本地有效的变量")]),ne])}const ce=t(l,[["render",oe],["__file","vdev_env.html.vue"]]);export{ce as default};
