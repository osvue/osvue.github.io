import{_ as n,p as a,q as s,a1 as e}from"./framework-d81ad7e5.js";const t={},p=e(`<h2 id="netstat" tabindex="-1"><a class="header-anchor" href="#netstat" aria-hidden="true">#</a> netstat</h2><p><code>netstat -natp |grep 8080</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># netstat -natp |grep 80</span>
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:80                  <span class="token number">0.0</span>.0.0:*                   LISTEN      <span class="token number">85172</span>/nginx         
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">192.168</span>.1.60:22             <span class="token number">192.168</span>.1.88:63080          ESTABLISHED <span class="token number">96459</span>/sshd          
tcp        <span class="token number">0</span>      <span class="token number">0</span> ::ffff:192.168.1.60:8090    :::*                        LISTEN      <span class="token number">73967</span>/java          
tcp        <span class="token number">0</span>      <span class="token number">0</span> ::ffff:127.0.0.1:8090       :::*                        LISTEN      <span class="token number">73967</span>/java          
tcp        <span class="token number">0</span>      <span class="token number">0</span> ::1:8090                    :::*                        LISTEN      <span class="token number">73967</span>/java          
tcp        <span class="token number">0</span>      <span class="token number">0</span> ::ffff:192.168.1.60:36800   ::ffff:192.168.1.198:13007  ESTABLISHED <span class="token number">73967</span>/java          
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># </span>

</code></pre></div><ul><li>netstat - 打印网络连接、路由表、连接的数据统计、伪装连接以及广播域成员。</li></ul><h3 id="a" tabindex="-1"><a class="header-anchor" href="#a" aria-hidden="true">#</a> <code>-a</code></h3><ol><li>列出所有连接 第一个要介绍的，是最简单的命令：列出所有当前的连接。使用 -a 选项即可。</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>
</code></pre></div><p>上述命令列出 tcp, udp 和 unix 协议下所有套接字的所有连接。然而这些信息还不够详细，管理员往往需要查看某个协议或端口的具体连接情况。</p><h3 id="t-u" tabindex="-1"><a class="header-anchor" href="#t-u" aria-hidden="true">#</a> <code>-t -u</code></h3><ol start="2"><li>只列出 TCP 或 UDP 协议的连接 使用 -t 选项列出 TCP 协议的连接：</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>
</code></pre></div><p>使用 -u 选项列出 UDP 协议的连接：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>
</code></pre></div><p>上面同时显示了 IPv4 和 IPv6 的连接。</p><h3 id="n" tabindex="-1"><a class="header-anchor" href="#n" aria-hidden="true">#</a> <code>-n</code></h3><ol start="3"><li>禁用反向域名解析，加快查询速度 默认情况下 netstat 会通过反向域名解析技术查找每个 IP 地址对应的主机名。这会降低查找速度。如果你觉得 IP 地址已经足够，而没有必要知道主机名，就使用 -n 选项禁用域名解析功能。</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>
</code></pre></div><p>上述命令列出所有 TCP 协议的连接，没有使用域名解析技术。So easy ? 非常好。</p><h3 id="l" tabindex="-1"><a class="header-anchor" href="#l" aria-hidden="true">#</a> <code>-l</code></h3><ol start="4"><li>只列出监听中的连接 任何网络服务的后台进程都会打开一个端口，用于监听接入的请求。这些正在监听的套接字也和连接的套接字一样，也能被 netstat 列出来。使用 -l 选项列出正在监听的套接字。</li></ol><p>现在我们可以看到处于监听状态的 TCP 端口和连接。如果你查看所有监听端口，去掉 -t 选项。如果你只想查看 UDP 端口，使用 -u 选项，代替 -t 选项。</p><p>注意：不要使用 -a 选项，否则 netstat 会列出所有连接，而不仅仅是监听端口。</p><h3 id="p" tabindex="-1"><a class="header-anchor" href="#p" aria-hidden="true">#</a> <code>-p</code></h3><ol start="5"><li>获取进程名、进程号以及用户 ID 查看端口和连接的信息时，能查看到它们对应的进程名和进程号对系统管理员来说是非常有帮助的。举个栗子，Apache 的 httpd 服务开启80端口，如果你要查看 http 服务是否已经启动，或者 http 服务是由 apache 还是 nginx 启动的，这时候你可以看看进程名。</li></ol><p>使用 -p 选项查看进程信息。</p><p>使用 -p 选项时，netstat 必须运行在 root 权限之下，不然它就不能得到运行在 root 权限下的进程名，而很多服务包括 http 和 ftp 都运行在 root 权限之下。</p><p>相比进程名和进程号而言，查看进程的拥有者会更有用。使用 -ep 选项可以同时查看进程名和用户名。</p><p>上面列出 TCP 协议下的监听套接字，同时显示进程信息和一些额外信息。</p><p>这些额外的信息包括用户名和进程的索引节点号。这个命令对网管来说很有用。</p><p>注意 - 假如你将 -n 和 -e 选项一起使用，User 列的属性就是用户的 ID 号，而不是用户名。</p><ol start="6"><li>打印统计数据 netstat 可以打印出网络统计数据，包括某个协议下的收发包数量。</li></ol><p>下面列出所有网络包的统计情况：</p><p>如果想只打印出 TCP 或 UDP 协议的统计数据，只要加上对应的选项（-t 和 -u）即可，so easy。</p><ol start="7"><li><p>显示内核路由信息 使用 -r 选项打印内核路由信息。打印出来的信息与 route 命令输出的信息一样。我们也可以使用 -n 选项禁止域名解析。</p></li><li><p>打印网络接口 netstat 也能打印网络接口信息，-i 选项就是为这个功能而生。</p></li></ol><p>上面输出的信息比较原始。我们将 -e 选项和 -i 选项搭配使用，可以输出用户友好的信息。</p><p>上面的输出信息与 ifconfig 输出的信息一样。</p><ol start="9"><li>netstat 持续输出 我们可以使用 netstat 的 -c 选项持续输出信息。</li></ol><p>这个命令可持续输出 TCP 协议信息。</p><ol start="10"><li>显示多播组信息 选项 -g 会输出 IPv4 和 IPv6 的多播组信息。</li></ol><p>更多用法</p><ul><li>查看服务是否在运行</li><li>如果你想看看 http,smtp 或 ntp 服务是否在运行，使用 grep。</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>
</code></pre></div><h3 id="netstat-安装" tabindex="-1"><a class="header-anchor" href="#netstat-安装" aria-hidden="true">#</a> netstat 安装</h3><ul><li><code>yum -y install net-tools</code></li></ul><h3 id="查看哪些ip连接本机" tabindex="-1"><a class="header-anchor" href="#查看哪些ip连接本机" aria-hidden="true">#</a> 查看哪些IP连接本机</h3><p><code>netstat -an</code></p><h3 id="查看tcp连接数" tabindex="-1"><a class="header-anchor" href="#查看tcp连接数" aria-hidden="true">#</a> 查看TCP连接数</h3><ul><li>统计80端口连接数</li></ul><p><code>netstat -nat | grep -i &quot;80&quot; | wc -l</code></p><h3 id="linux根据进程查端口-根据端口查进程" tabindex="-1"><a class="header-anchor" href="#linux根据进程查端口-根据端口查进程" aria-hidden="true">#</a> linux根据进程查端口，根据端口查进程</h3><ul><li><code>netstat -tnllup</code> 能显示对应端口和进程</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@JYITTC247 app<span class="token punctuation">]</span><span class="token comment"># netstat -tnllup</span>
Active Internet connections <span class="token punctuation">(</span>only servers<span class="token punctuation">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:111             <span class="token number">0.0</span>.0.0:*               LISTEN      <span class="token number">818</span>/rpcbind         
tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:22              <span class="token number">0.0</span>.0.0:*               LISTEN      <span class="token number">1238</span>/sshd           
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::111                  :::*                    LISTEN      <span class="token number">818</span>/rpcbind         
tcp6       <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:8945          :::*                    LISTEN      <span class="token number">1757</span>/java           
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::25169                :::*                    LISTEN      <span class="token number">1757</span>/java           
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::9011                 :::*                    LISTEN      <span class="token number">1757</span>/java           
tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::22                   :::*                    LISTEN      <span class="token number">1238</span>/sshd           
udp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:323           <span class="token number">0.0</span>.0.0:*                           <span class="token number">829</span>/chronyd         
udp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:983             <span class="token number">0.0</span>.0.0:*                           <span class="token number">818</span>/rpcbind         
udp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:111             <span class="token number">0.0</span>.0.0:*                           <span class="token number">818</span>/rpcbind         
udp6       <span class="token number">0</span>      <span class="token number">0</span> ::1:323                 :::*                                <span class="token number">829</span>/chronyd         
udp6       <span class="token number">0</span>      <span class="token number">0</span> :::983                  :::*                                <span class="token number">818</span>/rpcbind         
udp6       <span class="token number">0</span>      <span class="token number">0</span> :::111                  :::*                                <span class="token number">818</span>/rpcbind         
<span class="token punctuation">[</span>root@JYITTC247 app<span class="token punctuation">]</span><span class="token comment"># </span>
</code></pre></div><ul><li><p>根据进程pid查端口：<code>netstat -nap | grep pid</code></p></li><li><p>根据端口port查进程：<code>netstat -nap | grep port</code></p></li></ul><h3 id="tcp连接状态详解" tabindex="-1"><a class="header-anchor" href="#tcp连接状态详解" aria-hidden="true">#</a> TCP连接状态详解</h3><ul><li>LISTEN： 侦听来自远方的TCP端口的连接请求</li><li>SYN-SENT： 再发送连接请求后等待匹配的连接请求</li><li>SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认</li><li>ESTABLISHED： 代表一个打开的连接</li><li>FIN-WAIT-1： 等待远程TCP连接中断请求，或先前的连接中断请求的确认</li><li>FIN-WAIT-2： 从远程TCP等待连接中断请求</li><li>CLOSE-WAIT： 等待从本地用户发来的连接中断请求</li><li>CLOSING： 等待远程TCP对连接中断的确认</li><li>LAST-ACK： 等待原来的发向远程TCP的连接中断请求的确认</li><li>TIME-WAIT： 等待足够的时间以确保远程TCP接收到连接中断请求的确认</li><li>CLOSED： 没有任何连接状态</li><li>SYN_RECV表示正在等待处理的请求数；</li><li>ESTABLISHED表示正常数据传输状态；</li><li>TIME_WAIT表示处理完毕，等待超时结束的请求数。</li></ul><h4 id="如发现系统存在大量time-wait状态的连接-通过调整内核参数解决" tabindex="-1"><a class="header-anchor" href="#如发现系统存在大量time-wait状态的连接-通过调整内核参数解决" aria-hidden="true">#</a> 如发现系统存在大量TIME_WAIT状态的连接，通过调整内核参数解决</h4><p><code>vim /etc/sysctl.conf</code></p><ul><li>编辑文件，加入以下内容：</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>net.ipv4.tcp_syncookies <span class="token operator">=</span> <span class="token number">1</span>
net.ipv4.tcp_tw_reuse <span class="token operator">=</span> <span class="token number">1</span>
net.ipv4.tcp_tw_recycle <span class="token operator">=</span> <span class="token number">1</span>
net.ipv4.tcp_fin_timeout <span class="token operator">=</span> <span class="token number">30</span>
</code></pre></div><ul><li>然后执行</li></ul><p><code>/sbin/sysctl -p</code> 让参数生效。</p><p>附上TIME_WAIT状态的意义：</p><ul><li><strong>net.ipv4.tcp_syncookies = 1</strong> 表示开启SYN cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</li><li><strong>net.ipv4.tcp_tw_reuse = 1</strong> 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</li><li><strong>net.ipv4.tcp_tw_recycle = 1</strong> 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</li><li><strong>net.ipv4.tcp_fin_timeout</strong> 修改系統默认的TIMEOUT时间</li></ul>`,63),l=[p];function c(o,r){return a(),s("div",null,l)}const u=n(t,[["render",c],["__file","netstat.html.vue"]]);export{u as default};
