import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<blockquote><p>当我们使用 @RequestMapping 注解去标记请求接口的时候（或者使用它的类似方法如 @GetMapping、@PostMapping、@PutMapping、@DeleteMapping、@PatchMapping），我们可以使用一些通配符去匹配 URL 地址，举个简单例子，假设有下面五个接口：</p></blockquote><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/**/hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;/hello/**/hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/h?llo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;/h?llo&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**/*.html&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;/**/*.html&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/{p1}/{p2}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> p1<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;p1 = &quot;</span> <span class="token operator">+</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;p2 = &quot;</span> <span class="token operator">+</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;/hello/{p1}/{p2}&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{name:[a-z-]+}-{version:\\\\d\\\\.\\\\d\\\\.\\\\d}{ext:\\\\.[a-z]+}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> version<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> ext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;version = &quot;</span> <span class="token operator">+</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ext = &quot;</span> <span class="token operator">+</span> ext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><blockquote><p>在解释接口的含义之前，先来说说这几个通配符的含义：</p></blockquote><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td><code>**</code></td><td>匹配0个或者多个目录</td></tr><tr><td><code>*</code></td><td>匹配0个或者多个字符</td></tr><tr><td><code>?</code></td><td>匹配任意单个字符</td></tr></tbody></table><ul><li><p>了解了通配符的含义，我们再来说说各个接口都能接收哪些请求：</p><ul><li>第一个接口，可以接收诸如 /hello/123/123/hello、/hello/a/hello 以及 /hello/hello 这样的请求，因为中间的 ** 代表 0 个或者多个目录。</li><li>第二个接口，可以接收诸如 /hallo、/hello、/hMllo 之类的请求，注意它不能接收 /haallo 或者 /hllo，因为 ? 表示一个字符。</li><li>第三个接口可以接收任意以 .html 为后缀的请求，例如 /aaa/bb/cc.html、/aa.html 或者 /aa/aa.html。</li><li>第四个接口估计大家都比较熟悉，在 RESTful 风格的接口设计中估计大家都用过，它接收的请求格式类似于 /hello/aa/bb，其中参数 p1 就对应 aa，参数 p2 对应 bb。</li><li>第五个接口则用到了正则，name、version 以及 ext 三个参数格式用正则表达出来，它可以接收诸如 /spring-web-3.0.5.jar 格式的请求，最终的参数 name 就是 spring-web，version 就是 3.0.5，ext 则是 .jar。</li><li>这是 SpringMVC 中之前就存在的功能，不管你用没用过，反正它一致存在。</li></ul></li></ul><blockquote><p>那么是谁支撑了这个功能呢？那就是 AntPathMatcher。</p></blockquote><ul><li><p>AntPathMatcher 是一个实现了 Ant 风格的路径匹配器，Ant 风格的路径规则实际上就是我们前面给大家介绍的那三种路径匹配符，很 Easy。这种路径匹配规则源自 Apache Ant 项目（https://ant.apache.org），Apache Ant 我们现在其实已经很少会用到了，它的替代品就是大家所熟知的 Maven，如果你有幸维护一些 2010 年之前的老项目的话，有可能会接触到 Ant。</p><ul><li>AntPathMatcher 实际上在 SpringMVC 中有非常广泛的应用，不仅仅是在 @RequestMapping 中定义接口用到，在其他一些涉及到地址匹配的地方也会用到，例如我们在 SpringMVC 的配置文件中配置静态资源过滤时，也是 Ant 风格路径匹配：</li></ul></li></ul><p><code>&lt;mvc:resources mapping=&quot;/**&quot; location=&quot;/&quot;/&gt;</code> 另外像拦截器里的拦截路径注册、跨域处理时的路径匹配等等，都会用到 Ant 风格的路径匹配符。</p><p>整体上来说，AntPathMatcher 是 Spring 中一种比较原始的路径匹配解决方案，虽然比较简单，但是它的效率很低，并且在处理 URL 编码的时候也很不方便。</p><p>因此，才有了 Spring5 中的 PathPattern</p>`,10),e=[o];function c(l,u){return a(),s("div",null,e)}const k=n(p,[["render",c],["__file","vmvc04_path.html.vue"]]);export{k as default};
