import{_ as n,p as s,q as a,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<h2 id="object-prototype-hasownproperty" tabindex="-1"><a class="header-anchor" href="#object-prototype-hasownproperty" aria-hidden="true">#</a> Object.prototype.hasOwnProperty</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>obj.hasOwnProperty(prop)</p></div><p>参数：</p><ul><li>prop：要检测的属性。</li></ul><p>返回值：</p><p>返回对象是否含有指定属性的布尔值。</p><h3 id="_2-描述" tabindex="-1"><a class="header-anchor" href="#_2-描述" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>忽略原型链继承的属性。</li></ul></blockquote><h3 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using hasOwnProperty to test for a property&#39;s existence</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;prop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
o<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">&#39;exists&#39;</span><span class="token punctuation">;</span> 
o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;prop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
</code></pre></div></li><li><p>direct vs. inherited properties</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">&#39;exists&#39;</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;prop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;toString&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;hasOwnProperty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div></li><li><p>using hasOwnProperty as a property name</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">hasOwnProperty</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;Here be dragons&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

foo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// always returns false</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div></li></ul><h2 id="object-prototype-isprototypeof" tabindex="-1"><a class="header-anchor" href="#object-prototype-isprototypeof" aria-hidden="true">#</a> Object.prototype.isPrototypeOf</h2><h3 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>prototypeObj.isPrototypeOf(object)</p></div><p>参数：</p><ul><li>object：在该对象的原型链上搜寻。</li></ul><p>返回值：</p><p>返回调用对象是否在另一个对象的原型链上的布尔值。</p><h3 id="_2-描述-1" tabindex="-1"><a class="header-anchor" href="#_2-描述-1" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-1" tabindex="-1"><a class="header-anchor" href="#_3-示例-1" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>normal</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>unction <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Baz</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Baz</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div></li></ul><h2 id="object-prototype-propertyisenumerable" tabindex="-1"><a class="header-anchor" href="#object-prototype-propertyisenumerable" aria-hidden="true">#</a> Object.prototype.propertyIsEnumerable</h2><h3 id="_1-语法-2" tabindex="-1"><a class="header-anchor" href="#_1-语法-2" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>obj.propertyIsEnumerable(prop)</p></div><p>参数：</p><ul><li>prop：需要测试的属性名。</li></ul><p>返回值：</p><p>返回指定的属性名是否可枚举的布尔值。</p><h3 id="_2-描述-2" tabindex="-1"><a class="header-anchor" href="#_2-描述-2" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-2" tabindex="-1"><a class="header-anchor" href="#_3-示例-2" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>basic use</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

o<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">&#39;is enumerable&#39;</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;is enumerable&#39;</span><span class="token punctuation">;</span>

o<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;prop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
a<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div></li><li><p>user-defined vs. built-in objects</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;is enumerable&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

a<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
a<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

Math<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;random&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;Math&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div></li><li><p>direct vs. inherited properties</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;constructor&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">function</span> <span class="token function">firstConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token string">&#39;is not enumerable&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

firstConstructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">firstMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">secondConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;is enumerable&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

secondConstructor<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">firstConstructor</span><span class="token punctuation">;</span>
secondConstructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> secondConstructor<span class="token punctuation">;</span>

<span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">secondConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span>arbitraryProperty <span class="token operator">=</span> <span class="token string">&#39;is enumerable&#39;</span><span class="token punctuation">;</span>

o<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;arbitraryProperty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
o<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;method&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
o<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&#39;property&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div></li></ul><h2 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString</h2><h3 id="_1-语法-3" tabindex="-1"><a class="header-anchor" href="#_1-语法-3" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>obj.toString()</p></div><p>返回值：</p><p>一个表示该对象的字符串。</p><h3 id="_2-描述-3" tabindex="-1"><a class="header-anchor" href="#_2-描述-3" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-3" tabindex="-1"><a class="header-anchor" href="#_3-示例-3" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>overriding the default toString method</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object]</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed<span class="token punctuation">,</span> color<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">dogToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Dog </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>breed<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

theDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Gabby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lab&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;chocolate&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
theDog<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Dog Gabby is a female chocolate Lab</span>
</code></pre></div></li><li><p>using toString to detect object class</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Date]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object String]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Math]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Undefined]</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Null]</span>
</code></pre></div></li></ul><h2 id="object-prototype-tolocalestring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tolocalestring" aria-hidden="true">#</a> Object.prototype.toLocaleString</h2><h3 id="_1-语法-4" tabindex="-1"><a class="header-anchor" href="#_1-语法-4" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>obj.toLocaleString()</p></div><p>返回值：</p><p>一个表示该对象的字符串。</p><h3 id="_2-描述-4" tabindex="-1"><a class="header-anchor" href="#_2-描述-4" aria-hidden="true">#</a> 2. 描述</h3><p>toLocaleString 用于派生对象为了特定语言环境的目的而重载使用，例如每个地区的时间表示。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>本地化时间。</li></ul></blockquote><h2 id="object-prototype-valueof" tabindex="-1"><a class="header-anchor" href="#object-prototype-valueof" aria-hidden="true">#</a> Object.prototype.valueOf</h2><h3 id="_1-语法-5" tabindex="-1"><a class="header-anchor" href="#_1-语法-5" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>obj.valueOf()</p></div><p>返回值：</p><p>返回值为该对象的原始值。</p><h3 id="_2-描述-5" tabindex="-1"><a class="header-anchor" href="#_2-描述-5" aria-hidden="true">#</a> 2. 描述</h3><p>默认情况下，valueOf 方法由 Object 后的每个对象继承。每个内置的核心对象都会覆盖该方法以返回适当的值。如果对象，没有原始值，则返回对象本身。</p><table><thead><tr><th>对象</th><th>返回值</th></tr></thead><tbody><tr><td>Array</td><td>数组对象本身。</td></tr><tr><td>Boolean</td><td>布尔值。</td></tr><tr><td>Date</td><td>存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。</td></tr><tr><td>Function</td><td>函数本身。</td></tr><tr><td>Number</td><td>数字值。</td></tr><tr><td>Object</td><td>对象本身。</td></tr><tr><td>String</td><td>字符串值。</td></tr><tr><td></td><td>Math 和 Error 对象没有 valueOf 方法。</td></tr></tbody></table><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote>`,63),e=[o];function c(u,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","object-instance-methods.html.vue"]]);export{r as default};
