import{_ as a,p as e,q as n,a1 as s}from"./framework-d81ad7e5.js";const r={},i=s(`<h2 id="ribbon" tabindex="-1"><a class="header-anchor" href="#ribbon" aria-hidden="true">#</a> ribbon</h2><h3 id="两种负载均衡" tabindex="-1"><a class="header-anchor" href="#两种负载均衡" aria-hidden="true">#</a> 两种负载均衡</h3><p>​ 当系统面临大量的用户访问，负载过高的时候，通常会增加服务器数量来进行横向扩展（集群），多个服务器的负载需要均衡，以免出现服务器负载不均衡，部分服务器负载较大，部分服务器负载较小的情况。通过负载均衡，使得集群中服务器的负载保持在稳定高效的状态，从而提高整个系统的处理能力。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>软件负载均衡：nginx,lvs

硬件负载均衡：F5

我们只关注软件负载均衡，
第一层可以用DNS，配置多个A记录，让DNS做第一层分发。
第二层用比较流行的是反向代理，核心原理：代理根据一定规则，将http请求转发到服务器集群的单一服务器上。
</code></pre></div><p>软件负载均衡分为：服务端（集中式），客户端。</p><p>服务端负载均衡：在客户端和服务端中间使用代理，nginx。</p><p>客户端负载均衡：根据自己的情况做负载。Ribbon就是。</p><p>客户端负载均衡和服务端负载均衡最大的区别在于 <em><strong>服务端地址列表的存储位置，以及负载算法在哪里</strong></em>。</p><h3 id="客户端负载均衡" tabindex="-1"><a class="header-anchor" href="#客户端负载均衡" aria-hidden="true">#</a> 客户端负载均衡</h3><p>在客户端负载均衡中，所有的客户端节点都有一份自己要访问的服务端地址列表，这些列表统统都是从服务注册中心获取的；</p><h3 id="服务端负载均衡" tabindex="-1"><a class="header-anchor" href="#服务端负载均衡" aria-hidden="true">#</a> 服务端负载均衡</h3><p>在服务端负载均衡中，客户端节点只知道单一服务代理的地址，服务代理则知道所有服务端的地址。</p><p>我们要学的Ribbon使用的是客户端负载均衡。</p><p>而在Spring Cloud中我们如果想要使用客户端负载均衡，方法很简单，使用@LoadBalanced注解即可，这样客户端在发起请求的时候会根据负载均衡策略从服务端列表中选择一个服务端，向该服务端发起网络请求，从而实现负载均衡。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>https://github.com/Netflix/ribbon
</code></pre></div><hr><p>上面几种负载均衡，硬件，软件（服务端nginx，客户端ribbon）。目的：将请求分发到其他功能相同的服务。</p><p>手动实现，其实也是它的原理，做事的方法。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>手写客户端负载均衡
<span class="token number">1</span>、知道自己的请求目的地（虚拟主机名，默认是spring.application.name）
<span class="token number">2</span>、获取所有服务端地址列表（也就是注册表）。
<span class="token number">3</span>、选出一个地址，找到虚拟主机名对应的ip、port（将虚拟主机名 对应到 ip和port上）。
<span class="token number">4</span>、发起实际请求<span class="token punctuation">(</span>最朴素的请求<span class="token punctuation">)</span>。
</code></pre></div><p>Ribbon是Netflix开发的客户端负载均衡器，为Ribbon配置<strong>服务提供者地址列表</strong>后，Ribbon就可以基于某种<strong>负载均衡策略算法</strong>，自动地帮助服务消费者去请求 提供者。Ribbon默认为我们提供了很多负载均衡算法，例如轮询、随机等。我们也可以实现自定义负载均衡算法。</p><p>Ribbon作为Spring Cloud的负载均衡机制的实现，</p><ol><li>Ribbon可以单独使用，作为一个独立的负载均衡组件。只是需要我们手动配置 服务地址列表。</li><li>Ribbon与Eureka配合使用时，Ribbon可自动从Eureka Server获取服务提供者地址列表（DiscoveryClient），并基于负载均衡算法，请求其中一个服务提供者实例。</li><li>Ribbon与OpenFeign和RestTemplate进行无缝对接，让二者具有负载均衡的能力。OpenFeign默认集成了ribbon。</li></ol><h3 id="ribbon组成" tabindex="-1"><a class="header-anchor" href="#ribbon组成" aria-hidden="true">#</a> Ribbon组成</h3><p>官网首页：https://github.com/Netflix/ribbon</p><p>ribbon-core: 核心的通用性代码。api一些配置。</p><p>ribbon-eureka：基于eureka封装的模块，能快速集成eureka。</p><p>ribbon-examples：学习示例。</p><p>ribbon-httpclient：基于apache httpClient封装的rest客户端，集成了负载均衡模块，可以直接在项目中使用。</p><p>ribbon-loadbalancer：负载均衡模块。</p><p>ribbon-transport：基于netty实现多协议的支持。比如http，tcp，udp等。</p><h3 id="负载均衡算法" tabindex="-1"><a class="header-anchor" href="#负载均衡算法" aria-hidden="true">#</a> 负载均衡算法</h3><p>默认实现：</p><p>ZoneAvoidanceRule（区域权衡策略）：复合判断Server所在区域的性能和Server的可用性，轮询选择服务器。</p><p>其他规则：</p><p>BestAvailableRule（最低并发策略）：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。逐个找服务，如果断路器打开，则忽略。</p><p>RoundRobinRule（轮询策略）：以简单轮询选择一个服务器。按顺序循环选择一个server。</p><p>RandomRule（随机策略）：随机选择一个服务器。</p><p>AvailabilityFilteringRule（可用过滤策略）：会先过滤掉多次访问故障而处于断路器跳闸状态的服务和过滤并发的连接数量超过阀值得服务，然后对剩余的服务列表安装轮询策略进行访问。</p><p>WeightedResponseTimeRule（响应时间加权策略）：据平均响应时间计算所有的服务的权重，响应时间越快服务权重越大，容易被选中的概率就越高。刚启动时，如果统计信息不中，则使用RoundRobinRule(轮询)策略，等统计的信息足够了会自动的切换到WeightedResponseTimeRule。响应时间长，权重低，被选择的概率低。反之，同样道理。此策略综合了各种因素（网络，磁盘，IO等），这些因素直接影响响应时间。</p><p>RetryRule（重试策略）：先按照RoundRobinRule(轮询)的策略获取服务，如果获取的服务失败则在指定的时间会进行重试，进行获取可用的服务。如多次获取某个服务失败，就不会再次获取该服务。主要是在一个时间段内，如果选择一个服务不成功，就继续找可用的服务，直到超时。</p><h3 id="切换负载均衡策略" tabindex="-1"><a class="header-anchor" href="#切换负载均衡策略" aria-hidden="true">#</a> 切换负载均衡策略</h3><h4 id="注解方式" tabindex="-1"><a class="header-anchor" href="#注解方式" aria-hidden="true">#</a> 注解方式</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>@Bean
	public IRule myRule(){
		//return new RoundRobinRule();
		//return new RandomRule();
		return new RetryRule(); 
</code></pre></div><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h4><p>针对服务定ribbon策略：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">provider.ribbon.NFLoadBalancerRuleClassName</span><span class="token operator">=</span>com.netflix.loadbalancer.RandomRule

</code></pre></div><p>给所有服务定ribbon策略：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ribbon.NFLoadBalancerRuleClassName</span><span class="token operator">=</span>com.netflix.loadbalancer.RandomRule
</code></pre></div><p>属性配置方式优先级高于Java代码。</p><h3 id="ribbon脱离eureka" tabindex="-1"><a class="header-anchor" href="#ribbon脱离eureka" aria-hidden="true">#</a> Ribbon脱离Eureka</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">ribbon.eureka.enabled</span><span class="token operator">=</span>false
<span class="token assign-left variable">ribbon.listOfServers</span><span class="token operator">=</span>localhost:80,localhost:81

</code></pre></div><p>为service-sms设置 请求的网络地址列表。</p><p>Ribbon可以和服务注册中心Eureka一起工作，从服务注册中心获取服务端的地址信息，也可以在配置文件中使用listOfServers字段来设置服务端地址。</p><h2 id="使用resttemplate-发起远程服务调用" tabindex="-1"><a class="header-anchor" href="#使用resttemplate-发起远程服务调用" aria-hidden="true">#</a> 使用resttemplate 发起远程服务调用</h2>`,54),t=[i];function p(o,l){return e(),n("div",null,t)}const d=a(r,[["render",p],["__file","sp_ribbon.html.vue"]]);export{d as default};
