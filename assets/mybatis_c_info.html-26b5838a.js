import{_ as a,p as n,q as s,a1 as t}from"./framework-d81ad7e5.js";const e={},c=t(`<blockquote><p>如果在 xml 文件中出现 <code>“&lt;” , “&gt;”</code> ,双引号 等特殊字符时可以使用 XML 文件转义标签(XML 自身的)</p></blockquote><p><code>&lt;![CDATA[ 内容 ]]&gt;</code></p><h2 id="多参数实现办法" tabindex="-1"><a class="header-anchor" href="#多参数实现办法" aria-hidden="true">#</a> 多参数实现办法</h2><ul><li><p>在接口中声明方法 <code>List&lt;Log&gt; selByAccInAccout(String accin,String accout);</code></p></li><li><p>在 mapper.xml 中添加</p><ul><li>#{}中使用 0,1,2 或 param1,param2</li></ul></li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selByAccInAccout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>log<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
select * from log where accin=#{0} and accout=#{1}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="可以使用注解方式" tabindex="-1"><a class="header-anchor" href="#可以使用注解方式" aria-hidden="true">#</a> 可以使用注解方式</h2><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* mybatis 把参数转换为 map 了,其中@Param(&quot;key&quot;) 参数内
容就是 map 的 value
* <span class="token keyword">@param</span> <span class="token parameter">accin123</span>
* <span class="token keyword">@param</span> <span class="token parameter">accout3454235</span>
* <span class="token keyword">@return</span>
*/</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Log</span><span class="token punctuation">&gt;</span></span> <span class="token function">selByAccInAccout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;accin&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span>
accin123<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;accout&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> accout3454235<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="mapper-xml" tabindex="-1"><a class="header-anchor" href="#mapper-xml" aria-hidden="true">#</a> mapper.xml</h3><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 当多参数时,不需要写 parameterType 
 #{} 里面写@Param(“内容”)参数中内容
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selByAccInAccout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>log<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
select * from log where accin=#{accin} and
accout=#{accout}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li><p>应用程序和数据库交互的过程是一个相对比较耗时的过程</p></li><li><p>缓存存在的意义:让应用程序减少对数据库的访问,提升程序运行效率</p></li><li><p>MyBatis 中默认 SqlSession 缓存开启 3.1 同一个 SqlSession 对象调用同一个 select 时,只有第一次访问 数据库,第一次之后把查询结果缓存到 SqlSession 缓存区(内存)中 3.2 缓存的是 statement 对象.(简单记忆必须是用一个 select ) 3.2.1 在 myabtis 时一个 select 对应一个 statement 对象 3.3 有效范围必须是同一个 SqlSession 对象</p></li><li><p>缓存流程 4.1 步骤一: 先去缓存区中找是否存在 statement 4.2 步骤二:返回结果 4.3 步骤三:如果没有缓存 statement 对象,去数据库获取数据 4.4 步骤四:数据库返回查询结果 4.5 步骤五:把查询结果放到对应的缓存区中</p></li><li><p>SqlSessionFactory 缓存 5.1 又叫:二级缓存 5.2 有效范围:同一个 factory 内哪个 SqlSession 都可以获取 5.3 什么时候使用二级缓存: 5.3.1 当数据频繁被使用,很少被修改 5.4 使用二级缓存步骤 5.4.1 在 mapper.xml 中添加 5.4.2 如果不写 readOnly=”true”需要把实体类序列化 <code>&lt;cache readOnly=&quot;true&quot;&gt;&lt;/cache&gt;</code> 5.5 当 SqlSession 对象 close()时或 commit()时会把 SqlSession 缓存 的数据刷(flush)到 SqlSessionFactory 缓存区中</p></li></ol></div>`,11),p=[c];function o(l,u){return n(),s("div",null,p)}const r=a(e,[["render",o],["__file","mybatis_c_info.html.vue"]]);export{r as default};
