import{_ as e,p as o,q as c,a1 as t}from"./framework-d81ad7e5.js";const a={},l=t("<ul><li><strong>关于与(&amp;&amp;:并且)、或(||:或者)</strong></li></ul><p><code>“||”</code>(短路或): 如果左边计算后的操作数为true,右边则不再执行，返回true；</p><p><code>“|”</code>：(逻辑或)前后两个操作数都会进行计算。也就是说：<code>“|”</code>不存在短路。</p><ul><li><code>&amp;&amp;(短路与)</code>，当第一个判断条件不满足要求时（返回false），第二个判断条件就不会执行；只有当两个判断条件都返回true时，整个逻辑运算才返回true。</li><li><code>&amp;(逻辑与)</code>，不论什么情况下，两边的判断条件都会执行，当两边都返回true时，按位与才返回true。</li></ul><ul><li>最直观解释就是<code>||和&amp;&amp;</code>左边有一个不通过就不去执行右边了，没必要浪费时间。而<code>|和&amp;</code>不管左边有没有通过，都要磨磨唧唧两边都要先执行一遍，效率低</li></ul><ul><li><p><code>||、&amp;&amp;</code>会先进行左边判断通过与否，再进行右边判断，再执行有没有通过</p></li><li><p><code>|、&amp;：</code>就是先两边都执行，再去同时判断有没有通过。相当于||的一个逆向思路</p></li></ul><p>开发中一般使用 <strong>&amp;&amp;和||比较好一点</strong>，因为效率高</p>",7),p=[l];function d(r,m){return o(),c("div",null,p)}const i=e(a,[["render",d],["__file","java_computed.html.vue"]]);export{i as default};
