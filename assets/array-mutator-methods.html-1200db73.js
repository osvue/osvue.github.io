import{_ as t,M as o,p as e,q as c,R as a,t as n,N as u,a1 as s}from"./framework-d81ad7e5.js";const l={},i=s(`<h2 id="array-prototype-copywithin" tabindex="-1"><a class="header-anchor" href="#array-prototype-copywithin" aria-hidden="true">#</a> Array.prototype.copyWithin</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.copyWithin(target[, start[, end]])</p></div><p>参数：</p><ul><li>target：索引（复制序列到该位置）。如果是负数，则从末尾开始，若大于等于 <code>arr.length</code>，则不发生拷贝；</li><li>start：索引（开始复制元素的起始位置），负数同上，默认为 0；</li><li>end：索引（开始复制元素的结束位置），负数同上，默认为 <code>arr.length</code>。</li></ul><p>返回值：</p><p>改变后的数组。</p><h3 id="_2-描述" tabindex="-1"><a class="header-anchor" href="#_2-描述" aria-hidden="true">#</a> 2. 描述</h3><p><code>copyWithin()</code> 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</p><p>参数 <code>target</code>、<code>start</code>、<code>end</code> 必须为整数。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// target</span>
numbers<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 1, 2, 3]</span>
numbers<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [1, 2, 1, 2, 1]</span>
<span class="token comment">// target、start</span>
numbers<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [2, 1, 1, 2, 1]</span>
numbers<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [2, 1, 2, 1, 1]</span>
<span class="token comment">// target、start、end</span>
numbers<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//   [2, 1, 2, 1, 2]</span>

<span class="token comment">// 类数组</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {0: 1, 3: 1, length: 5}</span>

<span class="token keyword">let</span> i32a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
i32a<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Int32Array [3, 4, 5, 4, 5]</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Int32Array [4, 2, 3, 4, 5]</span>
</code></pre></div><h2 id="array-prototype-fill" tabindex="-1"><a class="header-anchor" href="#array-prototype-fill" aria-hidden="true">#</a> Array.prototype.fill</h2><h3 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.fill(value[, start[, end]])</p></div><p>参数：</p><ul><li>value：用来填充数组元素的值；</li><li>start：起始索引，默认 0；</li><li>end：终止索引，默认 <code>this.length</code>。</li></ul><p>返回值：</p><p>修改后的数组。</p><h3 id="_2-描述-1" tabindex="-1"><a class="header-anchor" href="#_2-描述-1" aria-hidden="true">#</a> 2. 描述</h3><p><code>fill</code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，但不包括终止索引。</p><p><code>fill</code> 方法故意被设计为通用方法，该方法不要求 <code>this</code> 是数组对象。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>常用于快速填充数组。</li></ul></blockquote><h3 id="_3-示例-1" tabindex="-1"><a class="header-anchor" href="#_3-示例-1" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>base examples</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// [4, 4, 4]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// [1, 4, 4]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 4, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [4, 2, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// [1, 2, 3]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3]</span>
<span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// [4, 4, 4]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// {0: 4, 1: 4, 2: 4, length: 3}</span>

<span class="token comment">// Objects by reference.</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [{}, {}, {}];</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hi <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span> <span class="token comment">// [{ hi: &quot;hi&quot; }, { hi: &quot;hi&quot; }, { hi: &quot;hi&quot; }]</span>
</code></pre></div></li><li><p>generate a two-dimensional array</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[], [], [], [], [], [], [], [], [], []];</span>
</code></pre></div></li></ul><h2 id="array-prototype-pop" tabindex="-1"><a class="header-anchor" href="#array-prototype-pop" aria-hidden="true">#</a> Array.prototype.pop</h2><h3 id="_1-语法-2" tabindex="-1"><a class="header-anchor" href="#_1-语法-2" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.pop()</p></div><p>返回值：</p><p>从数组中删除的元素，当数组为空时返回 undefined。</p><h3 id="_2-描述-2" tabindex="-1"><a class="header-anchor" href="#_2-描述-2" aria-hidden="true">#</a> 2. 描述</h3><p>pop() 方法从数组中删除最后一个元素，并返回该元素的值，此方法更改数组的长度。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>需要从尾端删除数据时。</li></ul></blockquote><h3 id="_3-示例-2" tabindex="-1"><a class="header-anchor" href="#_3-示例-2" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>removing the last element of an array</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myFish <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> popped <span class="token operator">=</span> myFish<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39; ]  &#39;sturgeon&#39;</span>
</code></pre></div></li><li><p>using apply() or call() on array-like objects</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myFish <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span><span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span><span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> popped <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>myFish<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {0:&#39;angel&#39;, 1:&#39;clown&#39;, 2:&#39;mandarin&#39;, length: 3}  &#39;sturgeon&#39;</span>
</code></pre></div></li></ul><h2 id="array-prototype-push" tabindex="-1"><a class="header-anchor" href="#array-prototype-push" aria-hidden="true">#</a> Array.prototype.push</h2><h3 id="_1-语法-3" tabindex="-1"><a class="header-anchor" href="#_1-语法-3" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.push(element1, ..., elementN)</p></div><p>参数：</p><ul><li>elementN：被添加到数组末尾的元素。</li></ul><p>返回值：</p><p>返回新的 length 属性值。</p><h3 id="_2-描述-3" tabindex="-1"><a class="header-anchor" href="#_2-描述-3" aria-hidden="true">#</a> 2. 描述</h3><p>push() 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>需要追加数据时。</li></ul></blockquote><h3 id="_3-示例-3" tabindex="-1"><a class="header-anchor" href="#_3-示例-3" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>adding elements to an array</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;soccer&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baseball&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> total <span class="token operator">=</span> sports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;football&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;swimming&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;soccer&#39;, &#39;baseball&#39;, &#39;football&#39;, &#39;swimming&#39;] 4</span>
</code></pre></div></li><li><p>merging two arrays</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vegetables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;parsnip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;potato&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> moreVegs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;celery&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;beetroot&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>vegetables<span class="token punctuation">,</span> moreVegs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;parsnip&#39;, &#39;potato&#39;, &#39;celery&#39;, &#39;beetroot&#39;]</span>
</code></pre></div></li><li><p>using an object in an array-like fashion</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>
  
  <span class="token function-variable function">addElem</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">.</span><span class="token function">addElem</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">addElem</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ul><h2 id="array-prototype-reverse" tabindex="-1"><a class="header-anchor" href="#array-prototype-reverse" aria-hidden="true">#</a> Array.prototype.reverse</h2><h3 id="_1-语法-4" tabindex="-1"><a class="header-anchor" href="#_1-语法-4" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.reverse()</p></div><p>返回值：</p><p>改变（颠倒）后的数组。</p><h3 id="_2-描述-4" tabindex="-1"><a class="header-anchor" href="#_2-描述-4" aria-hidden="true">#</a> 2. 描述</h3><p>reverse() 方法将数组中元素的位置颠倒，并返回该数组。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>颠倒数组。</li></ul></blockquote><h3 id="_3-示例-4" tabindex="-1"><a class="header-anchor" href="#_3-示例-4" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>reversing the elements in an array-like object</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {0: 3, 1: 2, 2: 1, length: 3}</span>
</code></pre></div></li></ul><h2 id="array-prototype-shift" tabindex="-1"><a class="header-anchor" href="#array-prototype-shift" aria-hidden="true">#</a> Array.prototype.shift</h2><h3 id="_1-语法-5" tabindex="-1"><a class="header-anchor" href="#_1-语法-5" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.shift()</p></div><p>返回值：</p><p>从数组中删除的元素，如果数组为空则返回 undefined。</p><h3 id="_2-描述-5" tabindex="-1"><a class="header-anchor" href="#_2-描述-5" aria-hidden="true">#</a> 2. 描述</h3><p>shift 方法移除索引为 0 的元素（即第一个元素），并返回被移除的元素，其他元素的索引值随之减 1（push、pop 操作不会影响其余元素，所以性能更高）。</p><p>shift 方法并不限于数组，可以通过 call、apply 方法作用于类数组的对象上。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>需要删除前一部分时。</li></ul></blockquote><h3 id="_3-示例-5" tabindex="-1"><a class="header-anchor" href="#_3-示例-5" aria-hidden="true">#</a> 3. 示例</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fish <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;surgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fish<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;angel&quot;</span>
</code></pre></div><h2 id="array-prototype-sort" tabindex="-1"><a class="header-anchor" href="#array-prototype-sort" aria-hidden="true">#</a> Array.prototype.sort</h2><h3 id="_1-语法-6" tabindex="-1"><a class="header-anchor" href="#_1-语法-6" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.sort([compareFunction])</p></div><p>参数：</p><ul><li>compareFunction：用来指定按某种顺序进行排列的函数。 <ul><li>firstEl：第一个用于比较的元素；</li><li>secondEl：第二个用于比较的元素。</li></ul></li></ul><p>返回值：</p><p>排序后的数组。</p><h3 id="_2-描述-6" tabindex="-1"><a class="header-anchor" href="#_2-描述-6" aria-hidden="true">#</a> 2. 描述</h3>`,77),r={href:"https://en.wikipedia.org/wiki/In-place_algorithm",target:"_blank",rel:"noopener noreferrer"},k=s(`<blockquote><p>个人在日常开发中常用场景：</p><ul><li>排序。</li></ul></blockquote><h3 id="_3-示例-6" tabindex="-1"><a class="header-anchor" href="#_3-示例-6" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>sorting non-ASCII characters</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;réservé&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;premier&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cliché&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;communiqué&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;café&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;adieu&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
items<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;adieu&#39;, &#39;café&#39;, &#39;cliché&#39;, &#39;communiqué&#39;, &#39;premier&#39;, &#39;réservé&#39;]</span>
</code></pre></div></li><li><p>sorting with map</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Delta&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;alpha&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CHARLIE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bravo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mapped <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">index</span><span class="token operator">:</span> i<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> el<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mapped<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>value <span class="token operator">&gt;=</span> b<span class="token punctuation">.</span>value <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mapped<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=&gt;</span> list<span class="token punctuation">[</span>el<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ul><h2 id="array-prototype-splice" tabindex="-1"><a class="header-anchor" href="#array-prototype-splice" aria-hidden="true">#</a> Array.prototype.splice</h2><h3 id="_1-语法-7" tabindex="-1"><a class="header-anchor" href="#_1-语法-7" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.splice(start[, deleteCount[, item1[, item2[, ...]]]])</p></div><p>参数：</p><ul><li>start：指定修改的开始位置（从0计数），如果超出了数组的长度，则从数组末尾开始添加内容；</li><li>deleteCount：整数，表示要移除的数组元素的个数；</li><li>item1, item2, ...：要添加进数组的元素。</li></ul><p>返回值：</p><p>由被删除的元素组成的一个数组，若没有删除元素，则返回空数组。</p><h3 id="_2-描述-7" tabindex="-1"><a class="header-anchor" href="#_2-描述-7" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>增删改数组中的元素。</li></ul></blockquote><h3 id="_3-示例-7" tabindex="-1"><a class="header-anchor" href="#_3-示例-7" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>remove 0(zero) elements from index 2, and insert &quot;drum&quot; and &quot;guitar&quot;</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fish <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fish<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;drum&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;guitar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>remove 1 element from index 3</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fish <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fish<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>remove 1 element from index 2, and insert &quot;trumpet&quot;</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fish <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fish<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;trumpet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>remove 2 elements from index 0, and insert &quot;parrot&quot;, &quot;anemone&quot; and &quot;blue&quot;</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fish <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fish<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;parrot&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;anemone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>remove 1 element from index-2</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fish <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fish<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li><li><p>remove all elements after index 2</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fish <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">&#39;angel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sturgeon&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
fish<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li></ul><h2 id="array-prototype-unshift" tabindex="-1"><a class="header-anchor" href="#array-prototype-unshift" aria-hidden="true">#</a> Array.prototype.unshift</h2><h3 id="_1-语法-8" tabindex="-1"><a class="header-anchor" href="#_1-语法-8" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>arr.unshift(element1, ..., elementN)</p></div><p>参数：</p><ul><li>elementN：要添加到数组开头的元素或多个元素。</li></ul><p>返回值：</p><p>返回其 length 属性值。</p><h3 id="_2-描述-8" tabindex="-1"><a class="header-anchor" href="#_2-描述-8" aria-hidden="true">#</a> 2. 描述</h3><p>unshift 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>常用于在数组前添加数据。</li></ul></blockquote><h3 id="_3-示例-8" tabindex="-1"><a class="header-anchor" href="#_3-示例-8" aria-hidden="true">#</a> 3. 示例</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token comment">// arr [[-4, -3], 0, 1, 2]</span>
</code></pre></div><h2 id="数组的删除方法" tabindex="-1"><a class="header-anchor" href="#数组的删除方法" aria-hidden="true">#</a> 数组的删除方法</h2><h3 id="foreach-filter-通过迭代循环-删除元素" tabindex="-1"><a class="header-anchor" href="#foreach-filter-通过迭代循环-删除元素" aria-hidden="true">#</a> forEach || filter (通过迭代循环,删除元素)</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr&#39;</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> item <span class="token operator">!==</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr&#39;</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="splice-可以对arr进行增删改操作-这里只写删除方法" tabindex="-1"><a class="header-anchor" href="#splice-可以对arr进行增删改操作-这里只写删除方法" aria-hidden="true">#</a> splice(可以对Arr进行增删改操作, 这里只写删除方法)</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一位参数 0: 代表的是起始下标注</span>
<span class="token comment">// 第二位参数 2: 代表的是删除的位数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr&#39;</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,32);function d(m,h){const p=o("ExternalLinkIcon");return e(),c("div",null,[i,a("p",null,[n("sort 方法用"),a("a",r,[n("原地算法"),u(p)]),n("对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的。")]),k])}const b=t(l,[["render",d],["__file","array-mutator-methods.html.vue"]]);export{b as default};
