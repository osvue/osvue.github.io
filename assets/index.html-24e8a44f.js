import{_ as o,M as p,p as c,q as r,R as a,t as n,N as e,a1 as s}from"./framework-d81ad7e5.js";const l={},d=s(`<h2 id="layer-是什么" tabindex="-1"><a class="header-anchor" href="#layer-是什么" aria-hidden="true">#</a> Layer 是什么</h2><ol><li>图层就像是含有文字或图形等元素的图片，一张张按顺序叠放在一起，组合起来形成页面的最终效果。<code>Layer</code>就是创建这一张张图的函数。</li><li><code>Layer</code>是派生所有图层类型的基类。定义了诸多不同图层类型共用的特征和方法。</li><li>要使用<code>Layer</code>需要先从 <code>source</code> 接收到的数据，然后添加到 <code>map</code> 中。</li></ol><p>常用参数</p><ul><li><code>className</code> 设置图层元素的 CSS类名称。</li><li><code>extent</code> 图层渲染的边界范围。</li><li><code>zIndex</code> 图层渲染的 <code>z-index</code>。在渲染时，图层将被排序，首先是 Z-index，然后是位置。</li><li><code>source</code> 该层的数据来源。</li><li><code>map</code> 地图实例。</li><li><code>render</code> 将覆盖图层的默认渲染。</li></ul><h2 id="常用监听事件" tabindex="-1"><a class="header-anchor" href="#常用监听事件" aria-hidden="true">#</a> 常用监听事件</h2><ul><li><code>prerender</code> 图层开始渲染之前。</li><li><code>postrender</code> 渲染完成之时。</li><li><code>error</code> 发生任何错误。</li><li><code>change</code> 图层发生修改。</li></ul><h2 id="openlayers中的图层类型" tabindex="-1"><a class="header-anchor" href="#openlayers中的图层类型" aria-hidden="true">#</a> OpenLayers中的图层类型</h2><ul><li><code>Graticule</code>，地图上覆盖的网格标尺图层。</li><li><code>HeatMap</code>，热力图。</li><li><code>Vector</code>，矢量图。</li><li><code>VectorImage</code>，单张的矢量图层。</li><li><code>VectorTile</code>，矢量瓦片图层。</li><li><code>WebGLPoints</code>，WebGL渲染的海量点图层。</li><li><code>Tile</code>，栅格图层。</li></ul><h2 id="使用图层" tabindex="-1"><a class="header-anchor" href="#使用图层" aria-hidden="true">#</a> 使用图层</h2><h3 id="graticule-图层" tabindex="-1"><a class="header-anchor" href="#graticule-图层" aria-hidden="true">#</a> Graticule 图层</h3><ul><li>为坐标系渲染网格的层（目前仅支持 EPSG:4326）。请注意，视图投影必须同时定义范围和世界范围。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> gra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Graticule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">strokeStyle</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;rgba(255,120,0,0.9)&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token literal-property property">lineDash</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">showLabels</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">wrapX</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    map<span class="token punctuation">.</span><span class="token function">addLayer</span><span class="token punctuation">(</span>gra<span class="token punctuation">)</span>
</code></pre></div><p>HeatMap 图层</p><ul><li>用于将矢量数据渲染为热图的层。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Heatmap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://openlayers.org/en/latest/examples/data/kml/2012_Earthquakes_Mag5.kml&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>format<span class="token punctuation">.</span>KML</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">extractStyles</span><span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">blur</span><span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    map<span class="token punctuation">.</span><span class="token function">addLayer</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span>
</code></pre></div><ul><li>通过 <code>blur</code> 控制圆点的边缘，对边缘做模糊化。<code>radius</code> 则规定了圆点的半径。</li></ul><h3 id="vector-图层" tabindex="-1"><a class="header-anchor" href="#vector-图层" aria-hidden="true">#</a> Vector 图层</h3><ul><li>矢量图层是用来渲染矢量数据的图层类型，一般用于绘制区域覆盖层。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://openlayers.org/en/latest/examples/data/geojson/countries.geojson&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>format<span class="token punctuation">.</span>GeoJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    vectorLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">//初始化矢量图层</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> source<span class="token punctuation">,</span>
      <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token comment">//线样式</span>
          <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;#ffcc33&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">2</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    map<span class="token punctuation">.</span><span class="token function">addLayer</span><span class="token punctuation">(</span>vectorLayer<span class="token punctuation">)</span>
</code></pre></div><h3 id="webglpoint-海量点图层" tabindex="-1"><a class="header-anchor" href="#webglpoint-海量点图层" aria-hidden="true">#</a> WebGLPoint 海量点图层</h3><ul><li>当数据量大的时候，我们需要在图层上绘制点。使用<code>WebGLPoint</code>能大量提升性能。</li><li><code>WebGLPoint</code> Layer 是由 WebGL 作为渲染引擎的点图层，众所周知，WebGL在渲染大量数据（&gt;10k）效率明显优于Canvas或SVG，所以对于有大数据量前端渲染需求的，WebGL作为渲染引擎几乎是唯一的选择。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>   <span class="token keyword">const</span> vectorSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://openlayers.org/en/latest/examples/data/geojson/world-cities.geojson&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>format<span class="token punctuation">.</span>GeoJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> pointLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>WebGLPoints</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> vectorSource<span class="token punctuation">,</span>
      <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">symbol</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">symbolType</span><span class="token operator">:</span> <span class="token string">&#39;circle&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;interpolate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;linear&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;population&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2000000</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;#006688&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">rotateWithView</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
          <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;interpolate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;linear&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;population&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">40000</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">2000000</span><span class="token punctuation">,</span> <span class="token number">0.92</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    map<span class="token punctuation">.</span><span class="token function">addLayer</span><span class="token punctuation">(</span>pointLayer<span class="token punctuation">)</span>
</code></pre></div><ul><li>在<code>OpenLayers</code>中图层是一等公民，简单来说就是所有功能都是基于图层实现的。比如海量点功能，第一层加载栅格瓦片图层，然后通过海量点图层绘制图像，然后覆盖到栅格瓦片图层上。</li></ul><h2 id="一、创建地图" tabindex="-1"><a class="header-anchor" href="#一、创建地图" aria-hidden="true">#</a> 一、创建地图</h2><h3 id="_1、地图map" tabindex="-1"><a class="header-anchor" href="#_1、地图map" aria-hidden="true">#</a> 1、地图<code>Map</code></h3><p>创建地图底图：需要用<code>new ol.Map({})</code></p><p>地图<code>map</code>是由图层<code>layers</code>、一个可视化视图<code>view</code>、用于修改地图内容的交互<code>interaction</code>以及使用UI组件的控件<code>control</code>组成的。</p><h4 id="_1-、创建基本地图" tabindex="-1"><a class="header-anchor" href="#_1-、创建基本地图" aria-hidden="true">#</a> （1）、创建基本地图</h4><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;map&#39;</span><span class="token punctuation">,</span><span class="token comment">//对象指向</span>
    <span class="token literal-property property">layers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">//图层</span>
      <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Tile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//这里定义的是平铺图层</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>OSM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//图层源 定义图层映射协议</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">view</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>View</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//视图</span>
      <span class="token literal-property property">center</span><span class="token operator">:</span> ol<span class="token punctuation">.</span>proj<span class="token punctuation">.</span><span class="token function">fromLonLat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">37.41</span><span class="token punctuation">,</span> <span class="token number">8.82</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//地图中心</span>
      <span class="token literal-property property">zoom</span><span class="token operator">:</span> <span class="token number">4</span><span class="token comment">//缩放层级</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="_2-、属性选项" tabindex="-1"><a class="header-anchor" href="#_2-、属性选项" aria-hidden="true">#</a> （2）、属性选项</h4><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;map&#39;</span><span class="token punctuation">,</span><span class="token comment">//对象映射：要将\`map\`对象附加到div，\` map\`对象将\`target\`作为参数，值是\`div\`的\`id\`</span>
    <span class="token literal-property property">layers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">//图层</span>
      <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Tile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//这里定义的是平铺图层</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>OSM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//图层源 定义图层映射协议</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">view</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>View</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//视图</span>
      <span class="token literal-property property">center</span><span class="token operator">:</span> ol<span class="token punctuation">.</span>proj<span class="token punctuation">.</span><span class="token function">fromLonLat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">37.41</span><span class="token punctuation">,</span> <span class="token number">8.82</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//地图中心</span>
      <span class="token literal-property property">zoom</span><span class="token operator">:</span> <span class="token number">4</span><span class="token comment">//缩放层级</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">controls</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token comment">//最初添加到映射中的控件  如未设置 使用默认控件</span>
        <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Control</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">element</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//元素是控件的容器元素(DOM)。只有在开发自定义控件时才需要指定这一点</span>
            <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token punctuation">,</span><span class="token comment">//控件重新呈现时调用的函数</span>
            <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token comment">//如果想在映射的视图端口之外呈现控件，指定目标</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">interactions</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token comment">//最初添加到映射中的交互 如未设置 使用默认交互</span>
        <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>interaction<span class="token punctuation">.</span>Interaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            handleEvent
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">overlays</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Overlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxTilesLoading</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token comment">//同时加载的最大瓷砖数 默认16</span>
    <span class="token literal-property property">loadTilesWhileAnimating</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//</span>
    <span class="token literal-property property">loadTilesWhileInteracting</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//   </span>
    <span class="token literal-property property">moveTolerance</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//光标必须移动的最小距离(以像素为单位)才能被检测为map move事件，而不是单击。增加这个值可以使单击地图变得更容易</span>
    <span class="token literal-property property">pixelRatio</span><span class="token operator">:</span>window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">,</span><span class="token comment">//</span>
    <span class="token literal-property property">keyboardEventTarget</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//要监听键盘事件的元素</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h4 id="_3-、地图事件" tabindex="-1"><a class="header-anchor" href="#_3-、地图事件" aria-hidden="true">#</a> （3）、地图事件</h4><table><thead><tr><th>地图事件</th><th>含义</th></tr></thead><tbody><tr><td><code>click</code></td><td>无拖动单击</td></tr><tr><td><code>dblclick</code></td><td>无拖动双击</td></tr><tr><td><code>moveend</code></td><td>移动地图结束时</td></tr><tr><td><code>movestart</code></td><td>移动地图开始时</td></tr><tr><td><code>pointerdrag</code></td><td>当拖动指针时触发</td></tr><tr><td><code>pointermove</code></td><td>当指针移动时触发。注意，在触摸设备上，这是在地图平移时触发的，因此与<code>mousemove</code>不同</td></tr><tr><td><code>postcompose</code></td><td></td></tr><tr><td><code>postrender</code></td><td>在映射帧呈现后触发</td></tr><tr><td><code>precompose</code></td><td></td></tr><tr><td><code>propertychange</code></td><td>当属性被更改时触发</td></tr><tr><td><code>rendercomplete</code></td><td>渲染完成时触发，即当前视图的所有源和tile都已加载完毕，所有tile都将淡出</td></tr><tr><td><code>singleclick</code></td><td>一个真正的无拖放和无双击的单击。注意，这个事件被延迟了250毫秒，以确保它不是双击</td></tr></tbody></table><h4 id="_4-、地图方法" tabindex="-1"><a class="header-anchor" href="#_4-、地图方法" aria-hidden="true">#</a> （4）、地图方法</h4><table><thead><tr><th>地图方法</th><th>功能</th></tr></thead><tbody><tr><td><code>addControl(control)</code></td><td>将给定的控件添加到地图中</td></tr><tr><td><code>removeControl(control)</code></td><td>从地图中移除已给定的控件</td></tr><tr><td><code>addInteraction(interaction)</code></td><td>将给定的交互添加到地图中</td></tr><tr><td><code>removeInteraction(interaction)</code></td><td>从地图中移除已给定的交互</td></tr><tr><td><code>addLayer(layer)</code></td><td>将给定的图层添加到地图的顶部</td></tr><tr><td><code>removeLayer(layer)</code></td><td>从地图中移除已给定的图层</td></tr><tr><td><code>addOverlay(overlay)</code></td><td>将给定的叠加层添加到地图中</td></tr><tr><td><code>removeOverlay(overlay)</code></td><td>从地图中移除已给定的叠加层</td></tr><tr><td><code>forEachFeatureAtPixel(pixel, callback, opt_options)</code></td><td>检测与视图端口上的像素相交的特性，并对每个相交的特性执行回调。检测中包含的层可以通过<code>opt_options</code>中的<code>layerFilter</code>选项配置</td></tr><tr><td><code>forEachLayerAtPixel(pixel, callback, opt_options)</code></td><td>检测在视图端口上的像素处具有颜色值的层，并对每个匹配的层执行回调。检测中包含的层可以通过<code>opt_layerFilter</code>配置</td></tr><tr><td><code>getControls()</code></td><td>获取地图控件</td></tr><tr><td><code>getCoordinateFromPixel(pixel)</code></td><td>获取给定像素的坐标。这将返回地图视图投影中的坐标。</td></tr><tr><td><code>getEventCoordinate(event)</code></td><td>返回浏览器事件的视图投影中的坐标</td></tr><tr><td><code>getEventPixel(event)</code></td><td>返回浏览器事件相对于视图端口的地图像素位置</td></tr><tr><td><code>getFeaturesAtPixel(pixel, opt_options)</code></td><td>获取视图端口上与像素相交的所有特性</td></tr><tr><td><code>getInteractions()</code></td><td>获取地图交互</td></tr><tr><td><code>getLayerGroup()</code></td><td>获取与此地图关联的图层组</td></tr><tr><td><code>setLayerGroup(layerGroup)</code></td><td>设置与此地图关联的图层组</td></tr><tr><td><code>getLayers()</code></td><td>获取与此地图关联的图层的集合</td></tr><tr><td><code>getOverlayById(id)</code></td><td>通过其标识符获取覆盖(<code>overlay. getId()</code>返回的值)。注意，索引将字符串和数字标识符视为相同的。<code>getoverlaybyid(2)</code>将返回id为2或2的叠加层。</td></tr><tr><td><code>getOverlays()</code></td><td>获得地图叠加</td></tr><tr><td><code>getPixelFromCoordinate(coordinate)</code></td><td>获取坐标的像素。它接受地图视图投影中的坐标并返回相应的像素</td></tr><tr><td><code>getSize()</code></td><td>获取地图尺寸</td></tr><tr><td><code>setSize(size)</code></td><td>s设置地图尺寸</td></tr><tr><td><code>getTarget()</code></td><td>获取呈现此映射的目标。注意，这将返回作为选项或<code>setTarget</code>中输入的内容。如果这是一个元素，它将返回一个元素;如果是字符串，它会返回这个字符串</td></tr><tr><td><code>setTarget(target)</code></td><td>设置要将地图呈现的目标元素</td></tr><tr><td><code>getTargetElement()</code></td><td>获取呈现此映射的<code>DOM</code>元素。与<code>getTarget</code>相反，这个方法总是返回一个元素，如果映射没有目标，则返回<code>null</code></td></tr><tr><td><code>getView()</code></td><td>获取地图视图。视图管理中心和分辨率等属性。</td></tr><tr><td><code>setView(view)</code></td><td>设置地图视图</td></tr><tr><td><code>getViewport()</code></td><td>获取作为<code>map</code>视图端口的元素</td></tr><tr><td><code>hasFeatureAtPixel(pixel, opt_options)</code></td><td>检测在<code>viewport</code>上是否与一个像素相交。可以通过<code>opt_layerFilter</code>配置在检测中包含的层。</td></tr></tbody></table><h3 id="_2、图层layers" tabindex="-1"><a class="header-anchor" href="#_2、图层layers" aria-hidden="true">#</a> 2、图层<code>Layers</code></h3><p>定义图层：地图图层<code>layers:[...]</code>组定义映射中可用的图层组，用来盛放地图上的各种元素，其在地图上的显示顺序是按照数组中元素序列从下到上呈现的，可以直接在创建地图时定义图层，多个图层的时候可以单独定义。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> layer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//这里定义的是图层类型(Image/Title/Vector)</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//矢量图层源  源是用于获取映射块的协议【必须】</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层样式 【必须】</span>
    <span class="token literal-property property">feature</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层元素 【必须】</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>添加指定图层：<code>map.addLayer(layer)</code>；</li><li>移除指定图层：<code>map.removeLayer(layer)</code>；</li></ul><p>图层是轻量级容器，从数据源<code>Source</code>获取数据。</p><p><code>Source</code>d子类分别有，分别对应不同图层类：</p><ul><li><code>ol.source.ImageSource()</code></li><li><code>ol.source.TileSource()</code></li><li><code>ol.source.VectorSource()</code></li></ul><p><code>Source</code>主要有以下属性选项：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>VectorSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">attributions</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//</span>
    <span class="token literal-property property">attributionsCollapsible</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//布尔值  默认为true </span>
    <span class="token literal-property property">projection</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//投影系</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span><span class="token comment">//默认为&#39;ready&#39;</span>
    <span class="token literal-property property">wrapX</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><code>ol.layer.Tile()</code>和<code>ol.layer.Image()</code>图层类都具有相同的属性如下：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Tile</span><span class="token operator">/</span><span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span>
    <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//透明度 区间范围为(0, 1) 默认为1</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//显示属性 布尔值 默认为true</span>
    <span class="token literal-property property">extent</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span>
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span>
    <span class="token literal-property property">minResolution</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最小分辨率(包括在内)</span>
    <span class="token literal-property property">maxResolution</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最大分辨率（包括在内）</span>
    <span class="token literal-property property">repload</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//预加载。将低分辨率瓦片加载到预加载级别。0表示没有预加载 默认为0</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>TileSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">ImageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//图层源</span>
    <span class="token literal-property property">map</span><span class="token operator">:</span>  <span class="token punctuation">,</span><span class="token comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h4 id="_1-ol-layer-tile" tabindex="-1"><a class="header-anchor" href="#_1-ol-layer-tile" aria-hidden="true">#</a> (1)<code>ol.layer.Tile()</code></h4><p>平铺图层。</p><p>对于提供预呈现、平铺的网格图像的层源，这些网格按特定分辨率的缩放级别组织。</p><h4 id="_2-ol-layer-image" tabindex="-1"><a class="header-anchor" href="#_2-ol-layer-image" aria-hidden="true">#</a> (2)<code>ol.layer.Image()</code></h4><p>图像图层。</p><p>服务器呈现的映像，可用于任意范围和分辨率。</p><h4 id="_3-ol-layer-vector" tabindex="-1"><a class="header-anchor" href="#_3-ol-layer-vector" aria-hidden="true">#</a> (3)<code>ol.layer.Vector()</code></h4><p>矢量图层。</p><p>在客户端呈现矢量数据，其属性具备<code>getter</code>和<code>setter</code></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span>
    <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//透明度 区间范围为(0, 1) 默认为1</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//显示属性 布尔值 默认为true</span>
    <span class="token literal-property property">extent</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span>
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span>
    <span class="token literal-property property">minResolution</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最小分辨率(包括在内)</span>
    <span class="token literal-property property">maxResolution</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最大分辨率（包括在内）</span>
    <span class="token literal-property property">renderOrder</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//呈现顺序。函数用于在呈现前对特性进行排序。默认情况下，特性是按照创建它们的顺序绘制的。使用null来避免排序，但是得到一个未定义的绘制顺序</span>
    <span class="token literal-property property">renderBuffer</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//默认为100 缓冲区</span>
    <span class="token literal-property property">renderMode</span><span class="token operator">:</span><span class="token string">&#39;vector&#39;</span><span class="token punctuation">,</span><span class="token comment">//默认为&#39;vector&#39; 矢量图层的渲染模式</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>VectorSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//图层源</span>
    <span class="token literal-property property">map</span><span class="token operator">:</span>  <span class="token punctuation">,</span><span class="token comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用</span>
    <span class="token literal-property property">declutter</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false 整理图片和文字。清理应用于所有图像和文本样式，优先级由样式的z-index定义。z-index指数越低，优先级越高</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//图层样式</span>
    <span class="token literal-property property">updateWhileAnimating</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false </span>
    <span class="token literal-property property">updateWhileInteracting</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>其中渲染模式有两种：</p><ul><li><code>&#39;image&#39;</code>：矢量图层被渲染为图像。性能很好，但是点符号和文本总是随着视图旋转，像素在缩放动画中缩放</li><li><code>&#39;vector&#39;</code>：矢量图层被呈现为向量。即使在动画期间也有最准确的渲染，但性能较慢</li></ul><h5 id="_1-feature" tabindex="-1"><a class="header-anchor" href="#_1-feature" aria-hidden="true">#</a> 1)<code>Feature</code></h5><p>用于地理特征的矢量元素，具有几何<code>geometry()</code>和其他属性，类似于矢量文件格式(如<code>GeoJSON</code>)中的特性。</p><ul><li>添加矢量元素：通过<code>vectorsource().addFeature(feature)</code>添加到矢量图层上。</li><li>移除图层所有的矢量元素：<code>vectorsource().clear()</code></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> feature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Feature</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">geometry</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Polygon</span><span class="token punctuation">(</span>polyCoords<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">labelPoint</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span>labelCoords<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;My Polygon&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><p>定义矢量元素：<code>new ol.Feature()</code>，；</p></li><li><p>矢量元素样式：</p><ul><li>设置样式：<code>new ol.style.Style()</code>，也可以使用<code>feature.setStyle(style)</code>，未定义的话，可以使用它的盛放容器<code>layer</code>的样式；</li><li>获取样式：<code>feature.getStyle()</code></li></ul></li><li><p>一个<code>feature</code>只有一个默认几何属性<code>geometry</code>，可以有任意数量的命名几何图形：</p><ul><li>获取默认几何属性：<code>feature.getGeometry()</code>；</li><li>设置几何属性：<code>feature.setGeometry(geometry)</code>；</li><li>设置几何属性名：<code>feature.setGeometryName(name)</code>；</li><li>矢量元素要呈现的几何图形的特征属性、几何图形或函数由<code>geometry</code>属性选项设定，主要有以下几种子类模块： <ul><li><code>ol.geom.Circle()</code>：圆形</li><li><code>ol.geom.Geometry()</code>：几何图形</li><li><code>ol.geom.GeometryCollection()</code>：</li><li><code>ol.geom.LinearRing()</code>：环线</li><li><code>ol.geom.LineString()</code>：线段</li><li><code>ol.geom.Point()</code>：点</li><li><code>ol.geom.Polygon()</code>：多边形</li><li><code>ol.geom.MultiLineString()</code></li><li><code>ol.geom.MultiPoint()</code></li><li><code>ol.geom.MultiPolygon()</code></li><li><code>ol.geom.SimpleGeometry()</code></li></ul></li></ul></li><li><p><code>feature</code>的稳定标识符<code>ID</code>：</p><ul><li>设置<code>feature</code>的<code>id</code>：<code>feature.setId(id)</code>，当<code>id</code>可能相同时，可以这样加以区分</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>feature<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">&quot;featureName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>获取<code>feature</code>的<code>id</code>：<code>vector.getSource().getFeatureById()</code>或者<code>vectorsource().getFeatureById()</code></li></ul></li><li><p><code>feature</code>的<code>set(key, value, opt_silent)</code>：</p><ul><li>设置<code>key</code>：<code>feature.set(&quot;keyName&quot;,name)</code>，<code>keyName</code>是字符串，自己根据情况设置</li><li>获取<code>key</code>：之前设置的什么，就获取什么，<code>feature.get(&quot;keyName&quot;)</code>，会得到设置的值</li></ul></li></ul><h5 id="_2-style" tabindex="-1"><a class="header-anchor" href="#_2-style" aria-hidden="true">#</a> 2)<code>Style</code></h5><p>矢量特征呈现样式的容器。在重新呈现使用样式的特性或图层之前，通过<code>set*()</code>方法对样式及其子元素所做的任何更改都不会生效。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">geometry</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>LineString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//有以上ol.geom模块的几何图形可以参考</span>
    <span class="token literal-property property">fill</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//填充样式</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span>color<span class="token comment">//颜色、渐变或图案</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
    <span class="token literal-property property">image</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Image</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//图像</span>
        <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//数值</span>
        <span class="token literal-property property">rotateWithView</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//布尔值</span>
        <span class="token literal-property property">rotation</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//数值</span>
        <span class="token literal-property property">scale</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>数值
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
    <span class="token literal-property property">image</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Icon</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//可以使用图片资源</span>
        <span class="token literal-property property">anchor</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0.5</span>，<span class="token number">0.5</span><span class="token punctuation">]</span>，<span class="token comment">//锚。默认值是图标中心 默认值是[0.5,0.5]</span>
        <span class="token literal-property property">anchorOrigin</span><span class="token operator">:</span><span class="token string">&#39;top-left&#39;</span><span class="token punctuation">,</span><span class="token comment">//锚的原点:左下角、右下角、左上方或右上方。默认是左上</span>
        <span class="token literal-property property">anchorXUnits</span><span class="token operator">:</span><span class="token string">&#39;fraction&#39;</span><span class="token punctuation">,</span><span class="token comment">//指定锚点x值的单位。&#39;fraction&#39;的值表示x值是图标的&#39;fraction&#39;。&#39;pixels&#39;的值表示像素中的x值,默认为&#39;fraction&#39;</span>
        <span class="token literal-property property">anchorYUnits</span><span class="token operator">:</span><span class="token string">&#39;fraction&#39;</span><span class="token punctuation">,</span><span class="token comment">//指定锚点y值的单位。&#39;fraction&#39;的值表示y值是图标的&#39;fraction&#39;。&#39;pixels&#39;的值表示像素中的y值,默认为&#39;fraction&#39;</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span>color<span class="token punctuation">,</span><span class="token comment">//颜色、渐变或图案</span>
        <span class="token literal-property property">crossOrigin</span><span class="token operator">:</span><span class="token punctuation">,</span>
        <span class="token literal-property property">img</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//图标的图像对象  如果没有提供src选项，则必须已经加载了提供的图像</span>
        <span class="token literal-property property">imgSize</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//</span>
        <span class="token literal-property property">offset</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token comment">//偏移值，默认为[0,0]</span>
        <span class="token literal-property property">offsetOrigin</span><span class="token operator">:</span><span class="token string">&#39;top-left&#39;</span><span class="token punctuation">,</span><span class="token comment">//偏移量的原点，bottom-left, bottom-right, top-left or top-right. 默认是\`top-left\`</span>
        <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//默认是1  （0，1）</span>
        <span class="token literal-property property">scale</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//默认是1</span>
        rotation：<span class="token number">0</span>，<span class="token comment">//以弧度旋转(顺时针方向正旋转) 默认为0</span>
        size：<span class="token punctuation">,</span><span class="token comment">//图标大小(以像素为单位)。可与偏移量一起用于定义要从原点(sprite)图标图像使用的子矩形</span>
        <span class="token literal-property property">src</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//图像URL源</span>
        rotateWithView：<span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否旋转视图中的图标  默认为false            </span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
    <span class="token literal-property property">stroke</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//描绘</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">,</span><span class="token comment">//宽</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span>color<span class="token punctuation">,</span><span class="token comment">//颜色、渐变或图案</span>
        <span class="token literal-property property">lineCap</span><span class="token operator">:</span><span class="token string">&#39;round&#39;</span><span class="token punctuation">,</span><span class="token comment">//线帽风格  butt, round, 或者 square 默认 round</span>
        <span class="token literal-property property">lineJoin</span><span class="token operator">:</span><span class="token string">&#39;round&#39;</span><span class="token punctuation">,</span><span class="token comment">//线连接方式 bevel, round, 或者 miter 默认 round</span>
        lineDash： <span class="token punctuation">[</span><span class="token punctuation">]</span>，<span class="token comment">//线间隔模式 这个变化与分辨率有关 默认为undefined Internet Explorer 10和更低版本不支持</span>
        <span class="token literal-property property">lineDashOffset</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//线段间隔偏移 默认0</span>
        <span class="token literal-property property">miterLimit</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token comment">// 默认10                   </span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        
    <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//文字</span>
        <span class="token literal-property property">font</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//默认是&#39;10px sans-serif&#39;</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本内容</span>
        textAlign：<span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本对齐 &#39;left&#39;, &#39;right&#39;, &#39;center&#39;, &#39;end&#39; &#39;start&#39;.针对于placement: &#39;point&#39;,默认为&#39;center&#39;；针对于placement: &#39;line&#39;，默认是让渲染器选择不超过maxAngle的位置</span>
        <span class="token literal-property property">textBaseline</span><span class="token operator">:</span><span class="token string">&#39;middle&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本基线  &#39;bottom&#39;, &#39;top&#39;, &#39;middle&#39;, &#39;alphabetic&#39;, &#39;hanging&#39;, &#39;ideographic&#39; 默认&#39;middle&#39;</span>
        <span class="token literal-property property">placement</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本布置</span>
        scale：，
        <span class="token literal-property property">padding</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//文本周围的像素填充。数组中值的顺序是[top, right, bottom, left]</span>
        <span class="token literal-property property">fill</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//如果未设置，默认未#333</span>
        <span class="token literal-property property">stroke</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">offsetX</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//水平文本偏移量(以像素为单位)。正值将把文本右移。默认0</span>
        <span class="token literal-property property">offsetY</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//垂直文本偏移量(以像素为单位)。正值会将文本向下移动。默认0</span>
        rotation：<span class="token number">0</span>，<span class="token comment">//默认0</span>
        <span class="token literal-property property">rotateWithView</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">backgroundFill</span><span class="token operator">:</span>  <span class="token punctuation">,</span><span class="token comment">//当placement:“point”时，填充文本背景的样式。默认为无填充 </span>
        <span class="token literal-property property">backgroundStroke</span><span class="token operator">:</span> <span class="token punctuation">,</span><span class="token comment">//当placement:“point”时，描绘文本背景的样式。默认为无描绘</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p><code>ol.geom.Geomtry()</code>是矢量几何对象的抽象基类，通常只用于创建子类，而不是在应用程序中实例化。它的方法如下：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>set(key, value)</code></td><td>设置值。<code>key</code>：关键名字（字符串）；<code>value</code>：值</td></tr><tr><td><code>get(key)</code></td><td>获取值</td></tr><tr><td><code>setProperties(values, opt_silent)</code></td><td>设置键值对的集合。注意，这将更改任何现有属性并添加新属性(它不会删除任何现有属性)。</td></tr><tr><td><code>getProperties()</code></td><td>获取一个包含所有属性名和值的对象</td></tr><tr><td><code>getClosestPoint(point, opt_closestPoint)</code></td><td>将几何图形的最近点作为坐标返回到经过的点</td></tr><tr><td><code>getExtent(opt_extent)</code></td><td>获取几何的范围</td></tr><tr><td><code>getKeys()</code></td><td>获取对象属性名称列表</td></tr><tr><td><code>getRevision()</code></td><td>获取此对象的版本号。每次修改对象时，它的版本号都会增加。</td></tr><tr><td><code>intersectsCoordinate(coordinate)</code></td><td>如果该几何图形包含指定的坐标，则返回<code>true</code>。如果坐标位于几何图形的边界上，则返回<code>false</code></td></tr><tr><td><code>rotate(angle, anchor)</code></td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td><code>scale(sx, opt_sy, opt_anchor)</code></td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor\`：缩放原点(默认为几何范围的中心)</td></tr><tr><td><code>simplify(tolerance)</code></td><td>创建这个几何图形的简化版本</td></tr><tr><td><code>transform(source, destination)</code></td><td>将圆的每个坐标从一个坐标系变换到另一个坐标系。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数。在内部，一个圆目前由两点表示:圆心<code>[cx, cy]</code>和圆心右边的点<code>[cx + r, cy]</code>。这个<code>transform</code>函数只变换这两点。所以得到的几何形状也是一个圆，而这个圆并不等同于通过变换原圆的每一点得到的形状</td></tr><tr><td><code>translate(deltaX, deltaY)</code></td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table>`,68),i=a("code",null,"ol.geom.Geomtry",-1),u={href:"https://link.segmentfault.com/?enc=0pz%2FQEafLvXs7%2FFqsdAQSg%3D%3D.hxowSgHS8vtmDfyvvIVDYII5fsgc%2FLHT8RXCc4AujEZS2zFpnJdFX3rDQnzPOETfYDzlU1%2FMA7%2BLngFi3FXnsnssNuEolMEfDbLbeNc8TUp0xeoroxLUpgqUWUBjRvgB",target:"_blank",rel:"noopener noreferrer"},k=s(`<h6 id="_1-ol-geom-circle" tabindex="-1"><a class="header-anchor" href="#_1-ol-geom-circle" aria-hidden="true">#</a> 1)<code>ol.geom.Circle()</code></h6><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Circle</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">center</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//中心点</span>
    <span class="token literal-property property">radius</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//圆半径</span>
    <span class="token literal-property property">layout</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>布局
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>applyTransform(transformFn)</code></td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td><code>clone()</code></td><td>把几何图形复制一份</td></tr><tr><td><code>getCenter()</code></td><td>返回中心坐标</td></tr><tr><td><code>getFirstCoordinate()</code></td><td>返回几何图形的第一个坐标</td></tr><tr><td><code>getLastCoordinate()</code></td><td>返回几何图形的最后一个坐标</td></tr><tr><td><code>getLayout()</code></td><td>返回几何图形的<code>layout</code></td></tr><tr><td><code>getRadius()</code></td><td>返回圆的半径</td></tr><tr><td><code>getType()</code></td><td>获取这个几何图形的类型</td></tr><tr><td><code>intersectsExtent(extent)</code></td><td>测试几何形状和经过的区域是否相交，返回布尔值</td></tr><tr><td><code>rotate(angle, anchor)</code></td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标。<code>angle</code>：以弧度为单位的旋转角度；<code>anchor</code>：旋转中心</td></tr><tr><td><code>scale(sx, opt_sy, opt_anchor)</code></td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。<code>sx</code>：x方向上的缩放因子；<code>sy</code>：Y轴上的缩放因子；<code>opt_anchor</code>：缩放原点(默认为几何范围的中心)</td></tr><tr><td><code>setCenter(center)</code></td><td>将圆心设置为<code>coordinate</code></td></tr><tr><td><code>setCenterAndRadius(center, radius, opt_layout)</code></td><td>设置圆的中心(<code>coordinate</code>)和半径(<code>number</code>)</td></tr><tr><td><code>setRadius(radius)</code></td><td>设置圆的半径。半径的单位是投影的单位。</td></tr><tr><td><code>transform(source, destination)</code></td><td>将圆的每个坐标从一个坐标系变换到另一个坐标系。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数。在内部，一个圆目前由两点表示:圆心<code>[cx, cy]</code>和圆心右边的点<code>[cx + r, cy]</code>。这个<code>transform</code>函数只变换这两点。所以得到的几何形状也是一个，而这个圆并不等同于通过变换原圆的每一点得到的形状</td></tr><tr><td><code>translate(deltaX, deltaY)</code></td><td>f翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h6 id="_2-ol-geom-linestring-coordinates-opt-layout" tabindex="-1"><a class="header-anchor" href="#_2-ol-geom-linestring-coordinates-opt-layout" aria-hidden="true">#</a> 2)<code>ol.geom.LineString(coordinates, opt_layout)</code></h6><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>LineString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">coordinate</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//坐标。对于内部使用，平面坐标结合opt_layout也可以接受</span>
    <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token comment">//Layout</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>appendCoordinate(coordinate)</code></td><td>将经过的坐标追加到<code>linestring</code>的坐标里</td></tr><tr><td><code>applyTransform(transformFn)</code></td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td><code>clone()</code></td><td>把几何图形复制一份</td></tr><tr><td><code>forEachSegment(callback)</code></td><td>遍历每条线段，调用提供的回调函数。如果回调函数返回一个真值，则函数立即返回该值。否则函数返回<code>false</code></td></tr><tr><td><code>getCoordinateAt(fraction, opt_dest)</code></td><td>沿着线段返回给定部分的坐标。<code>fraction</code>是一个介于0和1之间的数字，其中0是线段的开始，1是线段的末尾</td></tr><tr><td><code>getCoordinates()</code></td><td>返回线段的坐标</td></tr><tr><td><code>setCoordinates(coordinates, opt_layout)</code></td><td>s设置线段的坐标</td></tr><tr><td><code>getFirstCoordinate()</code></td><td>返回几何图形的第一个坐标</td></tr><tr><td><code>getLastCoordinate()</code></td><td>返回几何图形的最后一个坐标</td></tr><tr><td><code>getLayout()</code></td><td>返回几何图形的<code>Layout</code></td></tr><tr><td><code>getLength()</code></td><td>在投影平面上返回线段的长度</td></tr><tr><td><code>getType()</code></td><td>得到这个几何图形的类型</td></tr><tr><td><code>intersectsExtent(extent)</code></td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td><code>rotate(angle, anchor)</code></td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td><code>scale(sx, opt_sy, opt_anchor)</code></td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor\`：缩放原点(默认为几何范围的中心)</td></tr><tr><td><code>translate(deltaX, deltaY)</code></td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h6 id="_3-ol-geom-point-coordinates-opt-layout" tabindex="-1"><a class="header-anchor" href="#_3-ol-geom-point-coordinates-opt-layout" aria-hidden="true">#</a> 3)<code>ol.geom.Point(coordinates, opt_layout)</code></h6><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>applyTransform(transformFn)</code></td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td><code>clone()</code></td><td>把几何图形复制一份</td></tr><tr><td><code>getCoordinates()</code></td><td>返回点的坐标</td></tr><tr><td><code>setCoordinates(coordinates, opt_layout)</code></td><td>设置点的坐标</td></tr><tr><td><code>getFirstCoordinate()</code></td><td>返回几何图形的第一个坐标</td></tr><tr><td><code>getLastCoordinate()</code></td><td>返回几何图形的最后一个坐标</td></tr><tr><td><code>getLayout()</code></td><td>返回几何图形的<code>Layout</code></td></tr><tr><td><code>getType()</code></td><td>得到这个几何图形的类型</td></tr><tr><td><code>intersectsExtent(extent)</code></td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td><code>rotate(angle, anchor)</code></td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td><code>scale(sx, opt_sy, opt_anchor)</code></td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor\`：缩放原点(默认为几何范围的中心)</td></tr><tr><td><code>translate(deltaX, deltaY)</code></td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h6 id="_4-ol-geom-polygon" tabindex="-1"><a class="header-anchor" href="#_4-ol-geom-polygon" aria-hidden="true">#</a> (4)<code>ol.geom.Polygon()</code></h6><p>多边形几何图形。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Polygon</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">coordinates</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//定义多边形的线性环的数组</span>
    <span class="token literal-property property">layout</span><span class="token operator">:</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ends</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//末端（平面坐标内部使用）</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td><code>applyTransform(transformFn)</code></td><td>对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先<code>clone()</code>它，然后在克隆上使用此函数</td></tr><tr><td><code>appendLinearRing(linearRing)</code></td><td>在多边形上追加线性环</td></tr><tr><td><code>clone()</code></td><td>把几何图形复制一份</td></tr><tr><td><code>getCoordinates()</code></td><td>返回点的坐标</td></tr><tr><td><code>setCoordinates(coordinates, opt_layout)</code></td><td>设置点的坐标</td></tr><tr><td><code>getFirstCoordinate()</code></td><td>返回几何图形的第一个坐标</td></tr><tr><td><code>getLastCoordinate()</code></td><td>返回几何图形的最后一个坐标</td></tr><tr><td><code>getInteriorPoint()</code></td><td>返回多边形的内部点</td></tr><tr><td><code>getLinearRing(index)</code></td><td>返回多边形几何的第n个线性环。如果给定索引超出范围，则返回null。外部线性环在索引0处可用，而内部环在索引1及以上处可用</td></tr><tr><td><code>getLinearRings()</code></td><td>返回多边形的线性环</td></tr><tr><td><code>getLinearRingCount()</code></td><td>返回多边形的环数，这包括外部环和任何内部环</td></tr><tr><td><code>getLayout()</code></td><td>返回几何图形的<code>Layout</code></td></tr><tr><td><code>getType()</code></td><td>得到这个几何图形的类型</td></tr><tr><td><code>getArea()</code></td><td>返回投影平面上多边形的面积</td></tr><tr><td><code>intersectsExtent(extent)</code></td><td>测试几何形状和通过的范围是否相交</td></tr><tr><td><code>rotate(angle, anchor)</code></td><td>围绕给定的坐标旋转几何图形。这将修改现有的几何坐标</td></tr><tr><td><code>scale(sx, opt_sy, opt_anchor)</code></td><td>缩放几何图形(可选原点)。这将修改现有的几何坐标。sx<code>：x方向上的缩放因子；</code>sy<code>：Y轴上的缩放因子；</code>opt_anchor\`：缩放原点(默认为几何范围的中心)</td></tr><tr><td><code>translate(deltaX, deltaY)</code></td><td>翻转几何图形。这将修改现有的几何坐标。如果您想要一个新的几何体，那么首先<code>clone()</code>这个几何体</td></tr></tbody></table><h4 id="_4-ol-layer-vectortile" tabindex="-1"><a class="header-anchor" href="#_4-ol-layer-vectortile" aria-hidden="true">#</a> (4)<code>ol.layer.VectorTile()</code></h4><p>矢量平铺图层。</p><p>图层用于客户端呈现矢量平铺数据。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span>
    <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//透明度 区间范围为(0, 1) 默认为1</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//显示属性 布尔值 默认为true</span>
    <span class="token literal-property property">extent</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span>
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span>
    <span class="token literal-property property">minResolution</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最小分辨率(包括在内)</span>
    <span class="token literal-property property">maxResolution</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最大分辨率（包括在内）</span>
    <span class="token literal-property property">renderOrder</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//呈现顺序。函数用于在呈现前对特性进行排序。默认情况下，特性是按照创建它们的顺序绘制的。使用null来避免排序，但是得到一个未定义的绘制顺序</span>
    <span class="token literal-property property">renderBuffer</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//默认为100 缓冲区</span>
    <span class="token literal-property property">renderMode</span><span class="token operator">:</span><span class="token string">&#39;vector&#39;</span><span class="token punctuation">,</span><span class="token comment">//默认为&#39;vector&#39; 矢量图层的渲染模式</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>VectorSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//图层源</span>
    <span class="token literal-property property">map</span><span class="token operator">:</span>  <span class="token punctuation">,</span><span class="token comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用</span>
    <span class="token literal-property property">declutter</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false 整理图片和文字。清理应用于所有图像和文本样式，优先级由样式的z-index定义。z-index指数越低，优先级越高</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//图层样式</span>
    <span class="token literal-property property">updateWhileAnimating</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false </span>
    <span class="token literal-property property">updateWhileInteracting</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false</span>
    <span class="token literal-property property">preload</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//</span>
    <span class="token literal-property property">renderOrder</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//</span>
    <span class="token literal-property property">useInterimTilesOnError</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//错误时使用临时贴片 默认true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="_3、视图view" tabindex="-1"><a class="header-anchor" href="#_3、视图view" aria-hidden="true">#</a> 3、视图<code>view</code></h3><p>设置视图<code>view</code>由三种状态决定：<code>center</code>中心、<code>resolution</code>分辨率、<code>rotation</code>旋转，每个状态都有相应的<code>getter</code>和<code>setter</code>。</p><p>可以在视图里定义地图中心点、层级、分辨率、旋转以及地图投影等。</p><p>视图对象受到约束，主要有分辨率约束、旋转约束、中心约束。</p><p><strong>分辨率约束</strong>切换到特定分辨率时，特定分辨率主要由以下选项决定：<code>resolutions</code>、<code>maxResolution</code>、<code>maxZoom</code>、<code>zoomFactor</code>。如果已经设置<code>resolutions</code>，其他选项就可忽略。</p><p><strong>旋转约束</strong>会切换到特定的角度。它由以下选项决定:<code>enableRotation</code>和<code>constrainRotation</code>。在默认情况下，当接近水平线时，旋转值会突然变为零。</p><p><strong>中心约束</strong>由范围选项决定。默认情况下，中心完全不受约束。</p><h4 id="_1-视图选项" tabindex="-1"><a class="header-anchor" href="#_1-视图选项" aria-hidden="true">#</a> (1)视图选项</h4><h5 id="_1-中心点center" tabindex="-1"><a class="header-anchor" href="#_1-中心点center" aria-hidden="true">#</a> 1)中心点<code>center</code></h5><p>视图的初始中心，中心的坐标系由投影<code>projection</code>指定，如果未设置此参数，则不会获取层源，但是之后可以使用<code>#setCenter</code>设置中心。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> center <span class="token operator">=</span> ol<span class="token punctuation">.</span>proj<span class="token punctuation">.</span><span class="token function">fromLonLat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未限制地图范围时</span>
<span class="token keyword">let</span> center <span class="token operator">=</span> ol<span class="token punctuation">.</span>proj<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">[</span>minX<span class="token punctuation">,</span> minY<span class="token punctuation">,</span> maxX<span class="token punctuation">,</span> maxY<span class="token punctuation">]</span>，<span class="token string">&#39;EPSG:4326&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EPSG:3857&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//限制地图显示范围时设置中心点  X代表经度， Y代表纬度</span>
</code></pre></div><p><code>ol.proj.transform([], &quot;EPSG:&quot;, &quot;EPSG:&quot;)</code>是经纬度投影转换</p><ul><li>获取中心：<code>map.getView().getCenter()</code></li><li>设置中心：<code>map.getView().setCenter(center)</code></li></ul><h5 id="_2-投影projection" tabindex="-1"><a class="header-anchor" href="#_2-投影projection" aria-hidden="true">#</a> 2)投影<code>projection</code></h5><p>视图拥有<code>projection</code>投影，投影决定了中心的坐标系，其单位决定了分辨率的单位(每个像素的投影单位)。默认投影为球面墨卡托(<code>EPSG:3857</code>)。</p><ul><li>获取投影：<code>map.getView().getProjection()</code></li><li>设置投影：<code>map.getView().setProjection()</code></li></ul><h5 id="_3-分辨率resolution" tabindex="-1"><a class="header-anchor" href="#_3-分辨率resolution" aria-hidden="true">#</a> 3)分辨率<code>resolution</code></h5><p>视图的初始分辨率，单位是每像素的投影单位(例如米每像素)。</p><p>另一种方法是设置缩放<code>zoom</code>。缩放可以设置：最大层级<code>maxZoom</code>、最小层级<code>minZoom</code>以及当前层级<code>zoom</code></p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>View</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// center: center,</span>
    <span class="token literal-property property">zoom</span><span class="token operator">:</span> curZoom<span class="token punctuation">,</span>
    <span class="token literal-property property">minZoom</span><span class="token operator">:</span> minZoom<span class="token punctuation">,</span>
    <span class="token literal-property property">maxZoom</span><span class="token operator">:</span> maxZoom<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>获取分辨率：<code>map.getView().getResolution()</code></li><li>获取给定范围(以映射单元为单位)和大小(以像素为单位)的分辨率：<code>map.getView().getResolutionForExtent(extent, opt_size)</code>；</li><li>获取缩放级别的分辨率：<code>map.getView().getResolutionForZoom(zoom)</code>；</li><li>获取视图最大值分辨率：<code>map.getView().getMaxResolution()</code>；</li><li>获取视图最小值分辨率：<code>map.getView().getMinResolution()</code>；</li><li>设置分辨率：<code>map.getView().setResolution(resolution)</code></li></ul><h5 id="_4-旋转rotation" tabindex="-1"><a class="header-anchor" href="#_4-旋转rotation" aria-hidden="true">#</a> 4)旋转<code>rotation</code></h5><p>初始旋转角度为弧度(正顺时针旋转，0表示向北)。</p><ul><li>获取旋转调用方法<code>map.getView().getRotation()</code>；</li><li>设置旋转调用方法<code>map.getView().setRotation(rotation);</code></li></ul><h5 id="_5-缩放zoom" tabindex="-1"><a class="header-anchor" href="#_5-缩放zoom" aria-hidden="true">#</a> 5)缩放<code>zoom</code></h5><p>仅在未定义分辨率时使用。</p><p>缩放级别用于计算视图的初始分辨率。初始分辨率是使用<code>#constrainResolution</code>方法确定的。</p><ul><li>获取缩放层级：<code>map.getView().getZoom()</code>；</li><li>获取最大缩放层级：<code>map.getView().getMaxZoom()</code>；</li><li>获取最小缩放层级：<code>map.getView().getMinZoom()</code>；</li><li>获取缩放层级的分辨率：<code>map.getView().getZoomForResolution(resolution)</code>；</li><li>设置缩放层级：<code>map.getView().setZoom(zoom)</code>；</li><li>设置最大缩放层级：<code>map.getView().setMaxZoom(zoom)</code>；</li><li>设置最小缩放层级：<code>map.getView().setMinZoom(zoom)</code>；</li></ul><h5 id="_6-旋转约束constrainrotation" tabindex="-1"><a class="header-anchor" href="#_6-旋转约束constrainrotation" aria-hidden="true">#</a> 6)旋转约束<code>constrainRotation</code></h5><p>旋转约束。<code>false</code>为未约束，<code>true</code>为未约束但是接近于0。数字限制了旋转到该值的数量。</p><h5 id="_7-启用旋转enablerotation" tabindex="-1"><a class="header-anchor" href="#_7-启用旋转enablerotation" aria-hidden="true">#</a> 7)启用旋转<code>enableRotation</code></h5><p>如果为<code>false</code>，则始终使用将旋转设置为零的旋转约束。如果启用为<code>false</code>，则没有效果。</p><h5 id="_8-约束范围extent" tabindex="-1"><a class="header-anchor" href="#_8-约束范围extent" aria-hidden="true">#</a> 8)约束范围<code>extent</code></h5><p>中心点不能超出这个范围。</p><h4 id="_2-视图方法" tabindex="-1"><a class="header-anchor" href="#_2-视图方法" aria-hidden="true">#</a> (2)视图方法</h4><h5 id="_1-动画animate-var-args" tabindex="-1"><a class="header-anchor" href="#_1-动画animate-var-args" aria-hidden="true">#</a> 1)动画<code>animate(var_args)</code></h5><p><strong>单个动画</strong></p><p>动画视图。视图的中心、缩放(或分辨率)和旋转可以通过动画来实现视图状态之间的平滑转换。</p><p>默认情况下，动画持续时间为1秒，并且类型为<code>in-and-out easing</code>。</p>`,56),m=a("code",null,"duration",-1),y=a("code",null,"easing",-1),h={href:"https://link.segmentfault.com/?enc=n7ahXlttrtA%2F%2FtsX5Xd7lw%3D%3D.NMHmxdD2eXmlxSd6UbgCx4RZL9bHpAMEi0xP2css3bUY%2FzkPJAKbQ%2BiVH7BUg2kKmuhuJiUiaIwTBrpZ0QsVKw%3D%3D",target:"_blank",rel:"noopener noreferrer"},g=s('<p><code>easing</code>:</p><ul><li><code>easeIn</code>：平缓加速</li><li><code>easeOut</code>：平缓减速</li><li><code>inAndOut</code>：平缓开始，先加速，再减速</li><li><code>linear</code>：匀速</li><li><code>upAndDown</code>：平缓开始，加速，最后再减速。这与模块的一般行为相同:<code>ol/easing~inAndOut</code>，但是最终的减速被延迟了</li></ul><p><strong>多个动画</strong></p><p>要将多个动画连接在一起，请使用多个动画对象调用该方法。</p><p>如果提供一个函数作为<code>animate</code>方法的最后一个参数，它将在动画系列的末尾被调用。</p><p>如果动画系列独立完成，回调函数将被调用<code>true</code>;如果动画系列被取消，回调函数将被调用<code>false</code>。</p><p><strong>取消动画</strong></p><p>动画通过用户交互(例如拖动地图)或调用<code>view.setCenter()</code>、<code>view.setResolution()</code>或<code>view.setRotation()</code>(或调用其中一个方法的另一个方法)来取消。</p><h5 id="_2-取消动画cancelanimations" tabindex="-1"><a class="header-anchor" href="#_2-取消动画cancelanimations" aria-hidden="true">#</a> 2)取消动画<code>cancelAnimations()</code></h5><p>取消任何正在进行的动画。</p><h5 id="_3-getanimating" tabindex="-1"><a class="header-anchor" href="#_3-getanimating" aria-hidden="true">#</a> (3)<code>getAnimating()</code></h5><p>确定视图是否处于动画状态。返回布尔值。</p><h5 id="_4-计算范围calculateextent-opt-size" tabindex="-1"><a class="header-anchor" href="#_4-计算范围calculateextent-opt-size" aria-hidden="true">#</a> 4)计算范围<code>calculateExtent(opt_size)</code></h5><p>计算当前视图状态的范围和传递的大小。<code>opt_size</code>指盒子像素尺寸，如未提供，将使用此视图的第一个映射的大小。</p><p>尺寸是盒子的像素尺寸，计算的范围应该与之匹配。</p><p>想要获取整个底图映射的范围，使用<code>map.getSize()</code></p><h5 id="_5-centeron-coordinate-size-position" tabindex="-1"><a class="header-anchor" href="#_5-centeron-coordinate-size-position" aria-hidden="true">#</a> 5)<code>centerOn(coordinate, size, position)</code></h5><p>以坐标和视图位置为中心。</p><ul><li><code>coordinate</code>：坐标点</li><li><code>size</code>：盒子像素尺寸</li><li><code>position</code>：视图的居中位置</li></ul><h3 id="_4、交互动作interaction" tabindex="-1"><a class="header-anchor" href="#_4、交互动作interaction" aria-hidden="true">#</a> 4、交互动作<code>interaction</code></h3><p>通常只用于创建子类，而不在应用程序中实例化。</p><p>用于更改映射状态的用户操作。有些类似于控件，但不与<code>DOM</code>元素关联。</p><p>虽然交互没有<code>DOM</code>元素，但是它们中的一些会呈现向量，因此在屏幕上是可见的。</p><p>添加交互动作使用：<code>map.addInteraction(interaction);</code></p>',24),f={href:"https://link.segmentfault.com/?enc=Pc7NvpvXhPko1XtcBj5nuQ%3D%3D.c1sBGSILnQVjj%2BMDM9q03udLld3N0B%2Bp3LVlEenYW1kKjdbwI4bJNaZHkZYXaQb0W%2FNGwdUn93Zr0onIInAvdw%3D%3D",target:"_blank",rel:"noopener noreferrer"},b=s(`<p><code>OpenLayers</code>中可实例化的子类及其功能如下：</p><table><thead><tr><th>可实例化子类</th><th>功能</th></tr></thead><tbody><tr><td><code>doubleclickzoom interaction</code></td><td>双击放大交互功能</td></tr><tr><td><code>draganddrop</code></td><td>以“拖文件到地图中”的交互添加图层</td></tr><tr><td><code>dragbox</code></td><td>拉框，用于划定一个矩形范围，常用于放大地图</td></tr><tr><td><code>dragpan</code></td><td>拖拽平移地图</td></tr><tr><td><code>dragrotateandzoom</code></td><td>拖拽方式进行缩放和旋转地图</td></tr><tr><td><code>dragrotate</code></td><td>拖拽方式旋转地图</td></tr><tr><td><code>dragzoom</code></td><td>拖拽方式缩放地图</td></tr><tr><td><code>draw</code></td><td>绘制地理要素功能</td></tr><tr><td><code>interaction defaults</code></td><td>默认添加的交互功能</td></tr><tr><td><code>keyboardpan</code></td><td>键盘方式平移地图</td></tr><tr><td><code>keyboardzoom</code></td><td>键盘方式缩放地图</td></tr><tr><td><code>select</code></td><td>选择要素功能</td></tr><tr><td><code>modify</code></td><td>更改要素</td></tr><tr><td><code>mousewheelzoom</code></td><td>鼠标滚轮缩放功能</td></tr><tr><td><code>pinchrotate</code></td><td>手指旋转地图，针对触摸屏</td></tr><tr><td><code>pinchzoom</code></td><td>手指进行缩放，针对触摸屏</td></tr><tr><td><code>pointer</code></td><td>鼠标的用户自定义事件基类</td></tr><tr><td><code>snap</code></td><td>鼠标捕捉，当鼠标距离某个要素一定距离之内，自动吸附到要素</td></tr></tbody></table><h4 id="_1-默认交互功能ol-interaction-defaylts" tabindex="-1"><a class="header-anchor" href="#_1-默认交互功能ol-interaction-defaylts" aria-hidden="true">#</a> (1)默认交互功能<code>ol.interaction.defaylts()</code></h4><p>主要是最为常用的功能，如缩放、平移和旋转地图等，具体功能有如下这些：</p><table><thead><tr><th>默认交互</th><th>功能</th></tr></thead><tbody><tr><td><code>ol.interaction.DragRotate</code></td><td>鼠标拖拽旋转，一般配合一个键盘按键辅助</td></tr><tr><td><code>ol.interaction.DragZoom</code></td><td>鼠标拖拽缩放，一般配合一个键盘按键辅助</td></tr><tr><td><code>ol.interaction.DoubleClickZoom</code></td><td>鼠标或手指双击缩放地图</td></tr><tr><td><code>ol.interaction.PinchRotate</code></td><td>两个手指旋转地图，针对触摸屏</td></tr><tr><td><code>ol.interaction.PinchZoom</code></td><td>两个手指缩放地图，针对触摸屏</td></tr><tr><td><code>ol.interaction.DragPan</code></td><td>鼠标或手指拖拽平移地图</td></tr><tr><td><code>ol.interaction.KeyboardZoom</code></td><td>使用键盘 <code>+</code> 和 <code>-</code> 按键进行缩放</td></tr><tr><td><code>ol.interaction.KeyboardPan</code></td><td>使用键盘方向键平移地图</td></tr><tr><td><code>ol.interaction.MouseWheelZoom</code></td><td>鼠标滚轮缩放地图</td></tr></tbody></table><h4 id="_2-针对矢量图层元素的交互功能" tabindex="-1"><a class="header-anchor" href="#_2-针对矢量图层元素的交互功能" aria-hidden="true">#</a> (2)针对矢量图层元素的交互功能</h4><h5 id="_1-选择ol-interaction-select" tabindex="-1"><a class="header-anchor" href="#_1-选择ol-interaction-select" aria-hidden="true">#</a> 1）选择<code>ol.interaction.Select()</code></h5><p>选择矢量元素的交互功能。</p><p>默认情况下，所选矢量元素的样式不相同，因此这种交互可以用于可视化高亮显示，以及为其他操作(如修改或输出)选择特性。</p><p>选定的矢量元素将被添加到内部非托管图层。</p><p>有三种方式控制矢量元素的选择：</p><ul><li>使用由<code>condition</code>定义的浏览器事件和<code>toggle</code>切换的<code>add</code>/<code>remove</code>以及<code>multi</code>选项</li><li>一个<code>layer</code>过滤器</li><li>一个使用<code>filter</code>选项的进一步矢量元素过滤器</li></ul><h5 id="_2-绘制ol-interaction-draw" tabindex="-1"><a class="header-anchor" href="#_2-绘制ol-interaction-draw" aria-hidden="true">#</a> 2)绘制<code>ol.interaction.Draw()</code></h5><p>用于绘制特征几何图形的交互功能。</p><p>绘制交互允许绘制几何地理要素，可选一个参数为对象，可包含参数如下：</p><ul><li><code>features</code>：绘制的要素的目标集合；</li><li><code>source</code>：绘制的要素的目标图层源；</li><li><code>snapTolerance</code>：自动吸附完成点的像素距离，也就是说当鼠标位置距离闭合点小于该值设置的时候，会自动吸附到闭合点，默认值是 <code>12</code>；</li><li><code>type</code>：绘制的地理要素类型，<code>ol.geom.GeometryType</code>类型，包含 <code>Point</code>、 <code>LineString</code>、 <code>Polygon</code>、<code>MultiPoint</code>、<code>MultiLineString</code> 或者 <code>MultiPolygon</code>；</li><li><code>minPointsPerRing</code>：绘制一个多边形需要的点数最小值，数值类型，默认是 <code>3</code>；</li><li><code>style</code>：要素素描的样式；</li><li><code>geometryName</code>：绘制的地理要素的名称，<code>string</code>类型</li></ul><h5 id="_3-修改ol-interaction-modify" tabindex="-1"><a class="header-anchor" href="#_3-修改ol-interaction-modify" aria-hidden="true">#</a> 3)修改<code>ol.interaction.Modify()</code></h5><p>用于修改矢量元素几何图形的交互功能。</p><p>若想修改已添加到存在的矢量源中的矢量元素，需要使用<code>modify</code>选项构建修改交互动作。</p><p>如若想修改集合中的矢量元素（比如用选择交互的集合），需要使用<code>features</code>选项构建交互。该交互必须使用<code>source</code>或者<code>features</code>构建。</p><p>默认情况下，当按下<code>alt</code>键时，交互允许删除顶点。想要使用不同的删除条件配置交互，请使用<code>deleteCondition</code>选项。</p><h3 id="_5、控件control" tabindex="-1"><a class="header-anchor" href="#_5、控件control" aria-hidden="true">#</a> 5、控件<code>Control</code></h3><p>控件是一个可见的小部件，其DOM元素位于屏幕上的固定位置。它们可以包含用户输入(按钮)，或者只是提供信息;位置是使用CSS确定的。这是一个虚基类，不负责实例化特定的控件。</p><p>默认情况下，这些元素被放置在具有CSS类名称<code>ol-overlaycontainer-stopevent</code>的容器中，但是可以使用任何外部DOM元素。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> myControl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Control</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//定义一个控件</span>
    <span class="token literal-property property">element</span><span class="token operator">:</span>myElement
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//然后添加到地图上</span>
map<span class="token punctuation">.</span><span class="token function">addControl</span><span class="token punctuation">(</span>myControl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>主要的属性选项有：</p><ul><li><code>element</code>：DOM元素，元素是控件的容器元素。只有在开发自定义控件时才需要指定这一点</li><li><code>render</code>：重新呈现控件时调用的函数。这在<code>requestAnimationFrame</code>回调中调用</li><li><code>target</code>：DOM元素，想要控件在映射的视图端口之外呈现，需要指定目标对象</li></ul><p>其中包含的控件有：</p><table><thead><tr><th>控件</th><th>功能</th></tr></thead><tbody><tr><td><code>controldefaults</code></td><td>地图默认包含的控件，包含缩放控件和旋转控件</td></tr><tr><td><code>fullscreencontrol</code></td><td>全屏控件，用于全屏幕查看地图</td></tr><tr><td><code>mousepositioncontrol</code></td><td>鼠标位置控件，显示鼠标所在地图位置的坐标，可以自定义投影</td></tr><tr><td><code>overviewmapcontrol</code></td><td>地图全局视图控件</td></tr><tr><td><code>rotatecontrol</code></td><td>地图旋转控件</td></tr><tr><td><code>scalelinecontrol</code></td><td>比例尺控件</td></tr><tr><td><code>zoomcontrol</code></td><td>缩放控件</td></tr><tr><td><code>zoomslidercontrol</code></td><td>缩放刻度控件</td></tr><tr><td><code>zoomtoextentcontrol</code></td><td>缩放到全局控件</td></tr></tbody></table><h3 id="_6、叠加层overlay" tabindex="-1"><a class="header-anchor" href="#_6、叠加层overlay" aria-hidden="true">#</a> 6、叠加层<code>Overlay</code></h3><p>要显示在地图上方并附加到单个地图位置的元素。与控件不同的是，它们不在屏幕上的固定位置，而是绑定到地理坐标上，因此平移地图将移动 <code>overlay</code> ，而不是控件。</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>popup<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
let popup = new ol.Overlay({
    element:document.getElementById(&#39;popup&#39;),
    ...
});
popup.setPosition(coordinate);
map.addOverlay(popup);
</code></pre></div><p><strong>Overlay选项</strong></p><h4 id="_1-id" tabindex="-1"><a class="header-anchor" href="#_1-id" aria-hidden="true">#</a> (1)<code>id</code></h4><p>设置 <code>overlay</code>的 <code>id</code>，字符串类型。</p><ul><li>获取<code>id</code>：<code>map.getOverlayById(id)</code>或者<code>overlay.getId()</code></li></ul><h4 id="_2-element" tabindex="-1"><a class="header-anchor" href="#_2-element" aria-hidden="true">#</a> (2)<code>element</code></h4><p><code>overlay</code> 元素，<code>DOM</code>元素</p><ul><li>获取：<code>overlay.getElement()</code></li><li>设置：<code>overlay.setElement(element)</code></li></ul><h4 id="_3-offset" tabindex="-1"><a class="header-anchor" href="#_3-offset" aria-hidden="true">#</a> (3)<code>offset</code></h4><p>偏移量(以像素为单位)，用于定位 <code>overlay</code> ，数组类型，默认为[0, 0]：</p><ul><li>数组第一个元素为水平偏移，正右负左；</li><li>数组第二个元素为垂直，正下负上；</li><li>获取偏移值：<code>overlay.getOffset()</code></li><li>设置偏移值：<code>overlay.setOffset(offset)</code></li></ul><h4 id="_4-position" tabindex="-1"><a class="header-anchor" href="#_4-position" aria-hidden="true">#</a> (4)<code>position</code></h4><p>地图投影中的位置。</p><ul><li>获取：<code>overlay.getPosition()</code></li><li>设置：<code>overlay.setPosition(position)</code>，如果位置未定义<code>undefined</code>，则覆盖被隐藏。</li></ul><h4 id="_5-positioning" tabindex="-1"><a class="header-anchor" href="#_5-positioning" aria-hidden="true">#</a> (5)<code>positioning</code></h4><p>定义 <code>overlay</code> 相对于其位置属性的实际位置，默认为<code>top-left</code>，还有<code>&#39;bottom-left&#39;</code>, <code>&#39;bottom-center&#39;</code>, <code>&#39;bottom-right&#39;</code>, <code>&#39;center-left&#39;</code>, <code>&#39;center-center&#39;</code>, <code>&#39;center-right&#39;</code>, <code>&#39;top-left&#39;</code>,<code>&#39;top-center&#39;</code>, and <code>&#39;top-right&#39;</code>.</p><ul><li>获取：<code>overlay.getPositioning()</code></li><li>设置：<code>overlay.setPositioning(positioning)</code></li></ul><h4 id="_6-autopan" tabindex="-1"><a class="header-anchor" href="#_6-autopan" aria-hidden="true">#</a> (6)<code>autoPan</code></h4><p>默认为<code>false</code>，如果设置为true，则在调用<code>setPosition</code>将平移映射，以便在当前视图中 <code>overlay</code> 完全可见。</p><h4 id="_7-autopananimation" tabindex="-1"><a class="header-anchor" href="#_7-autopananimation" aria-hidden="true">#</a> (7)<code>autoPanAnimation</code></h4><p>动画选项用于平移 <code>overlay</code> 到视图中。此动画仅在启用<code>autoPan</code>时使用。可以提供一个持续时间和缓动来定制动画。</p><h4 id="_8-stopevent" tabindex="-1"><a class="header-anchor" href="#_8-stopevent" aria-hidden="true">#</a> (8)<code>stopEvent</code></h4><p>默认为<code>true</code>，是否应该停止到map视图端口的事件传播。</p><ul><li>如果为<code>true</code>，则将 <code>overlay</code> 放置在与控件相同的容器中（CSS class name<code>ol-overlaycontainer-stopevent</code>）</li><li>如果为<code>false</code>，它用<code>className</code>属性指定的<code>CSS</code>类名放置在容器中。</li></ul><h4 id="_9-classname" tabindex="-1"><a class="header-anchor" href="#_9-classname" aria-hidden="true">#</a> (9)<code>className</code></h4><p><code>CSS class name</code>.</p><h4 id="_10-autopanmargin" tabindex="-1"><a class="header-anchor" href="#_10-autopanmargin" aria-hidden="true">#</a> (10)<code>autoPanMargin</code></h4><p>地图自动平移时，地图边缘与 <code>overlay</code> 的留白（空隙），单位是像素，默认是 20像素</p><h3 id="叠加层overlay" tabindex="-1"><a class="header-anchor" href="#叠加层overlay" aria-hidden="true">#</a> 叠加层Overlay</h3><ul><li>要显示在地图上方并附加到单个地图位置的元素。与控件不同的是，他们不在屏幕上固定的位置，而是绑定在地理坐标上，因此平移或者拖动将移动Overlay，而不是控件</li></ul><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>popup<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token keyword">let</span> popup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Overlay</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">element</span><span class="token operator">:</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;popup&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
popup<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span>coordinate<span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">addOverlay</span><span class="token punctuation">(</span>popup<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><strong>Overlay选项</strong></li></ul><ol><li>id:设置Overlay的Id 获取 id ： map.getOverlayById(id)/Overlay.getId()</li><li>Element ： Overlay元素，DOM元素 获取和设置： Overlay.getElement()/setElement(element)</li><li>offset 偏移量 ： 偏移量(以像素为单位)，用于定位 overlay ，数组类型，默认为[0, 0] 获取和设置： <code>overlay.getOffset()/overlay.setOffset(offset)</code></li><li>position：地图投影中的位置</li></ol><p>获取： Overlay.getPosition() 设置： Overlay.setPosition(position)</p><h3 id="_7、投影projections" tabindex="-1"><a class="header-anchor" href="#_7、投影projections" aria-hidden="true">#</a> 7、投影<code>Projections</code></h3><p>需要给所有坐标和范围提供视图投影系（默认是<code>EPAG:3857</code>）。</p><p>转换投影系，使用<code>ol.proj.transform()</code>和<code>ol.proj.transformExtendt</code>进行转换</p><h4 id="_1-、ol-proj" tabindex="-1"><a class="header-anchor" href="#_1-、ol-proj" aria-hidden="true">#</a> (1）、<code>ol.proj</code></h4><h5 id="_1-ol-proj-addcoordinatetransforms-source-destination-forward-inverse" tabindex="-1"><a class="header-anchor" href="#_1-ol-proj-addcoordinatetransforms-source-destination-forward-inverse" aria-hidden="true">#</a> 1）<code>ol.proj.addCoordinateTransforms(source, destination, forward, inverse)</code></h5><p>注册坐标转换函数来转换源投影和目标投影之间的坐标。正、反函数转换坐标对;此函数将这些转换为内部使用的处理区段和坐标数组的函数</p><ul><li><code>source</code>：源投影</li><li><code>destination</code>：目标投影</li><li><code>forward</code>：接受<code>ol</code>的正向变换函数(即从源投影到目标投影)。作为参数，并返回转换后的<code>ol.Coordinate</code></li><li><code>inverse</code>：接受<code>ol</code>的逆变换函数(即从目标投影到源投影)。作为参数，并返回转换后的<code>ol.Coordinate</code></li></ul><h5 id="_2-ol-proj-addequivalentprojections-projections" tabindex="-1"><a class="header-anchor" href="#_2-ol-proj-addequivalentprojections-projections" aria-hidden="true">#</a> 2)<code>ol.proj.addEquivalentProjections(projections)</code></h5><p>注册不改变坐标的转换函数。它们允许在具有相同含义的投影之间进行转换。</p><h5 id="_3-ol-proj-addprojection-projection" tabindex="-1"><a class="header-anchor" href="#_3-ol-proj-addprojection-projection" aria-hidden="true">#</a> 3）<code>ol.proj.addProjection(projection)</code></h5><p>将投影对象添加到受支持的投影列表中，这些投影可以通过它们的<code>SRS</code>码进行查找。</p><h5 id="_4-ol-proj-equivalent-projection1-projection2" tabindex="-1"><a class="header-anchor" href="#_4-ol-proj-equivalent-projection1-projection2" aria-hidden="true">#</a> 4)<code>ol.proj.equivalent(projection1, projection2)</code></h5><p>检查两个投影是否相同，即一个投影中的每个坐标确实表示另一个投影中的相同地理点。</p><h5 id="_5-ol-proj-fromlonlat-coordinate-opt-projection" tabindex="-1"><a class="header-anchor" href="#_5-ol-proj-fromlonlat-coordinate-opt-projection" aria-hidden="true">#</a> 5)<code>ol.proj.fromLonLat(coordinate, opt_projection)</code></h5><p>将经纬度坐标转换为不同的投影</p><ul><li><code>coordinate</code>：经纬度数组，经度在前，纬度在后</li><li><code>projection</code>：目标投影。默认是<code>Web Mercator</code>，即<code>“EPSG: 3857”</code></li></ul><h5 id="_6-ol-proj-get-projectionlike" tabindex="-1"><a class="header-anchor" href="#_6-ol-proj-get-projectionlike" aria-hidden="true">#</a> 6)<code>ol.proj.get(projectionLike)</code></h5><p>获取指定代码的投影对象。</p><h5 id="_7-ol-proj-gettransform-source-destination" tabindex="-1"><a class="header-anchor" href="#_7-ol-proj-gettransform-source-destination" aria-hidden="true">#</a> 7)<code>ol.proj.getTransform(source, destination)</code></h5><p>给定类似于投影的对象，搜索转换函数将坐标数组从源投影转换为目标投影。</p><h5 id="_8-ol-proj-setproj4-proj4" tabindex="-1"><a class="header-anchor" href="#_8-ol-proj-setproj4-proj4" aria-hidden="true">#</a> 8)<code>ol.proj.setProj4(proj4)</code></h5><p>proj4注册。如果没有显式注册，则假定proj4js将加载在全局名称空间中</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>ol<span class="token punctuation">.</span>proj<span class="token punctuation">.</span><span class="token function">setProj4</span><span class="token punctuation">(</span>proj4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h5 id="_9-ol-proj-tolonlat-coordinate-opt-projection" tabindex="-1"><a class="header-anchor" href="#_9-ol-proj-tolonlat-coordinate-opt-projection" aria-hidden="true">#</a> 9)<code>ol.proj.toLonLat(coordinate, opt_projection)</code></h5><p>将坐标转换为经度/纬度</p><ul><li><code>coordinate</code>：投影坐标</li><li><code>projection</code>：坐标的投影，默认是<code>Web Mercator</code>，即<code>“EPSG: 3857”</code></li></ul><h5 id="_10-ol-proj-transform-coordinate-source-destination" tabindex="-1"><a class="header-anchor" href="#_10-ol-proj-transform-coordinate-source-destination" aria-hidden="true">#</a> 10)<code>ol.proj.transform(coordinate, source, destination)</code></h5><p>将坐标从源投影转换为目标投影，这将返回一个新的坐标(并且不修改原始坐标)。</p><ul><li><code>coordinate</code>：坐标</li><li><code>source</code>：源投影</li><li><code>destination</code>：目标投影</li></ul><h5 id="_11-ol-proj-transformextent" tabindex="-1"><a class="header-anchor" href="#_11-ol-proj-transformextent" aria-hidden="true">#</a> 11)<code>ol.proj.transformExtent</code></h5><p>将范围从源投影转换为目标投影，这将返回一个新范围(并且不修改原始范围)。</p><h5 id="_12-ol-proj-units-string" tabindex="-1"><a class="header-anchor" href="#_12-ol-proj-units-string" aria-hidden="true">#</a> 12)<code>ol.proj.Units{string}</code></h5><p>投影单位：<code>&#39;degrees&#39;</code>, <code>&#39;ft&#39;</code>, <code>&#39;m&#39;</code>, <code>&#39;pixels&#39;</code>, <code>&#39;tile-pixels&#39;</code> or <code>&#39;us-ft&#39;</code></p>`,98);function v(x,_){const t=p("ExternalLinkIcon");return c(),r("div",null,[d,a("p",null,[n("以下是"),i,n("抽象基类创建的常见"),a("a",u,[n("子类模块"),e(t)]),n("：")]),k,a("p",null,[n("通过设置持续时间"),m,n("(以毫秒为单位)和缓动选项"),y,n("(参见模块:"),a("a",h,[n("ol/easing"),e(t)]),n(")来定制此行为。")]),g,a("p",null,[a("a",f,[n("参考于此"),e(t)])]),b])}const j=o(l,[["render",v],["__file","index.html.vue"]]);export{j as default};
