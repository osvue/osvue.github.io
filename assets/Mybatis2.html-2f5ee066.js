import{_ as a,p as n,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},e=t(`<h2 id="小技巧" tabindex="-1"><a class="header-anchor" href="#小技巧" aria-hidden="true">#</a> 小技巧</h2><div class="language-text" data-ext="text"><pre class="language-text"><code>如果在 xml 文件中出现  “&lt;” , “&gt;”  ,双引号 等特殊字符时可以使用

XML 文件转义标签(XML 自身的)

\`&lt;![CDATA[ 内容 ]]&gt;\`

</code></pre></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> #{}. \${}</h3><ul><li>#{} <ul><li>使用占位符,最终值为 <strong>&#39; &#39;</strong> 包裹</li></ul></li><li>\${} <ul><li>不使用占位符,故而不使用&#39;&#39; 包裹,用在 <strong>order by 排序和limit 分页</strong></li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>mybatis 中实现 mysql 分页写法 不允许在关键字前后进行数学运算,需要在代码中计算完成 后传递到 mapper.xml 中</p></div><ul><li>mapper.xml 中代码</li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.a.b.People<span class="token punctuation">&quot;</span></span>
<span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
select * from people limit #{pageStart},#{pageSize}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="在-mapper-xml-中可以通过-获取参数" tabindex="-1"><a class="header-anchor" href="#在-mapper-xml-中可以通过-获取参数" aria-hidden="true">#</a> 在 Mapper.xml 中可以通过#{}获取参数</h3><ul><li>parameterType 控制参数类型</li><li>#{}获取参数内容\`</li><li>使用索引,从 0 开始 #{0}表示第一个参数</li><li>也可以使用#{param1}第一个参数</li><li>如果只有一个参数(基本数据类型或 String),mybatis</li><li>对#{}里面内容没有要求只要写内容即可.</li><li>如果参数是对象#{属性名}</li><li>如果参数是 map 写成#{key}</li></ul><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> #{} 和 \${} 的区别</h3><ul><li>#{} 获取参数的内容支持 索引获取,param1 获取指定位置参数, 并且 SQL 使用?占位符</li><li>{} 字符串拼接不使用?,默认找{内容}内容的 get/set 方法,如 果写数字,就是一个数字</li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>
<span class="token comment">&lt;!-- namesapce:理解成实现类的全路径(包名+类名) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a.b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- id:方法名
  parameterType:定义参数类型
  resultType:返回值类型.
  如果方法返回值是 list,在 resultType 中写 List 的泛型,
  因为 mybatis
  对 jdbc 封装,一行一行读取数据
  --&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 用result属性来映射非主键字段 ，通过column字段来解决javaBean和数据库字段不相同的问题--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user_name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userPassword<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user_password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userEmail<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user_email<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>headImg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>head_url<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createTime<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>create_time<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TIMESTAMP<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from user where
        id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selById<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.a.c.People<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select * from people where id=#{0}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="多参数实现办法" tabindex="-1"><a class="header-anchor" href="#多参数实现办法" aria-hidden="true">#</a> 多参数实现办法</h2><ul><li><p>在接口中声明方法 <code>List&lt;Log&gt; selByAccInAccout(String accin,String accout);</code></p></li><li><p>在 mapper.xml 中添加</p><ul><li>#{}中使用 0,1,2 或 param1,param2</li></ul></li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selByAccInAccout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>log<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
select * from log where accin=#{0} and accout=#{1}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="注解方式" tabindex="-1"><a class="header-anchor" href="#注解方式" aria-hidden="true">#</a> 注解方式</h2><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* mybatis 把参数转换为 map 了,其中@Param(&quot;key&quot;) 参数内
容就是 map 的 value
* <span class="token keyword">@param</span> <span class="token parameter">accin123</span>
* <span class="token keyword">@param</span> <span class="token parameter">accout3454235</span>
* <span class="token keyword">@return</span>
*/</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Log</span><span class="token punctuation">&gt;</span></span> <span class="token function">selByAccInAccout</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;accin&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span>
accin123<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;accout&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> accout3454235<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="mapper-xml" tabindex="-1"><a class="header-anchor" href="#mapper-xml" aria-hidden="true">#</a> mapper.xml</h3><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 当多参数时,不需要写 parameterType 
 #{} 里面写@Param(“内容”)参数中内容
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selByAccInAccout<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>log<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
select * from log where accin=#{accin} and
accout=#{accout}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,19),o=[e];function c(l,u){return n(),s("div",null,o)}const k=a(p,[["render",c],["__file","Mybatis2.html.vue"]]);export{k as default};
