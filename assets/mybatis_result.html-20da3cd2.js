import{_ as a,p as s,q as n,a1 as t}from"./framework-d81ad7e5.js";const p={},e=t(`<h3 id="mapper接口方法不同类型返回值对应的的resulttype设置" tabindex="-1"><a class="header-anchor" href="#mapper接口方法不同类型返回值对应的的resulttype设置" aria-hidden="true">#</a> Mapper接口方法不同类型返回值对应的的resultType设置</h3><ul><li>返回值属性有两种设置，一种是resultType，一种是resultMap。 resultType适用于返回值是简单类型（String，Integer）或者数据库字段与POJO字段完全一致的情况下，所以属性值一般是某一个pojo类或者简单类型。</li></ul><ol><li><p>如果数据库中的字段在resultType指定的实体类中没有对应的字段名称，那这个值将丢失。</p></li><li><p>如果实例类中的字段名称在数据库中不存在或者不一致，那么最终实体类的这个字段为null（int类型是0，boolean类型为false）</p></li><li><p>返回值为简单类型。 直接使用resultType=“类型”，如string，Integer等。</p></li><li><p>返回值为List类型。</p><ul><li>使用resultType=“list元素的类型”，一般是实体类如User，也可以是Map，对应返回值类型是<code>List&lt;User&gt; List&lt;Map&lt;String,Object&gt;&gt;</code>，</li><li>不管是哪种，最终结果会根据接口返回值类型自动将多个 resultType指定的类型的元素（User或以一条记录为一个Map）组装成List。</li></ul></li></ol><p>设置：<code>resultType=“com.fkk.model.User”</code> 实体类</p><div class="language-java" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;getUser&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;com.fkk.model.User&quot;</span><span class="token operator">&gt;</span>
        select <span class="token operator">*</span> from user
        where
        age <span class="token operator">=</span> #<span class="token punctuation">{</span>age<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre></div><p>设置：resultType=“java.util.Map”</p><div class="language-java" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;findUserList&quot;</span>  parameterType<span class="token operator">=</span><span class="token string">&quot;int&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;java.util.Map&quot;</span><span class="token operator">&gt;</span>
        <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> user
    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>

</code></pre></div><p>3.返回值为Map类型。（使用map要注意查询结果的条数，多条会报错） 大概的应用场景是不知道查询的结果有多少字段或者不清楚字段名称。</p><p>设置：resultType=&quot;java.util.Map&quot;</p><p><code>public Map&lt;String ,Object&gt; findUserById(int id); </code></p><h3 id="使用resultmap" tabindex="-1"><a class="header-anchor" href="#使用resultmap" aria-hidden="true">#</a> 使用resultMap</h3><ul><li>基于原有的实体类自定义resultMap，重新指定实体字段名与数据库字段名的映射关系，</li><li>那么在sql方法标签中这要使用resultMap设置返回值类型，属性的值自然就是我们自己定义的resultMap的id值。</li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>  <span class="token comment">&lt;!--2.设置返回数据为resultMap --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.fkk.model.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id_<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username_<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sex<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sex_<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>birthday<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>birthday_<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address<span class="token punctuation">&quot;</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address_<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findUserByIdResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        SELECT
         id_,
         username_,
         sex_,
         birthday_,
         address_
        FROM user WHERE id = #{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,13),o=[e];function l(c,u){return s(),n("div",null,o)}const k=a(p,[["render",l],["__file","mybatis_result.html.vue"]]);export{k as default};
