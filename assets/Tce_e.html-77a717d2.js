import{_ as t,p as e,q as l,a1 as a}from"./framework-d81ad7e5.js";const i={},n=a('<h2 id="流量网关和业务网关" tabindex="-1"><a class="header-anchor" href="#流量网关和业务网关" aria-hidden="true">#</a> 流量网关和业务网关</h2><h3 id="流量网关" tabindex="-1"><a class="header-anchor" href="#流量网关" aria-hidden="true">#</a> 流量网关</h3><ul><li>全局性流控</li><li>日志统计</li><li>防止 SQL 注入</li><li>防止 Web 攻击</li><li>屏蔽工具扫描</li><li>黑白名单控制</li></ul><h3 id="业务网关" tabindex="-1"><a class="header-anchor" href="#业务网关" aria-hidden="true">#</a> <strong>业务网关</strong></h3><ul><li>请求接入：作为所有 API 接口服务请求的接入点，管理所有的接入请求；</li><li>业务聚合：作为所有后端业务服务的聚合点，所有的业务服务都可以在这里被调用；</li><li>中介策略：实现安全、验证、路由、过滤、流控，缓存等策略，进行一些必要的中介处理；</li><li>统一管理：提供配置管理工具，对所有 API 服务的调用生命周期和相应的中介策略进行统一管理。</li></ul><h2 id="开源网关" tabindex="-1"><a class="header-anchor" href="#开源网关" aria-hidden="true">#</a> 开源网关</h2><p>目前常见的开源网关大致上按照语言分类有如下几类：</p><ul><li>Nginx+lua：Open Resty、Kong、Orange、Abtesting gateway 等</li><li>Java：Zuul/Zuul2、Spring Cloud Gateway、Kaazing KWG、gravitee、Dromara soul 等</li><li>Go：Janus、fagongzi、Grpc-gateway</li><li>Dotnet：Ocelot</li><li>NodeJS：Express Gateway、Micro Gateway</li></ul><p>按照使用数量、成熟度等来划分，主流的有 4 个：</p><ul><li>OpenResty</li><li>Kong</li><li>Zuul/Zuul2</li><li>Spring Cloud Gateway</li></ul><h3 id="abtesinggateway" tabindex="-1"><a class="header-anchor" href="#abtesinggateway" aria-hidden="true">#</a> ABTesingGateway</h3><p>项目地址：</p><p>https://github.com/CNSRE/ABTestingGateway</p><h3 id="zuul-zuul2" tabindex="-1"><a class="header-anchor" href="#zuul-zuul2" aria-hidden="true">#</a> <strong>Zuul/Zuul2</strong></h3><p>https://github.com/Netflix/zuul</p><p>Zuul 1.x</p><p>Zuul 2.x</p><h3 id="spring-cloud-gateway" tabindex="-1"><a class="header-anchor" href="#spring-cloud-gateway" aria-hidden="true">#</a> Spring Cloud Gateway</h3><p>https://github.com/spring-cloud/spring-cloud-gateway/</p><h2 id="openresty-kong-zuul2-springcloudgateway-重要特性对比" tabindex="-1"><a class="header-anchor" href="#openresty-kong-zuul2-springcloudgateway-重要特性对比" aria-hidden="true">#</a> <strong>OpenResty/Kong/Zuul2/SpringCloudGateway 重要特性对比</strong></h2><table><thead><tr><th style="text-align:left;">网关</th><th style="text-align:left;">限流</th><th style="text-align:left;">鉴权</th><th style="text-align:left;">监控</th><th style="text-align:left;">易用性</th><th style="text-align:left;">可维护性</th><th style="text-align:left;">成熟度</th></tr></thead><tbody><tr><td style="text-align:left;">Spring Cloud Gateway</td><td style="text-align:left;">可以通过IP，用户，集群限流，提供了相应的接口进行扩展</td><td style="text-align:left;">普通鉴权、auth2.0</td><td style="text-align:left;">Gateway Metrics Filter</td><td style="text-align:left;">简单易用</td><td style="text-align:left;">spring系列可扩展强，易配置 可维护性好</td><td style="text-align:left;">spring社区成熟，但gateway资源较少</td></tr><tr><td style="text-align:left;">Zuul2</td><td style="text-align:left;">可以通过配置文件配置集群限流和单服务器限流亦可通过filter实现限流扩展</td><td style="text-align:left;">filter中实现</td><td style="text-align:left;">filter中实现</td><td style="text-align:left;">参考资料较少</td><td style="text-align:left;">可维护性较差</td><td style="text-align:left;">开源不久，资料少</td></tr><tr><td style="text-align:left;">OpenResty</td><td style="text-align:left;">需要lua开发</td><td style="text-align:left;">需要lua开发</td><td style="text-align:left;">需要开发</td><td style="text-align:left;">简单易用，但是需要进行的lua开发很多</td><td style="text-align:left;">可维护性较差，将来需要维护大量lua脚本</td><td style="text-align:left;">很成熟资料很多</td></tr><tr><td style="text-align:left;">Kong</td><td style="text-align:left;">根据秒，分，时，天，月，年，根据用户进行限流。可在原码的基础上进行开发</td><td style="text-align:left;">普通鉴权，Key Auth鉴权，HMAC，auth2.0</td><td style="text-align:left;">可上报datadog，记录请求数量，请求数据量，应答数据量，接收于发送的时间间隔，状态码数量，kong内运行时间</td><td style="text-align:left;">简单易用，api转发通过管理员接口配置，开发需要lua脚本</td><td style="text-align:left;">&quot;可维护性较差，将来需要维护大量lua库</td><td style="text-align:left;">相对成熟，用户问题汇总，社区，插件开源</td></tr></tbody></table><h2 id="kong" tabindex="-1"><a class="header-anchor" href="#kong" aria-hidden="true">#</a> Kong</h2><p>https://konghq.com/</p><p>https://github.com/kong/kong</p><p><strong>主要有三个组件</strong></p><ul><li>Kong Server ：基于nginx的服务器，用来接收API请求。</li><li>Apache Cassandra/PostgreSQL ：用来存储操作数据。</li><li>Kong dashboard：官方推荐UI管理工具，当然，也可以使用 restfull 方式 管理admin api。</li></ul><p>Kong采用插件机制进行功能定制，插件集（可以是0或N个）在API请求响应循环的生命周期中被执行。插件使用Lua编写，目前已有几个基础功能：HTTP基本认证、密钥认证、CORS（Cross-Origin Resource Sharing，跨域资源共享）、TCP、UDP、文件日志、API请求限流、请求转发以及Nginx监控。</p>',27),d=[n];function r(s,g){return e(),l("div",null,d)}const u=t(i,[["render",r],["__file","Tce_e.html.vue"]]);export{u as default};
