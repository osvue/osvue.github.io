import{_ as p,M as o,p as e,q as c,R as n,t as a,N as l,a1 as s}from"./framework-d81ad7e5.js";const u={},r=s(`<h2 id="object-assign-深拷贝浅拷贝" tabindex="-1"><a class="header-anchor" href="#object-assign-深拷贝浅拷贝" aria-hidden="true">#</a> Object.assign() 深拷贝浅拷贝</h2><p>一、数据类型 数据分为基本数据类型(String, Number, Boolean, Null, Undefined，Symbol)和对象数据类型。</p><p>基本数据类型的特点：直接存储在栈(stack)中的数据 引用数据类型的特点：存储的是该对象在栈中引用，真实的数据存放在堆内存里</p><p>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 数据处理</span>
                    <span class="token keyword">let</span> requestData <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
                    requestData<span class="token punctuation">.</span>role <span class="token operator">=</span> requestData<span class="token punctuation">.</span>role<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 数组转字符串，默认以，号隔开</span>
                    requestData<span class="token punctuation">.</span>region <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>cityPickerData<span class="token punctuation">)</span><span class="token punctuation">;</span>  

</code></pre></div><h2 id="深拷贝的实现方式" tabindex="-1"><a class="header-anchor" href="#深拷贝的实现方式" aria-hidden="true">#</a> 深拷贝的实现方式</h2><h3 id="json-parse-json-stringify" tabindex="-1"><a class="header-anchor" href="#json-parse-json-stringify" aria-hidden="true">#</a> JSON.parse(JSON.stringify())</h3><p>注意: 原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。 这种方法虽然可以实现数组或对象深拷贝,但不能处理函数</p><h2 id="浅拷贝的实现方式" tabindex="-1"><a class="header-anchor" href="#浅拷贝的实现方式" aria-hidden="true">#</a> 浅拷贝的实现方式</h2><h3 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign" aria-hidden="true">#</a> Object.assign()</h3><p>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。 注意：当object只有一层的时候，是深拷贝</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> abc <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">aa</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;my name is abc to aa function&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bb</span><span class="token operator">:</span><span class="token string">&#39;2020-01-01&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">cc</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">cad</span><span class="token operator">:</span><span class="token string">&quot;lusifer&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ccdd</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">names</span><span class="token operator">:</span><span class="token string">&quot;鲁斯菲尔&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">mw</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">haz</span><span class="token operator">:</span><span class="token string">&quot;hanziqiang&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">lusfi</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token string">&quot;hello&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> parse <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> va <span class="token operator">=</span>  parse<span class="token punctuation">.</span>cc<span class="token punctuation">.</span>ccdd<span class="token punctuation">.</span>mw<span class="token punctuation">.</span><span class="token function">lusfi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span>

</code></pre></div><p><strong>Object.assign()</strong> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><ul><li>demo</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: Object { a: 1, b: 4, c: 5 }</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: Object { a: 1, b: 4, c: 5 }</span>

</code></pre></div><ul><li>语法 <code>Object.assign(target, ...sources)</code></li><li>参数 <strong>target</strong> 目标对象。<strong>sources</strong> 源对象。</li><li>返回值 目标对象</li></ul><h4 id="数组的处理" tabindex="-1"><a class="header-anchor" href="#数组的处理" aria-hidden="true">#</a> 数组的处理</h4><ul><li><strong>Object.assign可以用来处理数组，但是会把数组视为对象</strong>。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// [4, 5, 3]</span>
</code></pre></div><ul><li>上面代码中，Object.assign把数组视为属性名为 <code>0、1、2 </code>的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。</li></ul><h2 id="object-defineproperty" tabindex="-1"><a class="header-anchor" href="#object-defineproperty" aria-hidden="true">#</a> Object.defineProperty()</h2><p><code>**Object.defineProperty()**</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p>`,22),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"Object",-1),d=n("code",null,"Object",-1),g=s(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">&#39;property1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
 <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

object1<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">;</span>
<span class="token comment">// throws an error in strict mode</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span>property1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: 42</span>
</code></pre></div><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>Object.defineProperty(obj, prop, descriptor)
</code></pre></div>`,3);function b(h,f){const t=o("ExternalLinkIcon");return e(),c("div",null,[r,n("p",null,[a("**备注：**应当直接在 "),n("a",i,[k,l(t)]),a(" 构造器对象上调用此方法，而不是在任意一个 "),d,a(" 类型的实例上调用。")]),g])}const y=p(u,[["render",b],["__file","es602_ojdect.html.vue"]]);export{y as default};
