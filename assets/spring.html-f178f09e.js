import{_ as a,p as n,q as s,a1 as t}from"./framework-d81ad7e5.js";const p="/assets/acb-2a705370.png",e="/img/wps1.jpg",o={},l=t('<h1 id="spring核心思想" tabindex="-1"><a class="header-anchor" href="#spring核心思想" aria-hidden="true">#</a> Spring核心思想</h1><p><img src="'+p+`" alt="alrt"></p><ul><li>ioc <ul><li>依赖查找</li><li>依赖注入</li><li>依赖来源</li></ul></li><li>aop <ul><li>动态代理</li><li>cglib</li><li>proxy</li></ul></li><li>声明式事务 <ul><li>aspectJ</li></ul></li></ul><h2 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc" aria-hidden="true">#</a> IoC</h2><p>IOC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式之一是DI。 Spring的配置文件是用于指导Spring工厂进行Bean的生产、依赖关系注入及Bean实例分发的“图纸”，它是一个或多个标准的XML文档</p><ul><li>spring ioc container spring ioc container 管理一个或多个bean，bean来自xml中对bean定义的元数据(configuration metadata)</li></ul><h2 id="构造器注入-constructor-arg" tabindex="-1"><a class="header-anchor" href="#构造器注入-constructor-arg" aria-hidden="true">#</a> 构造器注入 constructor-arg</h2><p>Person的构造器</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">Food</span> food<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">=</span> food<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><ul><li>对其他Bean的引用</li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>food<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>food<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>food<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.osvue.Food<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><p>spring为bean提供了6种作用域，其中4种只有在web-aware的ApplicationContext种才有用。用户也可以创建自定义的作用域。</p><ul><li><strong>singleton 、prototype 、websocket、request、session、application</strong></li></ul><ul><li>singleton scope 单例作用域</li></ul><p>每一个类，在一个容器内只能产生一个实例</p><ul><li>prototype scope 原型作用域</li></ul><p>该bean每次被注入，或者使用getBean()方法获取时，都返回一个新的实例。</p><ul><li>Request scope</li></ul><p>该作用域的bean，在每个HTTP request都会新建一个实例，当一个request结束后，该实例也会被丢弃。</p><ul><li>Session scope</li></ul><p>某一个用户在一段时间内，会使用同一个session，session有超时时间，过了超时时间则session失效。不同用户使用不同的session。</p><ul><li>Application scope</li></ul><p>该作用域的bean，每一个application会创建一个</p><ul><li>MVC下Spring的单例</li></ul><p>想在一个singleton内多次调用短存活时间的bean（propotype、request、session等），希望调用的是不同的实例，那么就需要使用AOP proxy技术</p><h2 id="线程安全问题" tabindex="-1"><a class="header-anchor" href="#线程安全问题" aria-hidden="true">#</a> 线程安全问题</h2><p>业务对象并没有做线程的并发限制，因此不会出现各个线程之间的等待问题，或是死锁问题</p><p>MVC中的实体bean不是单例的</p><ul><li>成员变量</li></ul><p>在并发访问的时候这些成员变量将会是并发线程中的共享对象，也是影响线程安全的重要因素</p><ul><li>引用类型的成员</li></ul><p>其中引用类型的成员变量即我们在controller中注入的service，在service中注入的dao，这里将其定义为成员变量主</p><p>要是为了实例化进而调用里面的业务方法，在这些类中一般不会有全局变量，因此只要我们的业务方法不含有独立的</p><p>全局变量即使是被多线程共享，也是线程安全的。</p><p>Controller service dao 层中的业务类是多线程共享的，但是每个线程在处理数据的时候具体处理的数据是在每个线程中各自有一份。</p><ul><li>controller层</li></ul><p>l final类型 线程安全</p><p>l 成员变量 有状态数据有线程安全问题</p><h2 id="循环依赖的bean" tabindex="-1"><a class="header-anchor" href="#循环依赖的bean" aria-hidden="true">#</a> 循环依赖的bean</h2><ul><li>构造器注入循环依赖</li></ul><p>创建3个类</p><p>循环引用属性</p><p>A类中 -&gt; B类的一引用 - C类</p><p>当循环依赖的bean都是通过 <strong>构造器注入依赖</strong> 的时候，无论这些bean是singleton还是prototype，在获取bean的时候都会失败。</p><ul><li>通过属性注入</li></ul><p>l 循环依赖的bean都是singleton 成功</p><p>l 循环依赖的bean都是prototype 失败</p><p>l 同时有singleton和prototype 当先获取的那个bean是singleton时，就会成功，否则失败</p><p>l <img src="`+e+`" alt="img"></p><p>当Spring容器在创建A时，会发现其引用了B，从而会先去创建B。同样的，创建B时，会先去创建C，而创建C时，又先去创建A。最后A、B、C之间互相等待，谁都没法创建成功</p><h3 id="ioc依赖查找" tabindex="-1"><a class="header-anchor" href="#ioc依赖查找" aria-hidden="true">#</a> ioc依赖查找</h3><ul><li>ListableBeanFactory</li></ul><ul><li>集合bean对象查找</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperUser</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lookupByAnnotationType</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ListableBeanFactory</span> listableBeanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ListableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> listableBeanFactory<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Super</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;查找标注 @Super 所有的 User 集合对象：&quot;</span> <span class="token operator">+</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3 id="ioc依赖注入" tabindex="-1"><a class="header-anchor" href="#ioc依赖注入" aria-hidden="true">#</a> ioc依赖注入</h3>`,56),c=[l];function i(u,r){return n(),s("div",null,c)}const d=a(o,[["render",i],["__file","spring.html.vue"]]);export{d as default};
