import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<table><thead><tr><th>注解</th><th>支持的类型</th><th>支持的请求类型</th><th>支持的Content-Type</th><th>请求示例</th></tr></thead><tbody><tr><td>@PathVariable</td><td>url</td><td>GET</td><td>所有</td><td>/test/{id}</td></tr><tr><td>@RequestParam</td><td>url</td><td>GET</td><td>所有</td><td>/test?id=1</td></tr><tr><td>@RequestBody</td><td>Body</td><td>POST/PUT/DELETE/PATCH</td><td>json</td><td>{“id”:1}</td></tr></tbody></table><blockquote><p>复杂参数接收,功能实现 <br> 单个参数就写个属性<br> 有角标数组的就写个集合<br> 参数用对象的就<br> 在对象中再建立一个对象<br></p></blockquote><h2 id="post" tabindex="-1"><a class="header-anchor" href="#post" aria-hidden="true">#</a> POST</h2><h2 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam" aria-hidden="true">#</a> @RequestParam</h2><blockquote><p><strong>接收JSON对象</strong></p></blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">testPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> queryData <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">jflb</span><span class="token operator">:</span> <span class="token string">&quot;测试spring MVC 的参数接收!&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">zlay</span><span class="token operator">:</span> <span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">bir</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ysCode</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;0123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4567&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/mvc/queryTests&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> queryData<span class="token punctuation">,</span>
        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>后台 使用 <strong>@RequestParam</strong></p></blockquote><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/queryTests&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL_VALUE</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryActionByDisputes</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> jflb<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> zlay<span class="token punctuation">,</span>
			<span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;ysCode[]&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ysCode<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Date</span> bir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jflb <span class="token operator">+</span> zlay <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ysCode<span class="token punctuation">)</span><span class="token operator">+</span>bir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><h2 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody" aria-hidden="true">#</a> @RequestBody</h2><blockquote><p><strong>只能接收JSON字符串，因此 Content-Type需要更改,同时 data也要更改</strong></p></blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">testPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> queryData <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;测试spring MVC 的参数接收!&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">bir</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arrCode</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;0123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4567&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> queryUrl <span class="token operator">=</span> <span class="token string">&#39;/mvc/queryTest&#39;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> queryUrl<span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>queryData<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">&#39;application/json;charset=UTF-8&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p>后台 使用 <strong>@RequestBody</strong></p></blockquote><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/queryTest&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL_VALUE</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryActionByDispute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> queryMape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queryMape<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 自定义VO </span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">McVO</span> <span class="token punctuation">{</span>
		<span class="token comment">// 省略 getter setter  </span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Date</span> bir<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arrCode<span class="token punctuation">;</span>
	
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/queryTest&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL_VALUE</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useVo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">McVO</span> vo<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><h3 id="接收list-array" tabindex="-1"><a class="header-anchor" href="#接收list-array" aria-hidden="true">#</a> 接收List&amp;Array</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span>   array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span>index<span class="token punctuation">,</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;uuid&#39;</span><span class="token operator">+</span>index<span class="token punctuation">,</span>
          <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;hello--&gt;&#39;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">age</span><span class="token operator">:</span>index<span class="token operator">*</span><span class="token number">8</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
        
    <span class="token punctuation">}</span>
	 
	<span class="token keyword">var</span> queryUrl <span class="token operator">=</span> <span class="token string">&#39;/info&#39;</span>
	$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> queryUrl<span class="token punctuation">,</span>
        <span class="token literal-property property">contentType</span><span class="token operator">:</span> <span class="token string">&#39;application/json;charset=UTF-8&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
 	    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 另一种方式  可以携带多余的数据 , 例如 token</span>


$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//默认传输的内容类型为 key-value 型,后台使用数组、List 接收参数时,</span>
    <span class="token comment">// headers 中必须指定内容类型为 json 类型，否则会报415错误</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json;charset=utf8&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;TOKEN&#39;</span><span class="token operator">:</span><span class="token string">&#39;UUID_RE_KEY_89898078&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8080/user/save5&quot;</span><span class="token punctuation">,</span>
    <span class="token comment">//指定 json 类型后，传输的数据理所当然应该是 json 格式。</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR:&quot;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div><h4 id="后台使用-requestbody" tabindex="-1"><a class="header-anchor" href="#后台使用-requestbody" aria-hidden="true">#</a> 后台使用 @Requestbody</h4><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@ResponseBody</span>
	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">ResultBean</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">ResultBean</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><h2 id="get请求" tabindex="-1"><a class="header-anchor" href="#get请求" aria-hidden="true">#</a> get请求</h2><blockquote><p>（接收JSON对象、对象中包含数组）</p></blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">testPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> queryData <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">&quot;测试spring MVC 的参数接收!&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">bir</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arrCode</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;0123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4567&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> queryUrl <span class="token operator">=</span> <span class="token string">&#39;/mvc/queryTests&#39;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> queryUrl<span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> queryData<span class="token punctuation">,</span>
        <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/queryTests&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL_VALUE</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryActionByDisputes</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> info<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>
			<span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;arrCode[]&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arrCode<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Date</span> bir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token punctuation">(</span>arrCode<span class="token punctuation">)</span><span class="token operator">+</span>bir<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p><strong>@RequestParam</strong> POST请求 @RequestParam：</p><ul><li><p>用来处理（前端）Content-Type: 为 application/x-www-form-urlencoded或者form-data编码的内容</p></li><li><p>该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定； 注意这里Headers里不能以application/json作为Content-type，否则后台也接收不到请求</p></li></ul><ol><li><strong>@RequestParam 来自于requestHeader</strong>中，即请求头，</li><li>但是却不是JSON，这个一般就是在ajax里面没有声明(别人调用)contentType的时候，为默认的</li></ol><p><strong>@RequestBody</strong></p><ol><li>该注解常用来处理Content-Type: 不是<code>application/x-www-form-urlencoded</code>编码的内容，例如application/json, application/xml等； 前端规定的是raw方式，那么就需要使用@RequestBody接收参数，注意这里Headers里需要以application/json作为Content-type</li></ol><p><code>@Requestbody 来自于requestBody</code>中，即请求体中。当前端或者别人传入JSON数据给你时，使用此注解，就已将传入给你的字段或者属性将与你所创建的实体类绑定到一起，不相信的可以Debug测试看看传入参数是否在这个实体里面。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><table><thead><tr><th>@RequestParam</th><th>@RequestBody</th></tr></thead><tbody><tr><td>contentType：‘application/x-www-form-urlencoded’ 可以不用定义，contentType默认值</td><td>contentType: &#39;application/json;charset=UTF-8&#39; 必须定义，处理非Content-Type: application/x-www-form-urlencoded编码格式的数据</td></tr><tr><td>GET、POST</td><td>POST</td></tr><tr><td>处理地址栏传递过来的数据</td><td>处理HttpEntity传递过来的数据</td></tr><tr><td>可以接收JSON字符串，也可以接收JSON对象</td><td>只接收JSON字符串</td></tr></tbody></table><ul><li>未定义Content-type的类型</li></ul><p>Jquery默认使用<code>application/x-www-form-urlencoded</code>类型（<code>application/x-www-form-urlencoded</code> 把JSON对象数据转换成一个字串）。那么意思就是SpringMVC的@RequestParam注解，Servlet的request.getParameter是可以接受到以这种格式传输的JSON对象的。</p><ul><li><p>使用@RequestBody注解</p><p>前台的Content-Type必须要改为<code>application/json</code>，如果没有更改，前台会报错415（Unsupported Media Type）。后台日志就会报错Content type ‘application/x-www-form-urlencoded;charset=UTF-8’ not supported</p></li><li><p>前台报400的错：原因：GET方式添加了<strong>contentType: &#39;application/json;charset=UTF-8&#39;</strong></p></li><li><p>@RequestParam 它的作用和我们Servlet中的request.getParameter是基本相同的</p></li></ul><h2 id="传递数组" tabindex="-1"><a class="header-anchor" href="#传递数组" aria-hidden="true">#</a> 传递数组：</h2><p>（1）post请求，JSON对象传递，@RequestParam 接收</p><blockquote><p>最重要：@RequestParam接收的参数说明是数组 <strong>@RequestParam(&quot;ysCode[]&quot;)</strong> List&lt;String&gt; ysCode</p></blockquote><p>（2）post请求  JSON字符串传递  @RequestBody接收</p><p>（3）get请求，JSON对象传递，@RequestParam 接收</p><blockquote><p>最重要：@RequestParam接收的参数说明是数组  <strong>@RequestParam(&quot;ysCode[]&quot;)</strong> List&lt;String&gt; ysCode</p></blockquote><p>（4）post请求  JSON字符串传递  @RequestParam 接收</p><ul><li>@RequestParam,是获取前端传递给后端的参数，可以是get方式，也可以是post方式。其中如果前端传递的参数和后端你接受的参数起的名字字段是一致的可以省略不写，也可以直接写 <strong>@RequestParam String title</strong> ,如果不一致一定要完整写，不然获取不到</li></ul><h2 id="content-type" tabindex="-1"><a class="header-anchor" href="#content-type" aria-hidden="true">#</a> Content-Type</h2><table><thead><tr><th>常见的媒体格式类型如下</th><th>以application开头的媒体格式类型</th><th>媒体格式是上传文件</th></tr></thead><tbody><tr><td>text/html ： HTML格式 <br> text/plain ：纯文本格式 <br> text/xml ： XML格式 <br> image/png：png图片格式</td><td>application/xhtml+xml ：XHTML格式 <br> application/xml ： XML数据格式 <br> application/atom+xml ：Atom XML聚合格式 <br> application/json ： JSON数据格式 <br> application/pdf ：pdf格式 <br>  application/msword ： Word文档格式 <br> application/octet-stream ： 二进制流数据（如常见的文件下载）<br> application/x-www-form-urlencoded ： form 表单 encType=&quot;&quot; 中默认的encType，form表单数据被编 码 为key/value格式发送到服务器（表单默认的提交数据的格式）</td><td>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</td></tr></tbody></table>`,42),e=[o];function c(l,u){return a(),s("div",null,e)}const i=n(p,[["render",c],["__file","vmvc01_req.html.vue"]]);export{i as default};
