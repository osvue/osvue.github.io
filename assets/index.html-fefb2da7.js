import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},e=t(`<h1 id="加密解密" tabindex="-1"><a class="header-anchor" href="#加密解密" aria-hidden="true">#</a> 加密解密</h1><h2 id="对称加密算法" tabindex="-1"><a class="header-anchor" href="#对称加密算法" aria-hidden="true">#</a> 对称加密算法</h2><ul><li>加密和解密用到的密钥是相同的，这种加密方式加密速度非常快，适合经常发送数据的场合。缺点是密钥的传输比较麻烦。</li></ul><h2 id="非对称加密算法" tabindex="-1"><a class="header-anchor" href="#非对称加密算法" aria-hidden="true">#</a> 非对称加密算法</h2><ul><li>加密和解密用的密钥是不同的，这种加密方式是用数学上的难解问题构造的，通常加密解密的速度比较慢，适合偶尔发送数据的场合。优点是密钥传输方便。常见的非对称加密算法为RSA、ECC和EIGamal。</li></ul><h2 id="aes简介" tabindex="-1"><a class="header-anchor" href="#aes简介" aria-hidden="true">#</a> AES简介</h2><ul><li>高级加密标准(AES,Advanced Encryption Standard)为最常见的对称加密算法(微信小程序加密传输就是用这个加密算法的)。对称加密算法也就是加密和解密用相同的密钥</li></ul><h4 id="实际开发中-一般是通过rsa加密aes的密钥-传输到接收方-接收方解密得到aes密钥-然后发送方和接收方用aes密钥来通信。" tabindex="-1"><a class="header-anchor" href="#实际开发中-一般是通过rsa加密aes的密钥-传输到接收方-接收方解密得到aes密钥-然后发送方和接收方用aes密钥来通信。" aria-hidden="true">#</a> 实际开发中，一般是通过RSA加密AES的密钥，传输到接收方，接收方解密得到AES密钥，然后发送方和接收方用AES密钥来通信。</h4><ul><li>ECB 加密</li><li>CBC 加密 增加了iv 向量；</li><li>sm4234 sm234</li></ul><h2 id="base-64" tabindex="-1"><a class="header-anchor" href="#base-64" aria-hidden="true">#</a> base 64</h2><ul><li>Base64是一种能将任意Binary资料用64种字元组合成字串的方法，而这个Binary资料和字串资料彼此之间是可以互相转换的</li><li>Base64除了能将Binary资料可视化之外，也常用来表示字串加密过后的内容</li></ul><h3 id="java-8的java-util套件" tabindex="-1"><a class="header-anchor" href="#java-8的java-util套件" aria-hidden="true">#</a> Java 8的java.util套件</h3><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;你好 世界&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Decoder</span> decoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Encoder</span> encoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> textByte <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//编码</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> encodedText <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>textByte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//解码</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><h2 id="des" tabindex="-1"><a class="header-anchor" href="#des" aria-hidden="true">#</a> DES</h2><div class="language-java" data-ext="java"><pre class="language-java"><code>       <span class="token comment">//DES对称加密/解密</span>
        <span class="token comment">//要求key至少长度为8个字符</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * DES 加密
         *
         * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">}</span>
         */</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode_bytes <span class="token operator">=</span> <span class="token class-name">EnDecoderUtil<span class="token punctuation">.</span>DESEncrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//----&gt;        通过 base 64 编码----&gt;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>encode_bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//解密</span>
         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode_bytes <span class="token operator">=</span> <span class="token class-name">EnDecoderUtil<span class="token punctuation">.</span>DESDecrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> encode_bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decode_bytes<span class="token punctuation">,</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//----&gt;        反向解码</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&quot;/M5qXTK2wdlYT8iOCiu5OQ==&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypt <span class="token operator">=</span> <span class="token class-name">EnDecoderUtil<span class="token punctuation">.</span>DESDecrypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> decode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;EnDecoderUtil.DESDecrypt(key,bytes) = &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">,</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,15),o=[e];function c(l,u){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
