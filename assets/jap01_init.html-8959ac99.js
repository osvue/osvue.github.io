import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const e={},o=t(`<h1 id="springdata-jpa进阶使用" tabindex="-1"><a class="header-anchor" href="#springdata-jpa进阶使用" aria-hidden="true">#</a> SpringData Jpa进阶使用</h1><h2 id="官方文档" tabindex="-1"><a class="header-anchor" href="#官方文档" aria-hidden="true">#</a> 官方文档：</h2><p>https://docs.spring.io/spring-data/jpa/docs/2.1.8.RELEASE/reference/html/</p><h2 id="接口继承" tabindex="-1"><a class="header-anchor" href="#接口继承" aria-hidden="true">#</a> 接口继承</h2><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>JpaRepository</strong>接口中已经实现了常用的增删改查分页查询等功能</p><h3 id="控制台显示sql" tabindex="-1"><a class="header-anchor" href="#控制台显示sql" aria-hidden="true">#</a> 控制台显示SQL</h3><p>application.properties 中配置<code>spring.jpa.show-sql=true</code></p><h2 id="自定义查询" tabindex="-1"><a class="header-anchor" href="#自定义查询" aria-hidden="true">#</a> 自定义查询</h2><table><thead><tr><th style="text-align:left;">关键字</th><th>意义</th></tr></thead><tbody><tr><td style="text-align:left;">And</td><td>等价于 SQL 中的 and 关键字，比如 findByUsernameAndPassword(String user, Striang pwd)；</td></tr><tr><td style="text-align:left;">Or</td><td>等价于 SQL 中的 or 关键字，比如 findByUsernameOrAddress(String user, String addr)；</td></tr><tr><td style="text-align:left;">Between</td><td>等价于 SQL 中的 between 关键字，比如 findBySalaryBetween(int max, int min)；</td></tr><tr><td style="text-align:left;">LessThan</td><td>等价于 SQL 中的 &quot;&lt;&quot;，比如 findBySalaryLessThan(int max)；</td></tr><tr><td style="text-align:left;">GreaterThan</td><td>等价于 SQL 中的&quot;&gt;&quot;，比如 findBySalaryGreaterThan(int min)；</td></tr><tr><td style="text-align:left;">IsNull</td><td>等价于 SQL 中的 &quot;is null&quot;，比如 findByUsernameIsNull()；</td></tr><tr><td style="text-align:left;">IsNotNull</td><td>等价于 SQL 中的 &quot;is not null&quot;，比如 findByUsernameIsNotNull()；</td></tr><tr><td style="text-align:left;">NotNull</td><td>与 IsNotNull 等价；</td></tr><tr><td style="text-align:left;">Like</td><td>等价于 SQL 中的 &quot;like&quot;，比如 findByUsernameLike(String user)；</td></tr><tr><td style="text-align:left;">NotLike</td><td>等价于 SQL 中的 &quot;not like&quot;，比如 findByUsernameNotLike(String user)；</td></tr><tr><td style="text-align:left;">OrderBy</td><td>等价于 SQL 中的 &quot;order by&quot;，比如 findByUsernameOrderBySalaryAsc(String user)；</td></tr><tr><td style="text-align:left;">Not</td><td>等价于 SQL 中的 &quot;！ =&quot;，比如 findByUsernameNot(String user)；</td></tr><tr><td style="text-align:left;">In</td><td>等价于 SQL 中的 &quot;in&quot;，比如 findByUsernameIn(Collection &lt;String &gt; userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；</td></tr><tr><td style="text-align:left;">NotIn</td><td>等价于 SQL 中的 &quot;not in&quot;，比如 findByUsernameNotIn(Collection &lt;String &gt; userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；</td></tr></tbody></table><h2 id="自定义sql-query注解" tabindex="-1"><a class="header-anchor" href="#自定义sql-query注解" aria-hidden="true">#</a> 自定义SQL @Query注解</h2><h3 id="占位符" tabindex="-1"><a class="header-anchor" href="#占位符" aria-hidden="true">#</a> 占位符</h3><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccountInfo</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> 

<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select a from AccountInfo a where a.accountId = ?1&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token class-name">AccountInfo</span> <span class="token function">findByAccountId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> accountId<span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select a from AccountInfo a where a.balance &gt; ?1&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccountInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByBalanceGreaterThan</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> balance<span class="token punctuation">,</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><h3 id="参数名" tabindex="-1"><a class="header-anchor" href="#参数名" aria-hidden="true">#</a> 参数名</h3><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccountInfo</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> 

    <span class="token keyword">public</span> <span class="token class-name">AccountInfo</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">AccountInfo</span> accountInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;from AccountInfo a where a.accountId = :id&quot;</span><span class="token punctuation">)</span> 
    <span class="token keyword">public</span> <span class="token class-name">AccountInfo</span> <span class="token function">findByAccountId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token class-name">Long</span> accountId<span class="token punctuation">)</span><span class="token punctuation">;</span> 

    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;from AccountInfo a where a.balance &gt; :balance&quot;</span><span class="token punctuation">)</span> 
    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AccountInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByBalanceGreaterThan</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;balance&quot;</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> balance<span class="token punctuation">,</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><h3 id="更新操作" tabindex="-1"><a class="header-anchor" href="#更新操作" aria-hidden="true">#</a> 更新操作</h3><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span> 
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;update AccountInfo a set a.salary = ?1 where a.salary &lt; ?2&quot;</span><span class="token punctuation">)</span> 
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">increaseSalary</span><span class="token punctuation">(</span><span class="token keyword">int</span> after<span class="token punctuation">,</span> <span class="token keyword">int</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="直接使用native-sql" tabindex="-1"><a class="header-anchor" href="#直接使用native-sql" aria-hidden="true">#</a> 直接使用Native SQL</h3><p>设置属性 <strong>nativeQuery = true</strong></p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,20),p=[o];function c(l,i){return a(),s("div",null,p)}const r=n(e,[["render",c],["__file","jap01_init.html.vue"]]);export{r as default};
