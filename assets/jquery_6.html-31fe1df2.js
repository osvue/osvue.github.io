import{_ as o,M as e,p as c,q as u,R as a,t as n,N as p,a1 as s}from"./framework-d81ad7e5.js";const l={},i=s(`<h2 id="jquery-对象和-dom-对象" tabindex="-1"><a class="header-anchor" href="#jquery-对象和-dom-对象" aria-hidden="true">#</a> jQuery 对象和 DOM 对象</h2><ul><li>DOM 对象：通过原生 javascript（如<code>getElementsByTagName</code>或<code>getElementId</code>）获取的 html 节点。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取DOM对象</span>
<span class="token keyword">var</span> html <span class="token operator">=</span> dom<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span> <span class="token comment">// 获取DOM元素内的HTML代码</span>
</code></pre></div><ul><li>jQuery 对象：被 jQuery 包装过的 DOM 对象。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jq <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取jQuery对象</span>
<span class="token keyword">var</span> html <span class="token operator">=</span> jq<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取jQuery对象内的HTML代码</span>
</code></pre></div><blockquote><p>不能交换使用 jQuery 对象、DOM 对象上的属性，例如上面代码中的<code>innerHTML</code>与<code>html()</code>。</p></blockquote><h2 id="jquery-对象-dom-对象" tabindex="-1"><a class="header-anchor" href="#jquery-对象-dom-对象" aria-hidden="true">#</a> jQuery 对象-&gt;DOM 对象</h2><p>jQuery 提供了 2 种转换 DOM 对象的方法：</p><p>（1）jQuery 对象是一个类似于数组的对象，因此可以通过数组运算符<code>[]</code>获取指定索引的 DOM 对象。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jq <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jQuery对象</span>
<span class="token keyword">var</span> dom <span class="token operator">=</span> jq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// DOM对象</span>
</code></pre></div><p>（2）通过 jQuery 本身提供的<code>get(index)</code>方法来获取指定 index 的对象。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jq <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jQuery对象</span>
<span class="token keyword">var</span> dom <span class="token operator">=</span> jq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// DOM对象</span>
</code></pre></div><h2 id="dom-对象-jquery-对象" tabindex="-1"><a class="header-anchor" href="#dom-对象-jquery-对象" aria-hidden="true">#</a> DOM 对象-&gt;jQuery 对象</h2><p>将 DOM 对象通过<code>$()</code>函数包装起来，就可以获得 jQuery 对象。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> jq <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>可以考虑使用****作为前缀为 jQuery 对象进行命名，例如上面代码中的变量\`jq\`可以命名为\`jq\`。</p></blockquote><h2 id="jquery-选择器性能" tabindex="-1"><a class="header-anchor" href="#jquery-选择器性能" aria-hidden="true">#</a> jQuery 选择器性能</h2><p>提升选择器性能的有效途径是为选择器指定上下文，并以上下文为基础使用<code>first()</code>、<code>last()</code>、<code>find()</code>、<code>filter()</code>、<code>hasClass()</code>等 jQuery 筛选 API。</p><p>下面对 jQuery 选择器的性能由高向低进行排序：</p><p>1、ID 选择器</p><p>底层通过调用<code>document.getElementById()</code>实现。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>2、标签选择器</p><p>底层通过调用<code>document.getElementsByTagName()</code>实现。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>3、类选择器</p><p>底层通过调用<code>document.getElementsByClassName()</code>实现。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>4、属性及其它选择器</p><p>底层通过对 HTML 字符串进行正则表达式匹配来实现。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;[contenteditable]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>jQuery 底层有使用原生<code>document.querySelectorAll()</code>，可以有效提升 IE8 及以上浏览器当中选择器的性能。</p></blockquote>`,32),k={href:"http://sizzlejs.com/",target:"_blank",rel:"noopener noreferrer"},r=a("strong",null,"从右到左",-1),d=s(`<h2 id="缓存常用的-jquery-选择器对象" tabindex="-1"><a class="header-anchor" href="#缓存常用的-jquery-选择器对象" aria-hidden="true">#</a> 缓存常用的 jQuery 选择器对象</h2><p>将需要常用的 jQuery 选择器对象赋值给一个局部或全局变量，是有效提升 jQuery 运行性能的良好开端。</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> $jq <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$jq<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;div.tree&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$jq<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;[contenteditable].test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$jq<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;.demo.test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="减少循环时的-dom-操作" tabindex="-1"><a class="header-anchor" href="#减少循环时的-dom-操作" aria-hidden="true">#</a> 减少循环时的 DOM 操作</h2><p>在<code>for</code>、<code>while</code>、<code>$.each()</code>等循环语句中，尽量减少 DOM 操作的次数，最好先将模板在循环中组装完成之后再一次性插入 DOM。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> $app <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  template <span class="token operator">+=</span> <span class="token string">&quot;&lt;p&gt;This is a paragraph!&lt;p&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$app<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="使用原生方式处理-jquery-数组" tabindex="-1"><a class="header-anchor" href="#使用原生方式处理-jquery-数组" aria-hidden="true">#</a> 使用原生方式处理 jQuery 数组</h2><p>jQuery 选择器的结果是一个数组类型的对象，建议使用<code>for</code>或<code>while</code>等原生语法对其进行处理，而非 jQuery 封装过的<code>$.each()</code>。</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">4</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">5</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token keyword">var</span> $demo <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $demo<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 通过数组索引提取后，jQuery对象转换成DOM对象，所以这里使用了DOM对象的innerHTML属性</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>$demo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以通过关键字<code>length</code>检查数组长度，从而判断 jQuery 对象是否存在。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> $demo <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>$demo<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do something</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="尽可能使用事件委托" tabindex="-1"><a class="header-anchor" href="#尽可能使用事件委托" aria-hidden="true">#</a> 尽可能使用事件委托</h2><p>jQuery3.x 版本继续简化了事件委托函数，仅剩下<code>on()</code>、<code>off()</code>、<code>one()</code>、<code>trigger()</code>、<code>triggerHandler()</code>五个事件处理函数。</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">parent</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>current<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">current</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">child</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">/* on可以用于处理冒泡事件，但是无法捕获事件 */</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#current&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;current is clicked!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#child&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// on可以处理向上冒泡的click事件</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#parent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// on无法捕获父级元素的click事件</span>
</code></pre></div><blockquote><p>单页面场景下绑定的<code>on</code>事件，必须在路由切换时通过<code>off</code>解除事件绑定，否则会造成大量无用的事件句柄堆积在内存。</p></blockquote><h2 id="通过-extend-封装可复用代码" tabindex="-1"><a class="header-anchor" href="#通过-extend-封装可复用代码" aria-hidden="true">#</a> 通过 extend()封装可复用代码</h2><ul><li><code>jQuery.extend()</code>：拓展**全局对象**，例如下面例子中的\`.test()<code>，</code>$.demo()\`;</li><li><code>jQuery.fn.extend()</code>：拓展<strong>jQuery 对象数组</strong>，例如下面例子中的<code>$(&quot;div&quot;).test()</code>，<code>$(&quot;div&quot;).demo()</code>;</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 标准写法 */</span>
  $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;$.extend&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 简便写法 */</span>
  $<span class="token punctuation">.</span><span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回全局对象$，便于链式调用</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">/* 标准写法 */</span>
  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;$.fn.extend&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* 简便写法 */</span>
  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回jQuery对象数组，便于链式调用</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>两种方式的最大区别在于自定义方法所属的宿主对象不同。</p></blockquote><h2 id="使用-html5-的-data-属性绑定数据" tabindex="-1"><a class="header-anchor" href="#使用-html5-的-data-属性绑定数据" aria-hidden="true">#</a> 使用 HTML5 的 data 属性绑定数据</h2><p>通过 HTML5 提供的 data 属性可以更加方便的完成数据绑定，特别是在不借助<code>handlebar</code>、<code>lodash.template()</code>等模板引擎的时候。</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>13.2<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-string</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uinika<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-boolean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-null</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>null<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-undefine</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>undefine<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">data-object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>{&quot;name&quot;: &quot;hank&quot;}<span class="token punctuation">&#39;</span></span>
  <span class="token attr-name">data-array</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>[&quot;demo1&quot;, &quot;demo2&quot;]<span class="token punctuation">&#39;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;boolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;undefine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="尽量使用原生-javascript" tabindex="-1"><a class="header-anchor" href="#尽量使用原生-javascript" aria-hidden="true">#</a> 尽量使用原生 JavaScript</h2><p>在不影响浏览器兼容性的情况下，尽量使用 JavaScript 原生 API。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> $demo <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;.demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存选择器</span>

$demo<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;:checked&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过jQuery封装过的is()方法</span>
$demo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">;</span> <span class="token comment">// 通过DOM原生的checked属性</span>

$demo<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过jQuery封装过的css()方法</span>
$demo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 通过DOM原生的style.color属性</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过jQuery新建&lt;p&gt;标签</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过DOM原生的createElement方法</span>
</code></pre></div><h2 id="document-ready" tabindex="-1"><a class="header-anchor" href="#document-ready" aria-hidden="true">#</a> $(document).ready()</h2><p>该函数内的代码会在 DOM 加载完毕后，内容（<em>如图片</em>）加载完成前执行；生产环境中，尽可能在每个 js 文件下使用该函数。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 标准写法</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 简化写法</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>JavaScript 原生的<code>window.onload()</code>只会在 DOM 和图片等资源全部加载完成之后才执行。</p></blockquote><h2 id="延迟对象-deferred" tabindex="-1"><a class="header-anchor" href="#延迟对象-deferred" aria-hidden="true">#</a> 延迟对象$.Deferred()</h2><p><code>Deferred()</code>是一个工厂函数，用来建立新的 deferred 对象（<em>deferred [dɪ’fɜ:d] adj.延缓的</em>），该对象上可以注册多个回调函数队列，这些函数的执行依赖于任意同步或异步函数的执行结果（<code>sucess</code>或<code>failure</code>）。该对象可以视为 jQuery 版本的<strong>Promise</strong>实现，可以更加优雅的解决 JavaScript 回调嵌套的问题。</p>`,31),g={href:"http://wiki.commonjs.org/wiki/Promises/A",target:"_blank",rel:"noopener noreferrer"},m=s(`<ul><li><code>deferred.notify()</code> 触发 Deferred 上<em>progress</em>相关的回调函数。</li><li><code>deferred.resolve()</code> Resolve 一个 Deferred 对象，并触发<em>resolve</em>状态相关的回调函数。</li><li><code>deferred.reject()</code> Reject 一个 Deferred 对象，并触发<em>reject</em>状态相关的回调函数。</li><li><code>deferred.progress()</code> 该函数在 Deferred 对象生成<em>progress</em>通知时被调用。</li><li><code>deferred.done()</code> 该函数在 Deferred 对象被<em>resolve</em>时调用。</li><li><code>deferred.fail()</code> 该函数在 Deferred 对象被<em>rejecte</em>时调用。</li><li><code>deferred.catch()</code> 该函数在 Deferred 对象被<em>rejecte</em>时调用。</li><li><code>deferred.then()</code> Deferred 对象<em>resolved</em>、<em>rejected</em>、<em>progress</em>时，都会被触发的回调函数。</li><li><code>deferred.promise()</code> 返回一个延迟的 Promise 对象。</li><li><code>&amp;.when()</code> 提供一种基于零个或多个 Thenable 对象执行回调函数的方式，其参数是一个代表异步事件的 Deferred 对象。</li><li><code>$(&quot;selector&quot;).promise()</code> 返回一个 Promise 对象去观察所有绑定到集合、队列的确定类型行为是否已经完成。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> deferred <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">Deferred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">demo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">deferred</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// deferred.notify();</span>
    <span class="token comment">// deferred.reject();</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> deferred<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

$<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token function">demo</span><span class="token punctuation">(</span>deferred<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;then&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;catch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
输出结果：
then
done
*/</span>
</code></pre></div><blockquote><p><code>$.ajax()</code>返回的就是一个 deferred 对象。</p></blockquote>`,3);function q(f,v){const t=e("ExternalLinkIcon");return c(),u("div",null,[i,a("blockquote",null,[a("p",null,[n("jQuery 作者已经将选择器引擎独立为"),a("a",k,[n("Sizzle"),p(t)]),n("库，而 Sizzle 会按照"),r,n("的顺序来解析选择器字符串，从而提高查询效率，缩小查找范围和遍历次数。")])]),d,a("blockquote",null,[a("p",null,[n("jQuery 的 Deferred 对象是基于"),a("a",g,[n("CommonJS Promises/A"),p(t)]),n("规范设计的。")])]),m])}const h=o(l,[["render",q],["__file","jquery_6.html.vue"]]);export{h as default};
