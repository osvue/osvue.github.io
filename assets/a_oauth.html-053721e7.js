import{_ as n,p as s,q as a,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<ul><li>项目创建成功后，Spring Security 的依赖就添加进来了，在 Spring Boot 中我们加入的是 <code>spring-boot-starter-security</code> ，其实主要是这两个：</li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>

    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>
org.springframework.boot
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>

    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>
spring-boot-starter-security
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>

    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>
org.springframework.boot
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>

    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>
spring-boot-starter-web
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>项目创建成功后，我们添加一个测试的 HelloController，内容如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
publicclass <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>接下来什么事情都不用做，我们直接来启动项目。</p><p>在项目启动过程中，我们会看到如下一行日志：</p><ul><li><p>Using generated security password: 30abfb1f-36e1-446a-a79b-f70024f589ab 这就是 Spring Security 为默认用户 user 生成的临时密码，是一个 UUID 字符串。</p></li><li><p>访问 <code>http://localhost:8080/hello</code> 接口，就可以看到自动重定向到登录页面了：</p></li></ul><p>在登录页面，默认的用户名就是 user，默认的登录密码则是项目启动时控制台打印出来的密码，输入用户名密码之后，就登录成功了，登录成功后，我们就可以访问到 /hello 接口了。</p><p>在 Spring Security 中，默认的登录页面和登录接口，都是 /login ，只不过一个是 get 请求（登录页面），另一个是 post 请求（登录接口）。</p><p>「大家可以看到，非常方便，一个依赖就保护了所有接口。」</p><p>有人说，你怎么知道知道生成的默认密码是一个 UUID 呢？</p><p>这个其实很好判断。</p><p>和用户相关的自动化配置类在 <code>UserDetailsServiceAutoConfiguration</code> 里边，在该类的 <code>getOrDeducePassword</code> 方法中，我们看到如下一行日志：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">isPasswordGenerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%n%nUsing generated security password: %s%n&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

毫无疑问，我们在控制台看到的日志就是从这里打印出来的。打印的条件是 isPasswordGenerated 方法返回 <span class="token boolean">true</span>，即密码是默认生成的。

进而我们发现，user<span class="token punctuation">.</span>getPassword 出现在 <span class="token class-name">SecurityProperties</span> 中，在 <span class="token class-name">SecurityProperties</span> 中我们看到如下定义：

<span class="token doc-comment comment">/**
 * Default user name.
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * Password for the default user name.
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> passwordGenerated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

</code></pre></div><p>可以看到，默认的用户名就是 user，默认的密码则是 UUID，而默认情况下，passwordGenerated 也为 true。</p><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h4><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
publicclass <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">NoOpPasswordEncoder</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">&quot;javaboy.org&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol><li>首先我们<strong>自定义 SecurityConfig 继承自 WebSecurityConfigurerAdapter，重写里边的 configure 方法</strong>。</li><li>首先我们提供了一个 PasswordEncoder 的实例，因为目前的案例还比较简单，因此我暂时先不给密码进行加密，所以返回 NoOpPasswordEncoder 的实例即可。</li><li>configure 方法中，我们通过 inMemoryAuthentication 来开启在内存中定义用户，withUser 中是用户名，password 中则是用户密码，roles 中是用户角色。</li><li>如果需要配置多个用户，用 and 相连。</li><li>为什么用 and 相连呢？</li></ol><blockquote><p>在没有 Spring Boot 的时候，我们都是 SSM 中使用 Spring Security， 这种时候都是在 XML 文件中配置 Spring Security，既然是 XML 文件，标签就有开始有结束， 现在的 and 符号相当于就是 XML 标签的结束符，表示结束当前标签，这是个时候上下文会回到 <code>inMemoryAuthentication</code> 方法中，然后开启新用户的配置。</p></blockquote><p>配置完成后，再次启动项目，Java 代码中的配置会覆盖掉 XML 文件中的配置，此时再去访问 <code>/hello</code> 接口，就会发现只有 Java 代码中的用户名/密码才能访问成功。</p><h3 id="自定义表单登录页" tabindex="-1"><a class="header-anchor" href="#自定义表单登录页" aria-hidden="true">#</a> 自定义表单登录页</h3><p>重写它的 <code>configure(WebSecurity web)</code> 和 <code>configure(HttpSecurity http)</code> 方法，如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> web<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/images/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>web.ignoring() 用来配置忽略掉的 URL 地址，一般对于静态文件，我们可以采用此操作。</li><li>如果我们使用 XML 来配置 <code>Spring Security</code> ，里边会有一个重要的标签 <code>&lt;http&gt;，HttpSecurity</code> 提供的配置方法 都对应了该标签。</li><li>authorizeRequests 对应了 <code>&lt;intercept-url&gt;</code>。</li><li>formLogin 对应了 <code>&lt;formlogin&gt;</code>。</li><li>and 方法表示结束当前标签，上下文回到HttpSecurity，开启新一轮的配置。</li><li>permitAll 表示登录相关的页面/接口不要被拦截。</li><li>最后记得关闭 csrf ，关于 csrf 问题我到后面专门和大家说。</li><li>当我们定义了登录页面为 <code>/login.html</code> 的时候，<code>Spring Security</code> 也会帮我们自动注册一个 <code>/login.html</code> 的接口，这个接口是 POST 请求，用来处理登录逻辑。</li></ul><h3 id="定制-spring-security-中的表单登录" tabindex="-1"><a class="header-anchor" href="#定制-spring-security-中的表单登录" aria-hidden="true">#</a> 定制 Spring Security 中的表单登录</h3><ul><li><p>登录接口则是提交登录数据的地方，就是登录页面里边的 form 表单的 action 属性对应的值。</p></li><li><p>在 Spring Security 中，如果我们不做任何配置，默认的登录页面和登录接口的地址都是 /login，也就是说，默认会存在如下两个请求：</p></li></ul><p>GET http://localhost:8080/login POST http://localhost:8080/login</p><p>如果是 GET 请求表示你想访问登录页面，如果是 POST 请求，表示你想提交登录数据。</p><ul><li>在上篇文章中，我们在 SecurityConfig 中自定定义了登录页面地址，如下：</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>当我们配置了 loginPage 为 <code>/login.html</code> 之后，这个配置从字面上理解，就是设置登录页面的地址为 <code>/login.html</code>。</p><p>实际上它还有一个隐藏的操作，就是登录接口地址也设置成 <code>/login.html</code> 了。换句话说，新的登录页面和登录接口地址都是 <code>/login.html</code>，现在存在如下两个请求：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>GET http://localhost:8080/login.html
POST http://localhost:8080/login.html
</code></pre></div><p>前面的 GET 请求用来获取登录页面，后面的 POST 请求用来提交登录数据。</p><p>有的小伙伴会感到奇怪？为什么登录页面和登录接口不能分开配置呢？</p><p>其实是可以分开配置的！</p><p>在 SecurityConfig 中，我们可以通过 <code>loginProcessingUrl</code> 方法来指定登录接口地址，如下：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>这样配置之后，登录页面地址和登录接口地址就分开了，各是各的。</p><p>此时我们还需要修改登录页面里边的 action 属性，改为 /doLogin，如下：</p><div class="language-jsx" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/doLogin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
&lt;!--省略--&gt;
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>此时，启动项目重新进行登录，我们发现依然可以登录成功。</p><p>那么为什么默认情况下两个配置地址是一样的呢？</p><ul><li>form 表单的相关配置在 <code>FormLoginConfigurer</code> 中，该类继承自 <code>AbstractAuthenticationFilterConfigurer</code></li><li>所以当 <code>FormLoginConfigurer</code> <code>初始化的时候，AbstractAuthenticationFilterConfigurer</code> 也会初始化，在 <code>AbstractAuthenticationFilterConfigurer</code> 的构造方法中，可以看到：</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AbstractAuthenticationFilterConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">setLoginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这就是配置默认的 loginPage 为 /login。</span>

<span class="token comment">// 另一方面，FormLoginConfigurer 的初始化方法 init 方法中也调用了父类的 init 方法：</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">H</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">initDefaultLoginFilter</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 而在父类的 init 方法中，又调用了 updateAuthenticationDefaults，我们来看下这个方法：</span>

<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">updateAuthenticationDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>loginProcessingUrl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span>loginPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">//省略</span>
<span class="token punctuation">}</span>

</code></pre></div><ul><li><p>从这个方法的逻辑中我们就可以看到，如果用户没有给 <code>loginProcessingUrl</code> 设置值的话，默认就使用 loginPage 作为 <code>loginProcessingUrl</code>。</p></li><li><p>而如果用户配置了 <code>loginPage，在配置完</code> <code>loginPage</code> <code>之后，updateAuthenticationDefaults</code> 方法还是会被调用，此时如果没有配置 <code>loginProcessingUrl</code>，则使用新配置的 loginPage 作为 <code>loginProcessingUrl</code>。</p></li></ul><h3 id="登录参数" tabindex="-1"><a class="header-anchor" href="#登录参数" aria-hidden="true">#</a> 登录参数</h3><p><code>FormLoginConfigurer</code> 类中，在它的构造方法中，我们可以看到有两个配置用户名密码的方法：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">FormLoginConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>在这里，首先 super 调用了父类的构造方法，传入了 <code>UsernamePasswordAuthenticationFilter</code> 实例，该实例将被赋值给父类的 authFilter 属性。</li></ul><p>接下来 <code>usernameParameter</code> 方法如下：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">FormLoginConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span></span> <span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> usernameParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">getAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUsernameParameter</span><span class="token punctuation">(</span>usernameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
	returnthis<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>getAuthenticationFilter 实际上是父类的方法，在这个方法中返回了 authFilter 属性，也就是一开始设置的 UsernamePasswordAuthenticationFilter 实例，然后调用该实例的 setUsernameParameter 方法去设置登录用户名的参数：</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsernameParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> usernameParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>usernameParameter <span class="token operator">=</span> usernameParameter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这里的设置有什么用呢？当登录请求从浏览器来到服务端之后，我们要从请求的 HttpServletRequest 中取出来用户的登录用户名和登录密码，怎么取呢？还是在 UsernamePasswordAuthenticationFilter 类中，有如下两个方法：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">obtainPassword</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>passwordParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">obtainUsername</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>usernameParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以看到，这个时候，就用到默认配置的 username 和 password 了。</p><p>当然，这两个参数我们也可以自己配置，自己配置方式如下：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">&quot;passwd&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>配置完成后，也要修改一下前端页面：</p><h3 id="登录回调" tabindex="-1"><a class="header-anchor" href="#登录回调" aria-hidden="true">#</a> 登录回调</h3><ul><li>登录成功回调 在 Spring Security 中，和登录成功重定向 URL 相关的方法有两个：</li></ul><p>defaultSuccessUrl successForwardUrl 这两个咋看没什么区别，实际上内藏乾坤。</p><ul><li>首先我们在配置的时候，<code>defaultSuccessUrl 和 successForwardUrl</code> 只需要配置一个即可，具体配置哪个，则要看你的需求，两个的区别如下：</li></ul><ol><li><p><code>defaultSuccessUrl</code> 有一个重载的方法，我们先说一个参数的 <code>defaultSuccessUrl</code> 方法。如果我们在 <code>defaultSuccessUrl</code> 中指定登录成功的跳转页面为 <code>/index</code>，此时分两种情况，如果你是直接在浏览器中输入的登录地址，登录成功后，就直接跳转到 <code>/index</code>，如果你是在浏览器中输入了其他地址，例如 <code>http://localhost:8080/hello</code>，结果因为没有登录，又重定向到登录页面，此时登录成功后，就不会来到 <code>/index</code> ，而是来到 <code>/hello</code> 页面。</p></li><li><p><code>defaultSuccessUrl</code> 还有一个重载的方法，第二个参数如果不设置默认为 false，也就是我们上面的的情况，如果手动设置第二个参数为 true，则 <code>defaultSuccessUrl</code> 的效果和 <code>successForwardUrl</code> 一致。</p></li><li><p><code>successForwardUrl</code> 表示不管你是从哪里来的，登录后一律跳转到 <code>successForwardUrl</code> 指定的地址。例如 <code>successForwardUrl</code> 指定的地址为 <code>/index</code> ，你在浏览器地址栏输入 <code>http://localhost:8080/hello</code>，结果因为没有登录，重定向到登录页面，当你登录成功之后，就会服务端跳转到 <code>/index</code> 页面；或者你直接就在浏览器输入了登录页面地址，登录成功后也是来到 <code>/index</code>。</p></li></ol><p>相关配置如下：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">&quot;/login.html&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">&quot;passwd&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">successForwardUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 「注意：实际操作中，defaultSuccessUrl 和 successForwardUrl 只需要配置一个即可。」</span>
</code></pre></div><h3 id="登录失败回调" tabindex="-1"><a class="header-anchor" href="#登录失败回调" aria-hidden="true">#</a> 登录失败回调</h3><p>与登录成功相似，登录失败也是有两个方法：</p><ul><li>failureForwardUrl</li><li>failureUrl</li></ul><ul><li>这两个方法在设置的时候也是设置一个即可。failureForwardUrl 是登录失败之后会发生服务端跳转，failureUrl 则在登录失败之后，会发生重定向。</li></ul><h3 id="注销登录" tabindex="-1"><a class="header-anchor" href="#注销登录" aria-hidden="true">#</a> 注销登录</h3><p>注销登录的默认接口是 <code>/logout</code>，我们也可以配置。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/logout&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">logoutRequestMatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AntPathRequestMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/logout&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">deleteCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">clearAuthentication</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">invalidateHttpSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>注销登录的配置我来说一下：</p><ul><li>默认注销的 URL 是 <code>/logout</code>，是一个 GET 请求，我们可以通过 <code>logoutUrl</code> 方法来修改默认的注销 URL。</li><li><code>logoutRequestMatcher</code> 方法不仅可以修改注销 URL，还可以修改请求方式，实际项目中，这个方法和 <code>logoutUrl</code> 任意设置一个即可。</li><li><code>logoutSuccessUrl</code> 表示注销成功后要跳转的页面。</li><li><code>deleteCookies</code> 用来清除 cookie。</li><li><code>clearAuthentication</code> 和 <code>invalidateHttpSession</code> 分别表示清除认证信息和使 HttpSession 失效，默认可以不用配置，默认就会清除。</li></ul>`,76),c=[o];function e(u,l){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","a_oauth.html.vue"]]);export{k as default};
