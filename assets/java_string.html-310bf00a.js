import{_ as n,p as s,q as a,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<h3 id="commonutil" tabindex="-1"><a class="header-anchor" href="#commonutil" aria-hidden="true">#</a> commonUtil</h3><ul><li><code>isNoneBlank org.apache.commons.lang3.StringUtils</code> 工具类。 <ul><li><code>isEmpty</code></li><li><code>isNotEmpty</code></li><li><code>isNotBlank</code></li><li><code>isBlank isAnyEmpty</code></li><li><code>isNoneEmpty</code></li><li><code>isAnyBlank</code></li></ul></li></ul><h3 id="isempty" tabindex="-1"><a class="header-anchor" href="#isempty" aria-hidden="true">#</a> isEmpty</h3><ul><li>是否为空. 可以看到 <strong>&quot; &quot;</strong> 空格是会绕过这种空判断,因为是一个空格,并不是严格的空值,会导致 <code>isEmpty(&quot; &quot;)=false</code></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot; bob &quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token doc-comment comment">/**
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>NOTE: This method changed in Lang version 2.0.
 * It no longer trims the CharSequence.
 * That functionality is available in isBlank().<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@param</span> <span class="token parameter">cs</span>  the CharSequence to check, may be null
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the CharSequence is empty or null
 * <span class="token keyword">@since</span> 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CharSequence</span> cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cs <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li><ul><li>StringUtils.is<strong>Not</strong>Empty() 相当于不为空 , <code>= !isEmpty()</code>。</li></ul></li></ul><ul><li>StringUtils.is<strong>Any</strong>Empty() 是否有一个为空,<strong>只有一个为空</strong>,就为true。</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token string">&quot; bob &quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">css</span>  the CharSequences to check, may be null or empty
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if any of the CharSequences are empty or null
 * <span class="token keyword">@since</span> 3.2
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAnyEmpty</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CharSequence</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> css<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CharSequence</span> cs <span class="token operator">:</span> css<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>StringUtils.is<strong>None</strong>Empty()</li></ul><ul><li>相当于 <strong>!isAnyEmpty(css)</strong> , 必须所有的值<strong>都不为空</strong>才返回true</li></ul><h3 id="isbank系列" tabindex="-1"><a class="header-anchor" href="#isbank系列" aria-hidden="true">#</a> isBank系列</h3><ul><li>StringUtils.isBlank() 是否为真空值(空格或者空值)</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">&quot; bob &quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token doc-comment comment">/**
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Checks if a CharSequence is whitespace, empty (&quot;&quot;) or null.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@param</span> <span class="token parameter">cs</span>  the CharSequence to check, may be null
 * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the CharSequence is null, empty or whitespace
 * <span class="token keyword">@since</span> 2.0
 * <span class="token keyword">@since</span> 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CharSequence</span> cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> strLen<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>strLen <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isWhitespace</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,13),e=[o];function c(l,u){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","java_string.html.vue"]]);export{i as default};
