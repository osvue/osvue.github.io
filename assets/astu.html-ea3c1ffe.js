import{_ as n,p as s,q as a,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<h2 id="python基本语法" tabindex="-1"><a class="header-anchor" href="#python基本语法" aria-hidden="true">#</a> Python基本语法</h2><h3 id="关键子和保留字" tabindex="-1"><a class="header-anchor" href="#关键子和保留字" aria-hidden="true">#</a> 关键子和保留字</h3><div class="language-python" data-ext="py"><pre class="language-python"><code>	<span class="token keyword">import</span> keyword
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#33</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span>		   <span class="token comment">#打印关键字</span>

	<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;None&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;True&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;and&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;as&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;assert&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;break&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;continue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;def&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;elif&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;else&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;except&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;finally&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;for&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;from&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;global&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;if&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;import&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lambda&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nonlocal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;or&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pass&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;raise&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;try&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;while&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;with&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yield&#39;</span><span class="token punctuation">]</span>
</code></pre></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p><code>pow(2,3) =&gt; 2*2*2</code></p><ul><li>abs计算绝对值，round将浮点数圆整为与之最接近的整数</li></ul><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><p>用命令import的变种<code>from module import function</code>，可在调 用函数时不指定模块前缀 可使用变量来引用函数（以及其他大部分Python元素）。</p><ul><li>执行赋值语句<code>foo = math.sqrt</code>后，就可使用foo来计算平 方根。例如，foo(4)的结果为2.</li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><ul><li>原始字符串可派上用场，因为它们根本不会对反斜杠做特殊处理，而是让字符串包含的每个字符都保持原样。</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;C:\\nowhere&#39;</span><span class="token punctuation">)</span>
C<span class="token punctuation">:</span>\\nowhere
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;C:\\Program Files\\fnord\\foo\\bar\\baz\\frozz\\bozz&#39;</span><span class="token punctuation">)</span>
C<span class="token punctuation">:</span>\\Program Files\\fnord\\foo\\bar\\baz\\frozz\\bozz



<span class="token comment"># string</span>

a<span class="token operator">=</span><span class="token string">&#39;hello,{}&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot; world !&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

成员关系运算符  <span class="token keyword">in</span>  <span class="token keyword">not</span> <span class="token keyword">in</span> 
比较运算符   <span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>  <span class="token operator">&gt;=</span>  <span class="token operator">&lt;</span> <span class="token operator">=</span>   <span class="token operator">==</span>  <span class="token operator">!=</span>  <span class="token operator">&lt;&gt;</span> 
</code></pre></div><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>abs(number)</td><td>返回指定数的绝对值</td></tr><tr><td>bytes(string, encoding[,errors])</td><td>对指定的字符串进行编码，并以指定的方式处理错误</td></tr><tr><td>cmath.sqrt(number)</td><td>返回平方根；可用于负数</td></tr><tr><td>float(object)</td><td>将字符串或数字转换为浮点数</td></tr><tr><td>help([object])</td><td>提供交互式帮助</td></tr><tr><td>input(prompt)</td><td>以字符串的方式获取用户输入</td></tr><tr><td>int(object)</td><td>将字符串或数转换为整数</td></tr><tr><td>math.ceil(number)</td><td>以浮点数的方式返回向上圆整的结果</td></tr><tr><td>math.floor(number)</td><td>以浮点数的方式返回向下圆整的结果</td></tr><tr><td>math.sqrt(number)</td><td>返回平方根；不能用于负数</td></tr><tr><td>pow(x, y[, z])</td><td>返回x的y次方对z求模的结果</td></tr><tr><td>print(object, ...)</td><td>将提供的实参打印出来，并用空格分隔</td></tr><tr><td>repr(object)</td><td>返回指定值的字符串表示</td></tr><tr><td>round(number[, ndigits])</td><td>四舍五入为指定的精度，正好为5时舍入到偶 数</td></tr><tr><td>str(object)</td><td>将指定的值转换为字符串。用于转换bytes时，可指定编码和错误处理方式</td></tr></tbody></table><h2 id="数据结构-列表和元组" tabindex="-1"><a class="header-anchor" href="#数据结构-列表和元组" aria-hidden="true">#</a> 数据结构 列表和元组</h2><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> edward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Edward Gumby&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> john <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;John Smith&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> database <span class="token operator">=</span> <span class="token punctuation">[</span>edward<span class="token punctuation">,</span> john<span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> database
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Edward Gumby&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;John Smith&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

</code></pre></div><ul><li>括索引、切片、相加、相乘和成员资格检查 <ul><li>所有元素都有编号——从0开始递增 因此-1是最后一个元素的位置</li></ul></li></ul><h4 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h4><ul><li>使用切片（slicing）来访问特定范围内的元素。为此，可使用两个索引，并用冒号分隔<code>：</code><ul><li>第一个索引是包含的第一个元素的编号</li><li>但第二个索引是切片后余下的第一个元素的编号。</li><li>如果切片结束于序列末尾，可省略第二个索引。</li><li>如果切片始于序列开头，可省略第一个索引。</li></ul></li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tag <span class="token operator">=</span> <span class="token string">&#39;&lt;a href=&quot;http://www.python.org&quot;&gt;Python web site&lt;/a&gt;&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tag<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span>
<span class="token string">&#39;http://www.python.org&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tag<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token string">&#39;Python web site&#39;</span>


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>


numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre></div><h4 id="序列相加" tabindex="-1"><a class="header-anchor" href="#序列相加" aria-hidden="true">#</a> 序列相加</h4><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;python&#39;</span> <span class="token operator">*</span> <span class="token number">5</span>
<span class="token string">&#39;pythonpythonpythonpythonpython&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span>
<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span>



</code></pre></div><h3 id="长度、最小值和最大值" tabindex="-1"><a class="header-anchor" href="#长度、最小值和最大值" aria-hidden="true">#</a> 长度、最小值和最大值</h3><p>内置函数len、min和max很有用，其中函数len返回序列包含的元素个 数，而min和max分别返回序列中最小和最大的元素</p><p>insert方法insert用于将一个对象插入列表。 pop从列表中删除一个元素（末尾为最后一个元素），并返回 列表中删除元素也很容易，只需使用del语句</p><p>修改列表如<code>x[1] = 2</code></p><p>这一元素。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> numbers<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;four&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Beth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cecil&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dee-Dee&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Earl&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment"># 方法remove用于删除第一个为指定值的元素。</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;to&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;be&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;or&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;to&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;be&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;be&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="切片赋值" tabindex="-1"><a class="header-anchor" href="#切片赋值" aria-hidden="true">#</a> 切片赋值</h3><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;Perl&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name
<span class="token punctuation">[</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># 切片  2  截取 复制</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;ar&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name
<span class="token punctuation">[</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">]</span>




a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;Python Hello&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>


a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;中华&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>


</code></pre></div><p>方法reverse按相反的顺序排列列表中的元素</p><ul><li><strong>append</strong> 方法append用于将一个对象附加到列表末尾</li><li><strong>clear</strong> 方法clear就地清空列表的内容</li><li><strong>copy</strong> 方法copy复制列表。前面说过，常规复制只是将另一个名称关联到 列表</li><li><strong>count</strong> 方法count计算指定的元素在列表中出现了多少次</li><li><strong>index</strong> 方法index在列表中查找指定值第一次出现的索引</li><li><strong>extend</strong> 方法extend让你能够同时将多个值附加到列表末尾</li><li><strong>remove</strong> 方法remove用于删除第一个为指定值的元素</li><li><strong>insert</strong> 方法insert用于将一个对象插入列表。 注意 pop是唯一既修改列表又返回一个非None值的列表方 法。</li></ul><p><strong>sort</strong> 高级排序 方法sort接受两个可选参数：key和reverse。这两个参数通常是 按名称指定的，称为关键字参数</p><p>参数key类 似于参数cmp：你将其设置为一个用于排序的函数。然而，不会直 接使用这个函数来判断一个元素是否比另一个元素小，而是使用它 来为每个元素创建一个键，再根据这些键对元素进行排序。因此， 要根据长度对元素进行排序，可将参数key设置为函数len。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;aardvark&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abalone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;acme&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aerate&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
<span class="token punctuation">[</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;acme&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aerate&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abalone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aardvark&#39;</span><span class="token punctuation">]</span>
</code></pre></div><ul><li>另一个关键字参数reverse，只需将其指定为一个真值（True或False ），以指出是否要按相反的顺序对 列表进行排序</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x
<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

</code></pre></div><p>函数sorted也接受参数key和reverse。在很多情况下，将参 数key设置为一个自定义函数很有用</p><h3 id="元组-不可修改的序列" tabindex="-1"><a class="header-anchor" href="#元组-不可修改的序列" aria-hidden="true">#</a> 元组：不可修改的序列</h3><ul><li><strong>tuple</strong> 函数tuple的工作原理与list很像：它将一个序列作为参数，并将其转换为元组</li></ul><p>如何表示只包含一个值的元组呢？这有点特殊：<strong>虽然只有 一个值，也必须在它后面加上逗号</strong>。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>
<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
</code></pre></div><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len(seq)</td><td>返回序列的长度</td></tr><tr><td>list(seq)</td><td>将序列转换为列表</td></tr><tr><td>max(args)</td><td>返回序列或一组参数中的最大值</td></tr><tr><td>min(args)</td><td>返回序列和一组参数中的最小值</td></tr><tr><td>reversed(seq)</td><td>让你能够反向迭代序列</td></tr><tr><td>sorted(seq)</td><td>返回一个有序列表，其中包含指定序列中的所有元素</td></tr><tr><td>tuple(seq)</td><td>将序列转换为元组</td></tr></tbody></table><h3 id="字符串-1" tabindex="-1"><a class="header-anchor" href="#字符串-1" aria-hidden="true">#</a> 字符串</h3><div class="language-python" data-ext="py"><pre class="language-python"><code> <span class="token string">&quot;{}, {} and {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;second&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;third&quot;</span><span class="token punctuation">)</span>
<span class="token string">&#39;first, second and third&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;{0}, {1} and {2}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;second&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;third&quot;</span><span class="token punctuation">)</span>
<span class="token string">&#39;first, second and third&#39;</span>
</code></pre></div><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>b</td><td>将整数表示为二进制数</td></tr><tr><td>c</td><td>将整数解读为Unicode码点</td></tr><tr><td>d</td><td>将整数视为十进制数进行处理，这是整数默认使用的说明符</td></tr><tr><td>e</td><td>使用科学表示法来表示小数（用e来表示指数）</td></tr><tr><td>E</td><td>与e相同，但使用E来表示指数</td></tr><tr><td>f</td><td>将小数表示为定点数</td></tr><tr><td>F</td><td>与f相同，但对于特殊值（nan和inf），使用大写表示</td></tr><tr><td>g</td><td>自动在定点表示法和科学表示法之间做出选择。这是默认用于小数的说明符，但在默认情况下至少有1位小数</td></tr><tr><td>G</td><td>与g相同，但使用大写来表示指数和特殊值</td></tr><tr><td>n</td><td>与g相同，但插入随区域而异的数字分隔符</td></tr><tr><td>o</td><td>将整数表示为八进制数</td></tr><tr><td>s</td><td>保持字符串的格式不变，这是默认用于字符串的说明符</td></tr><tr><td>x</td><td>将整数表示为十六进制数并使用小写字母</td></tr><tr><td>X</td><td>与x相同，但使用大写字母</td></tr><tr><td>%</td><td>将数表示为百分比值（乘以100，按说明符f设置格式，再在后面加上%）</td></tr></tbody></table><p>精度也是使用整数指定的，但需要在它前面加上一个表示小数点的句 点。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;Pi day is {pi:.2f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pi<span class="token operator">=</span>pi<span class="token punctuation">)</span>
<span class="token string">&#39;Pi day is 3.14&#39;</span>
</code></pre></div><h3 id="fun-str" tabindex="-1"><a class="header-anchor" href="#fun-str" aria-hidden="true">#</a> fun str</h3><p>center 方法center通过在两边添加填充字符（默认为空格）让字符串居中。</p><p>find 方法find在字符串中查找子串。如果找到，就返回子串的第一个字符的 索引，否则返回-1。</p><p>join join是一个非常重要的字符串方法，其作用与split相反，用于合并序 列的元素。 split split是一个非常重要的字符串方法，其作用与join相反，用于将字符 串拆分为序列。 lower 方法lower返回字符串的小写版本</p><p>replace 方法replace将指定子串都替换为另一个字符串，并返回替换后的结 果。</p><p>strip 方法strip将字符串开头和末尾的空白（但不包括中间的空白）删除， 并返回删除后的结果</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;The Middle by Jimmy Eat World&quot;</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span>
<span class="token string">&#39; The Middle by Jimmy Eat World &#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;The Middle by Jimmy Eat World&quot;</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
<span class="token string">&#39;*****The Middle by Jimmy Eat World*****&#39;</span>


 <span class="token string">&#39;With a moo-moo here, and a moo-moo there&#39;</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;moo&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;$$$&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 只指定了起点</span>
<span class="token number">20</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;!!!&#39;</span><span class="token punctuation">)</span>
<span class="token number">16</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> subject<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;!!!&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment"># 同时指定了起点和终点</span>
<span class="token operator">-</span><span class="token number">1</span>

seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span> <span class="token comment"># 合并一个字符串列表</span>
<span class="token string">&#39;1+2+3+4+5&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dirs <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;usr&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;env&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dirs<span class="token punctuation">)</span>


<span class="token string">&#39;This is a test&#39;</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eez&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;Theez eez a test&#39;</span>

<span class="token string">&#39;1+2+3+4+5&#39;</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">]</span>



</code></pre></div><h2 id="字典-dict" tabindex="-1"><a class="header-anchor" href="#字典-dict" aria-hidden="true">#</a> 字典 dict</h2><p><code>len(d)</code>返回字典d包含的项（键-值对）数。 <code>d[k]</code>返回与键k相关联的值。 <code>d[k] = v</code>将值v关联到键k。 <code>del d[k]</code>删除键为k的项。 <code>k in d</code>检查字典d是否包含键为k的项。</p><ul><li>使用format_map来指出你将通过一个映射来提供所需的信</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code>phonebook <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2341&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Beth&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;9102&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cecil&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;3258&#39;</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Gumby&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;Gumby&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>


phonebook <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2341&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Beth&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;9102&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cecil&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;3258&#39;</span><span class="token punctuation">}</span>




<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phonebook
<span class="token punctuation">{</span><span class="token string">&#39;Beth&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;9102&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2341&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cecil&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;3258&#39;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot;Cecil&#39;s phone number is {Cecil}.&quot;</span><span class="token punctuation">.</span>format_map<span class="token punctuation">(</span>phonebook<span class="token punctuation">)</span>
<span class="token string">&quot;Cecil&#39;s phone number is 3258.&quot;</span>



<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> copy <span class="token keyword">import</span> deepcopy

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">[</span><span class="token string">&#39;names&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Alfred&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bertrand&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> d<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dc <span class="token operator">=</span> deepcopy<span class="token punctuation">(</span>d<span class="token punctuation">)</span>

 deepcopy<span class="token punctuation">(</span>d<span class="token punctuation">)</span>

</code></pre></div><h3 id="字典方法" tabindex="-1"><a class="header-anchor" href="#字典方法" aria-hidden="true">#</a> 字典方法</h3><p>clear 方法clear删除所有的字典项，这种操作是就地执行的（就像 list.sort一样），因此什么都不返回（或者说返回None）。</p><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h2><p>copy 方法copy返回一个新字典，其包含的键-值对与原来的字典相同 （这个方法执行的是浅复制，因为值本身是原件，而非副本）。 <code>from copy import deepcopy</code> 深复制，即同时复制值及其包含 的所有值，等等。为此，可使用模块copy中的函数<strong>deepcopy</strong></p><p>get 方法get为访问字典项提供了宽松的环境。通常，如果你试图访问 字典中没有的项 用get来访问不存在的键时，没有引发异常，而是返 回None。你可指定“默认”值，这样将返回你指定的值而不 是None。</p><p>items 方法items返回一个包含所有字典项的列表，其中每个元素都为 (key, value)的形式</p><p>keys 方法keys返回一个字典视图，其中包含指定字典中的键</p><p>pop 方法pop可用于获取与指定键相关联的值，并将该键-值对从字典中 删除。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d
<span class="token punctuation">{</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>

</code></pre></div><p>update 方法update使用一个字典中的项来更新另一个字典</p><p>values 方法values返回一个由字典中的值组成的字典视图。不同于方法 keys，方法values返回的视图可能包含重复的值</p><p>fromkeys 方法fromkeys创建一个新字典，其中包含指定的键，且每个键对 应的值都是None。 items 方法items返回一个包含所有字典项的列表，其中每个元素都为 (key, value)的形式。字典项在列表中的排列顺序不确定。</p><p>popitem 方法popitem类似于list.pop，但list.pop弹出列表中的最后一 个元素，而popitem随机地弹出一个字典项，因为字典项的顺序是 不确定的，没有“最后一个元素”的概念。如果你要以高效地方式逐 个删除并处理所有字典项，这可能很有用，因为这样无需先获取键 列表。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Python Web Site&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://www.python.org&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token string">&#39;changed&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mar 14 22:09:15 MET 2016&#39;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Python Language Website&#39;</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d<span class="token punctuation">.</span>update<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> d
<span class="token punctuation">{</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;http://www.python.org&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;changed&#39;</span><span class="token punctuation">:</span>
<span class="token string">&#39;Mar 14 22:09:15 MET 2016&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Python Language Website&#39;</span><span class="token punctuation">}</span>



<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>


</code></pre></div><h2 id="再谈print和import" tabindex="-1"><a class="header-anchor" href="#再谈print和import" aria-hidden="true">#</a> 再谈print和import</h2><p>在语句末尾添加as子句并指定别名。下面是一个导入 整个模块并给它指定别名的例子</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> math <span class="token keyword">as</span> foobar
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foobar<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">2.0</span>


<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt <span class="token keyword">as</span> foobar
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> foobar<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">2.0</span>

</code></pre></div><h2 id="赋值魔法" tabindex="-1"><a class="header-anchor" href="#赋值魔法" aria-hidden="true">#</a> 赋值魔法</h2><h3 id="序列解包" tabindex="-1"><a class="header-anchor" href="#序列解包" aria-hidden="true">#</a> 序列解包</h3><p>赋值语句你见过很多，有的给变量赋值，还有的给数据结构的一部分 （如列表中的元素和切片，或者字典项）赋值，但还有其他类型的赋值 语句。例如，可同时（并行）给多个变量赋值</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
 
<span class="token comment"># 交换</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
<span class="token operator">&gt;</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">3</span>

</code></pre></div><ul><li><strong>这里执行的操作称为序列解包（或可迭代对象解包）：将一个序列（或任何可迭代对象）解包，并将得到的值存储到一系列变量中</strong></li></ul><p>要解包的序列包含的元素个数必须与你在等号左边列出 的目标个数相同，否则Python将引发异常</p><p>可使用星号运算符（*）来收集多余的值，这样无需确保值和变量的个 数相同，如下例所示 赋值语句的右边可以是任何类型的序列，但带星号的变量最终包含的总 是一个列表。在变量和值的个数相同时亦如此。</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rest
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c
<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>

x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token operator">*</span>z <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>
</code></pre></div><h3 id="代码块-缩进的乐趣" tabindex="-1"><a class="header-anchor" href="#代码块-缩进的乐趣" aria-hidden="true">#</a> 代码块：缩进的乐趣</h3><p>可在满足条件时执行（if语句），可执行多次（循环），等等。代码块是通过缩进代码（即在前面加空格）来创建的。注意 也可使用制表符来缩进代码块。Python将制表符解释为移到下一个制表位（相邻制表位相距8个空格），但标准（也是更佳的）做法是只使用空格（而不使用制表符）来缩进，且每级缩进4个空格。</p><p><strong>在Python中，使用冒号（:）指出接下来是一个代码块</strong></p><h2 id="条件表达式" tabindex="-1"><a class="header-anchor" href="#条件表达式" aria-hidden="true">#</a> 条件表达式</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 用作布尔表达式（如用作if语句中的条件）时，下面的值都将被解释器视为假：</span>
<span class="token boolean">False</span> <span class="token boolean">None</span> <span class="token number">0</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><h4 id="python比较运算符" tabindex="-1"><a class="header-anchor" href="#python比较运算符" aria-hidden="true">#</a> Python比较运算符</h4><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>x == y</td><td>x等于y</td></tr><tr><td>x &lt; y</td><td>x小于y</td></tr><tr><td>x &gt; y</td><td>x大于y</td></tr><tr><td>x &gt;= y</td><td>x大于或等于y</td></tr><tr><td>x &lt;= y</td><td>x小于或等于y</td></tr><tr><td>x != y</td><td>x不等于y</td></tr><tr><td>x is y</td><td>x和y是同一个对象</td></tr><tr><td>x is not y</td><td>x和y是不同的对象</td></tr><tr><td>x in y</td><td>x是容器（如序列）y的成员</td></tr><tr><td>x not in y</td><td>x不是容器（如序列）y的成员</td></tr></tbody></table><h3 id="断言-使用关键字assert。" tabindex="-1"><a class="header-anchor" href="#断言-使用关键字assert。" aria-hidden="true">#</a> 断言 使用关键字assert。</h3><ul><li>在条件后面添加一个字符串，对断言做出说明。</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;The age must be realistic&#39;</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?
AssertionError<span class="token punctuation">:</span> The age must be realistic
</code></pre></div><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h3><h3 id="并行迭代" tabindex="-1"><a class="header-anchor" href="#并行迭代" aria-hidden="true">#</a> 并行迭代</h3><p>有时候，你可能想同时迭代两个序列。假设有下面两个列表：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;anne&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;beth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;george&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;damon&#39;</span><span class="token punctuation">]</span>
ages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span>
如果要打印名字和对应的年龄，可以像下面这样做：
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span> ages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;years old&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="简单推导" tabindex="-1"><a class="header-anchor" href="#简单推导" aria-hidden="true">#</a> 简单推导</h3><p>列表推导是一种从其他列表创建列表的方式，类似于数学中的集合推 导。列表推导的工作原理非常简单，有点类似于for循环。</p><div class="language-python" data-ext="py"><pre class="language-python"><code>y <span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token operator">+</span>x <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> x  <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
</code></pre></div><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><p>变量到底是什么呢？可将其视为指向值的名称。因此，执行赋值语句x = 1后，名称x指向值1。这几乎与使用字典时一样（字典中的键指向 值），只是你使用的是“看不见”的字典。实际上，这种解释已经离真相 不远。有一个名为vars的内置函数，</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre></div><h3 id="递归示例——二分查找算法。" tabindex="-1"><a class="header-anchor" href="#递归示例——二分查找算法。" aria-hidden="true">#</a> 递归示例——二分查找算法。</h3><ul><li>你可能熟悉猜心游戏。这个游戏要求猜对对方心里想的是什么，且整个猜测过程提出的“是否”问题不能超过20个。为充分利用每个问题，你力图让每个问题的答案将可能的范围减半。</li><li>例如，如果你知道对方心里想的是一个人，可能问：“你心里想的是个女人吗？”除非你有很强的第六感，不然不会一开始就问：“你心里想的是John Cleese吗？”</li><li>对喜欢数字的人来说，这个游戏的另一个版本是猜数。例如，对方心里想着一个1～100的数字，你必须猜出是哪个。 当然，猜100次肯定猜对，但最少需要猜多少次呢？ 实际上只需猜7次。 首先问：“这个数字大于50吗？” 如果答案是肯定的，再问：“这个数字大于75吗？” 不断将可能的区间减半，直到猜对为止。你无需过多地思考就能成功。</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> number<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> upper<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> lower <span class="token operator">==</span> upper<span class="token punctuation">:</span>
        <span class="token keyword">assert</span> number <span class="token operator">==</span> sequence<span class="token punctuation">[</span>upper<span class="token punctuation">]</span>
        <span class="token keyword">return</span> upper
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        middle <span class="token operator">=</span> <span class="token punctuation">(</span>lower <span class="token operator">+</span> upper<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">if</span> number <span class="token operator">&gt;</span> sequence<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> search<span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> number<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> upper<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> search<span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> number<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> middle<span class="token punctuation">)</span>
</code></pre></div><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>map(func, seq[, seq, ...])</td><td>对序列中的所有元素执行函数</td></tr><tr><td>filter(func, seq)</td><td>返回一个列表，其中包含对其执行函数时结果为真的所 有元素</td></tr><tr><td>reduce(func, seq[, initial])</td><td>等价于func(func(func(seq[0], seq[1]), seq[2]), ...)</td></tr><tr><td>sum(seq)</td><td>返回seq中所有元素的和</td></tr><tr><td>apply(func[, args[, kwargs]])</td><td>调用函数（还提供要传递给函数的参数）</td></tr></tbody></table>`,108),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","astu.html.vue"]]);export{k as default};
