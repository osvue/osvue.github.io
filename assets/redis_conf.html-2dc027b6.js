import{_ as e,p as d,q as o,a1 as i}from"./framework-d81ad7e5.js";const s={},a=i(`<h3 id="redis-conf配置文件详解" tabindex="-1"><a class="header-anchor" href="#redis-conf配置文件详解" aria-hidden="true">#</a> <code>redis.conf</code>配置文件详解</h3><ol><li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程 <code>daemonize no</code></li><li>当Redis以守护进程方式运行时，Redis默认会把pid写入<code>/var/run/redis.pid</code>文件，可以通过pidfile指定 <code>pidfile /var/run/redis.pid</code></li><li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在 手机按键上MERZ对应的号码，而MERZ取自意大利歌女<code>Alessia Merz</code>的名字 <code>port 6379</code></li><li>绑定的主机地址 <code>bind 127.0.0.1</code></li><li>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 <code>timeout 300</code></li><li>指定日志记录级别，Redis总共支持四个级别：<strong>debug、verbose、notice、warning</strong>，默认为 <strong><code>verbose</code></strong><code>loglevel verbose</code></li><li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则 日志将会发送给<code>/dev/null</code><code>logfile stdout</code></li><li>设置数据库的数量，默认数据库为0，可以使用SELECT <code>&lt;dbid&gt;</code>命令在连接上指定数据库id <code>databases 16</code></li><li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合 <code>save &lt;seconds&gt; &lt;changes&gt;</code> Redis默认配置文件中提供了三个条件：</li></ol><div class="language-text" data-ext="text"><pre class="language-text"><code>save 900 1
save 300 10
save 60 10000
分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。

</code></pre></div><h3 id="redis存储" tabindex="-1"><a class="header-anchor" href="#redis存储" aria-hidden="true">#</a> redis存储</h3><ol start="10"><li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选 项，但会导致数据库文件变的巨大 <code>rdbcompression yes</code></li><li>指定本地数据库文件名，默认值为<code>dump.rdb</code><code>dbfilename dump.rdb</code></li><li>指定本地数据库存放目录 <code>dir ./</code></li><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步 <code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code> 1 当master服务设置了密码保护时，slav服务连接master的密码 <code>masterauth &lt;master-password&gt;</code></li><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <code>&lt;password&gt;</code>命令提供密码，默认 关闭 <code>requirepass foobared</code></li><li>设置同一时间最大客户端连接数，<strong>默认无限制</strong>，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件 描述符数，如果设置 <code>maxclients 0</code>，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回 <code>max number of clients reached</code>错误信息 <strong>maxclients 128</strong></li><li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即 将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm 机制，会把Key存放内存，Value会存放在swap区 <code>maxmemory &lt;bytes&gt;</code></li><li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电 时导致一段时间内的数据丢失。</li></ol><ul><li>因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no <code>appendonly no</code></li></ul><ol start="19"><li>指定更新日志文件名，默认为<code>appendonly.aof</code><code>appendfilename appendonly.aof</code></li></ol><h3 id="指定更新" tabindex="-1"><a class="header-anchor" href="#指定更新" aria-hidden="true">#</a> 指定更新</h3><ol start="20"><li>指定更新日志条件，共有3个可选值：</li></ol><div class="language-text" data-ext="text"><pre class="language-text"><code>no：表示等操作系统进行数据缓存同步到磁盘（快）
always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）
everysec：表示每秒同步一次（折衷，默认值）
\`appendfsync everysec\`
</code></pre></div><ol start="21"><li><p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即 冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中 <code>vm-enabled no</code></p></li><li><p>虚拟内存文件路径，默认值为<code>/tmp/redis.swap</code>，不可多个Redis实例共享 <code>vm-swap-file /tmp/redis.swap</code></p></li><li><p>将所有大于<code>vm-max-memory</code>的数据存入虚拟内存,无论<code>vm-max-memory</code>设置多小,所有索引数据都是内存存储的 (Redis的索引数据 就是keys),也就是说,当<code>vm-max-memory</code>设置为0的时候,其实是所有value都存在于磁盘。默认值为0 <code>vm-max-memory 0</code></p></li><li><p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，<code>vmpage-size</code>是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果 存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值 <code>vm-page-size 32</code></p></li><li><p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个 pages将消耗1byte的内存。 <code>vm-pages 134217728</code></p></li><li><p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会 造成比较长时间的延迟。默认值为4 <code>vm-max-threads 4</code></p></li><li><p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启 <code>glueoutputbuf yes</code></p></li><li><p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法 <code>hash-max-zipmap-entries 64</code><code>hash-max-zipmap-value 512</code></p></li><li><p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍） <code>activerehashing yes</code></p></li><li><p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的 特定配置文件 <code>include /path/to/local.conf</code></p></li></ol>`,11),c=[a];function l(t,r){return d(),o("div",null,c)}const p=e(s,[["render",l],["__file","redis_conf.html.vue"]]);export{p as default};
