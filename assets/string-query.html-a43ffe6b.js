import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const e={},p=t(`<h2 id="string-prototype-charat" tabindex="-1"><a class="header-anchor" href="#string-prototype-charat" aria-hidden="true">#</a> String.prototype.charAt</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.charAt(index)</p></div><p>参数：</p><ul><li>index：一个介于0 和字符串长度减1之间的整数，默认值为 0。</li></ul><p>返回值：</p><p>索引值对应的字符串，如果 index 超出范围则返回空字符串。</p><h3 id="_2-描述" tabindex="-1"><a class="header-anchor" href="#_2-描述" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>初学时使用过。</li></ul></blockquote><h3 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>displaying characters at different locations in a string</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> anyString <span class="token operator">=</span> <span class="token string">&quot;Brave new world&quot;</span><span class="token punctuation">;</span>

anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;B&quot;</span>
anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;B&quot;</span>
anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;r&quot;</span>
anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
</code></pre></div></li></ul><h2 id="string-prototype-charcodeat" tabindex="-1"><a class="header-anchor" href="#string-prototype-charcodeat" aria-hidden="true">#</a> String.prototype.charCodeAt</h2><h3 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.charCodeAt(index)</p></div><p>参数：</p><ul><li>index：一个介于0 和字符串长度减1之间的整数，默认值为 0。</li></ul><p>返回值：</p><p>索引值对应的 Unicode，如果 index 超出范围则返 NaN。</p><h3 id="_2-描述-1" tabindex="-1"><a class="header-anchor" href="#_2-描述-1" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>初学时使用过。</li></ul></blockquote><h3 id="_3-示例-1" tabindex="-1"><a class="header-anchor" href="#_3-示例-1" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using charCodeAt</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 65</span>
<span class="token string">&#39;ABC&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 65</span>
<span class="token string">&#39;ABC&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre></div></li></ul><h2 id="string-prototype-codepointat" tabindex="-1"><a class="header-anchor" href="#string-prototype-codepointat" aria-hidden="true">#</a> String.prototype.codePointAt</h2><h3 id="_1-语法-2" tabindex="-1"><a class="header-anchor" href="#_1-语法-2" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.codePointAt(pos)</p></div><p>参数：</p><ul><li>pos：一个介于0 和字符串长度减1之间的整数，默认值为 0。</li></ul><p>返回值：</p><p>索引值对应的 Unicode，charCodeAt 的增强版，如果 index 超出范围则返 undefined。</p><h3 id="_2-描述-2" tabindex="-1"><a class="header-anchor" href="#_2-描述-2" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-2" tabindex="-1"><a class="header-anchor" href="#_3-示例-2" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using codePointAt</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 65</span>
<span class="token string">&#39;ABC&#39;</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 65</span>
<span class="token string">&#39;ABC&#39;</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre></div></li></ul><h2 id="string-prototype-endswith" tabindex="-1"><a class="header-anchor" href="#string-prototype-endswith" aria-hidden="true">#</a> String.prototype.endsWith</h2><h3 id="_1-语法-3" tabindex="-1"><a class="header-anchor" href="#_1-语法-3" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.endsWith(searchString[, length])</p></div><p>参数：</p><ul><li>searchString：要搜索的子字符串；</li><li>length：作为 str 的长度，可选。</li></ul><p>返回值：</p><p>如果传入的子字符串在搜索字符串的末尾则返回 true，否则将返回 false，大小写敏感。</p><h3 id="_2-描述-3" tabindex="-1"><a class="header-anchor" href="#_2-描述-3" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>用于判断是否以其结尾。</li></ul></blockquote><h3 id="_3-示例-3" tabindex="-1"><a class="header-anchor" href="#_3-示例-3" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using endsWith</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;To be, or not to be, that is the question.&#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;question.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;to be&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;to be&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div></li></ul><h2 id="string-prototype-startswith" tabindex="-1"><a class="header-anchor" href="#string-prototype-startswith" aria-hidden="true">#</a> String.prototype.startsWith</h2><h3 id="_1-语法-4" tabindex="-1"><a class="header-anchor" href="#_1-语法-4" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.startsWith(searchString[, position])</p></div><p>参数：</p><ul><li>searchString：要搜索的子字符串；</li><li>length：作为 str 的长度，可选。</li></ul><p>返回值：</p><p>如果传入的子字符串在搜索字符串的开头则返回 true，否则将返回 false，大小写敏感。</p><h3 id="_2-描述-4" tabindex="-1"><a class="header-anchor" href="#_2-描述-4" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>用于判断是否以其开始。</li></ul></blockquote><h3 id="_3-示例-4" tabindex="-1"><a class="header-anchor" href="#_3-示例-4" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using startsWith</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;To be, or not to be, that is the question.&#39;</span><span class="token punctuation">;</span>

str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;To be&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// true</span>
str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;not to be&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span>
str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;not to be&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div></li></ul><h2 id="string-prototype-includes" tabindex="-1"><a class="header-anchor" href="#string-prototype-includes" aria-hidden="true">#</a> String.prototype.includes</h2><h3 id="_1-语法-5" tabindex="-1"><a class="header-anchor" href="#_1-语法-5" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.includes(searchString[, position])</p></div><p>参数：</p><ul><li>searchString：要搜索的子字符串；</li><li>position：搜索的起始位置，可选。</li></ul><p>返回值：</p><p>如果当前字符串包含被搜寻的字符串则返回 true，否则将返回 false，大小写敏感。</p><h3 id="_2-描述-5" tabindex="-1"><a class="header-anchor" href="#_2-描述-5" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>常用语判断是否含有该字符串。</li></ul></blockquote><h3 id="_3-示例-5" tabindex="-1"><a class="header-anchor" href="#_3-示例-5" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using includes</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;To be, or not to be, that is the question.&#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;To be&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// true</span>
str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;question&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>
str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;nonexistent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;To be&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;TO BE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// false</span>
str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// true</span>
</code></pre></div></li></ul><h2 id="string-prototype-indexof" tabindex="-1"><a class="header-anchor" href="#string-prototype-indexof" aria-hidden="true">#</a> String.prototype.indexOf</h2><h3 id="_1-语法-6" tabindex="-1"><a class="header-anchor" href="#_1-语法-6" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.indexOf(searchValue, fromIndex)</p></div><p>参数：</p><ul><li>searchValue：被查找的值，默认值为 &quot;undefined&quot;;</li><li>fromIndex：开始查找的位置，可选。</li></ul><p>返回值：</p><p>指定值第一次出现的索引，未找到则返回 -1。</p><h3 id="_2-描述-6" tabindex="-1"><a class="header-anchor" href="#_2-描述-6" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>早期用于判断是否存在某一字符串，后被 includes 方法取代。</li></ul></blockquote><h3 id="_3-示例-6" tabindex="-1"><a class="header-anchor" href="#_3-示例-6" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>checking occurrences</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;Blue Whale&#39;</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Blue&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div></li></ul><h2 id="string-prototype-lastindexof" tabindex="-1"><a class="header-anchor" href="#string-prototype-lastindexof" aria-hidden="true">#</a> String.prototype.lastIndexOf</h2><h3 id="_1-语法-7" tabindex="-1"><a class="header-anchor" href="#_1-语法-7" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.lastIndexOf(searchValue[, fromIndex])</p></div><p>参数：</p><ul><li>searchValue：被查找的值，默认值为 &quot;undefined&quot;;</li><li>fromIndex：开始查找的位置，可选。</li></ul><p>返回值：</p><p>指定值第一次出现的索引，未找到则返回 -1。</p><h3 id="_2-描述-7" tabindex="-1"><a class="header-anchor" href="#_2-描述-7" aria-hidden="true">#</a> 2. 描述</h3><p>与 indexOf 一致，逆序查找。</p>`,93),o=[p];function c(i,l){return a(),s("div",null,o)}const u=n(e,[["render",c],["__file","string-query.html.vue"]]);export{u as default};
