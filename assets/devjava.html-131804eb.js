import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},e=t(`<h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><p>要及时抛出并回滚事务，不能 e.printStake();</p><h2 id="一、java代码规范" tabindex="-1"><a class="header-anchor" href="#一、java代码规范" aria-hidden="true">#</a> 一、java代码规范</h2><h3 id="_2、项目命名规范" tabindex="-1"><a class="header-anchor" href="#_2、项目命名规范" aria-hidden="true">#</a> 2、项目命名规范</h3><p>全部采用小写方式， 以中划线分隔。</p><p>正例：<code>mall-management-system / order-service-client / user-api</code></p><p>反例：<code>mall_management-system / mallManagementSystem / orderServiceClient</code></p><h3 id="_3、todo-fixme-规范" tabindex="-1"><a class="header-anchor" href="#_3、todo-fixme-规范" aria-hidden="true">#</a> 3、TODO/FIXME 规范</h3><p><code>TODO/TBD(to be determined)</code> 注释一般用来描述已知待改进、待补充的修改点,并且加上作者名称。<br><code>FIXME</code> 注释一般用来描述已知缺陷，它们都应该有统一风格，方便文本搜索统一处理。如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// TODO &lt;author-name&gt;: 补充XX处理</span>
<span class="token comment">// FIXME &lt;author-name&gt;: XX缺陷</span>
</code></pre></div><h3 id="_4、方法参数规范" tabindex="-1"><a class="header-anchor" href="#_4、方法参数规范" aria-hidden="true">#</a> 4、方法参数规范</h3><p>无论是 <code>controller，service，manager，dao</code> 亦或是其他的代码，每个方法最多 <code>3</code> 个参数，如果超出 <code>3</code> 个参数的话，要封装成 <code>javabean</code> 对象。</p><ol><li>方便他人调用，降低出错几率。尤其是当参数是同一种类型，仅仅依靠顺序区分，稍有不慎便是灾难性后果，而且排查起来也极其恶心。</li><li>保持代码整洁、清晰度。当一个个方法里充斥着一堆堆参数的时候，再坚强的人，也会身心疲惫。</li></ol><p>反例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 使用证书加密数据工具方法
*
* <span class="token keyword">@param</span> <span class="token parameter">param</span>
* <span class="token keyword">@param</span> <span class="token parameter">password</span> 加密密码
* <span class="token keyword">@param</span> <span class="token parameter">priCert</span> 私钥
* <span class="token keyword">@param</span> <span class="token parameter">pubCert</span> 公钥
* <span class="token keyword">@return</span> 返回加密后的字符串
*/</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">signEnvelop</span><span class="token punctuation">(</span><span class="token class-name">JdRequestParam</span> param<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> priCert<span class="token punctuation">,</span> <span class="token class-name">String</span> pubCert<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><h3 id="_5、注释规范" tabindex="-1"><a class="header-anchor" href="#_5、注释规范" aria-hidden="true">#</a> 5、注释规范</h3><h4 id="_5-1、注释和代码一样重要" tabindex="-1"><a class="header-anchor" href="#_5-1、注释和代码一样重要" aria-hidden="true">#</a> 5-1、注释和代码一样重要</h4><p>注释是我们披荆斩棘历经磨难翻越需求这座大山时，留下的踪迹和收获的经验教训，这些宝贵的知识除了证明我们曾经存在过，也提醒着后来的人们殷鉴不远、继往开来。</p><p>注释除了说明作用、逻辑之外。还有一个很重要的原因：当业务逻辑过于复杂，代码过于庞大的时候，注释就变成了一道道美化环境、分离与整理逻辑思路的路标。这是很重要的一点，它能有效得帮助我们免于陷入代码与业务逻辑的泥沼之中。</p><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 开始抽奖方法
* 保存中奖信息、奖励用户积分等
* <span class="token keyword">@param</span> <span class="token parameter">luckDrawDTO</span>
* <span class="token keyword">@return</span> ResponseDTO 返回中奖信息
*/</span>
<span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">startLuckDraw</span><span class="token punctuation">(</span><span class="token class-name">LuckDrawDTO</span> luckDrawDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// -------------- 1、校验抽奖活动基本信息 ------------------------</span>
    xxx伪代码一顿操作

    <span class="token comment">// -------------- 2、新增抽奖记录 -------------------------------</span>
    xxx伪代码一顿操作

    <span class="token comment">// -------------- 3、如果需要消耗积分，则扣除钢镚积分 -------------</span>
    xxx伪代码一顿操作

    <span class="token comment">// -------------- 4、获取奖品信息，开始翻滚吧 --------------------</span>
    xxx伪代码一顿操作

    <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span>luckDrawPrizeVO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="_5-2、注释和代码的一致性" tabindex="-1"><a class="header-anchor" href="#_5-2、注释和代码的一致性" aria-hidden="true">#</a> 5-2、注释和代码的一致性</h4><p>注释并不是越多越好，当注释过多，维护代码的同时，还需要维护注释，不仅变成了一种负担，也与我们当初添加注释的初衷背道而驰。</p><p>首先：大家应该通过清晰的逻辑架构，好的变量命名来提高代码可读性；需要的时候，才辅以注释说明。注释是为了帮助阅读者快速读懂代码，所以要从读者的角度出发，按需注释。注释内容要简洁、明了、无二义性，信息全面且不冗余。</p><p>其次：无论是修改、复制代码时，都要仔细核对注释内容是否正确。只改代码，不改注释是一种不文明行为，破坏了代码与注释的一致性，会让阅读者迷惑、费解，甚至误解。</p><p>反例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// 查询部门</span>
<span class="token class-name">EmployeeDTO</span> employee <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">listByDeptId</span><span class="token punctuation">(</span>deptId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="_5-3、方法注释" tabindex="-1"><a class="header-anchor" href="#_5-3、方法注释" aria-hidden="true">#</a> 5-3、方法注释</h4><p>方法要尽量通过方法名自解释，不要写无用、信息冗余的方法头，不要写空有格式的方法头注释。</p><p>方法头注释内容可选，但不限于：功能说明、返回值，用法、算法实现等等。尤其是对外的方法接口声明，其注释，应当将重要、有用的信息表达清楚。</p><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 解析转换时间字符串为 LocalDate 时间类
 * 调用前必须校验字符串格式 否则可能造成解析失败的错误异常
 *
 * <span class="token keyword">@param</span> <span class="token parameter">dateStr</span> 必须是 yyyy-MM-dd 格式的字符串
 * <span class="token keyword">@return</span> LocalDate
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LocalDate</span> <span class="token function">parseYMD</span><span class="token punctuation">(</span><span class="token class-name">String</span> dateStr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>反例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 校验对象
 *
 * <span class="token keyword">@param</span> <span class="token parameter">t</span>
 * <span class="token keyword">@return</span> String
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">checkObj</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>反例中出现的问题：</p><ul><li>方法注释没有说明具体的作用、使用事项。</li><li>参数、返回值，空有格式没内容。这是非常重要一点，任何人调用任何方法之前都需要知道方法对参数的要求，以及返回值是什么。</li></ul><h2 id="二、项目规范" tabindex="-1"><a class="header-anchor" href="#二、项目规范" aria-hidden="true">#</a> 二、项目规范</h2><h3 id="_1、代码目录结构" tabindex="-1"><a class="header-anchor" href="#_1、代码目录结构" aria-hidden="true">#</a> 1、代码目录结构</h3><p>统一的目录结构是所有项目的基础。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>src                               源码目录
|-- common                            各个项目的通用类库
|-- config                            项目的配置信息
|-- constant                          全局公共常量
|-- handler                           全局处理器
|-- interceptor                       全局连接器
|-- listener                          全局监听器
|-- module                            各个业务
|-- |--- employee                         员工模块
|-- |--- role                             角色模块
|-- |--- login                            登录模块
|-- third                             三方服务，比如redis, oss，微信sdk等等
|-- util                              全局工具类
|-- Application.java                  启动类
</code></pre></div><h3 id="_2、common-目录规范" tabindex="-1"><a class="header-anchor" href="#_2、common-目录规范" aria-hidden="true">#</a> 2、common 目录规范</h3><p>common 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>src 源码目录
|-- common 各个项目的通用类库
|-- |--- anno          通用注解，比如权限，登录等等
|-- |--- constant      通用常量，比如 ResponseCodeConst
|-- |--- domain        全局的 javabean，比如 BaseEntity,PageParamDTO 等
|-- |--- exception     全局异常，如 BusinessException
|-- |--- json          json 类库，如 LongJsonDeserializer，LongJsonSerializer
|-- |--- swagger       swagger 文档
|-- |--- validator     适合各个项目的通用 validator，如 CheckEnum，CheckBigDecimal 等
</code></pre></div><h3 id="_3、config-目录规范" tabindex="-1"><a class="header-anchor" href="#_3、config-目录规范" aria-hidden="true">#</a> 3、config 目录规范</h3><p>config 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>src                               源码目录
|-- config                            项目的所有配置信息
|-- |--- MvcConfig                    mvc的相关配置，如interceptor,filter等
|-- |--- DataSourceConfig             数据库连接池的配置
|-- |--- MybatisConfig                mybatis的配置
|-- |--- ....                         其他
</code></pre></div><h3 id="_4、module-目录规范" tabindex="-1"><a class="header-anchor" href="#_4、module-目录规范" aria-hidden="true">#</a> 4、module 目录规范</h3><p>module 目录里写项目的各个业务，每个业务一个独立的顶级文件夹，在文件里进行 mvc 的相关划分。 其中，domain 包里存放 entity, dto, vo，bo 等 javabean 对象</p><div class="language-text" data-ext="text"><pre class="language-text"><code>src
|-- module                         所有业务模块
|-- |-- role                          角色模块
|-- |-- |--RoleController.java              controller
|-- |-- |--RoleConst.java                   role相关的常量
|-- |-- |--RoleService.java                 service
|-- |-- |--RoleDao.java                     dao
|-- |-- |--domain                           domain
|-- |-- |-- |-- RoleEntity.java                  表对应实体
|-- |-- |-- |-- RoleDTO.java                     dto对象
|-- |-- |-- |-- RoleVO.java                      返回对象
|-- |-- employee                      员工模块
|-- |-- login                         登录模块
|-- |-- email                         邮件模块
|-- |-- ....                          其他
</code></pre></div><h3 id="_5、-domain-包中的-javabean-命名规范" tabindex="-1"><a class="header-anchor" href="#_5、-domain-包中的-javabean-命名规范" aria-hidden="true">#</a> 5、 domain 包中的 javabean 命名规范</h3><p>1） <code>javabean</code> 的整体要求：</p><ul><li>不得有任何的业务逻辑或者计算</li><li>基本数据类型必须使用包装类型<code>（Integer, Double、Boolean 等）</code></li><li>不允许有任何的默认值</li><li>每个属性必须添加注释，并且必须使用多行注释。</li><li>必须使用 <code>lombok</code> 简化 <code>getter/setter</code> 方法</li><li>建议对象使用 <code>lombok</code> 的 <code>@Builder ，@NoArgsConstructor</code>，同时使用这两个注解，简化对象构造方法以及set方法。</li></ul><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoDTO</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用示例：</span>

<span class="token class-name">DemoDTO</span> demo <span class="token operator">=</span> <span class="token class-name">DemoDTO</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;yeqiu&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div><p>2）数据对象；<code>XxxxEntity</code>，要求：</p><ul><li>以 <code>Entity</code> 为结尾（阿里是为 DO 为结尾）</li><li>Xxxx 与数据库表名保持一致</li><li>类中字段要与数据库字段保持一致，不能缺失或者多余</li><li>类中的每个字段添加注释，并与数据库注释保持一致</li><li>不允许有组合</li><li>项目内的日期类型必须统一，建议使用 <code>java.util.Date，java.sql.Timestamp，java.time.LocalDateTime</code> 其中只一。</li></ul><p>3）传输对象；<code>XxxxDTO</code>，要求：</p><ul><li>不可以继承自 <code>Entity</code></li><li><code>DTO</code> 可以继承、组合其他 <code>DTO，VO，BO</code> 等对象</li><li><code>DTO</code> 只能用于前端、RPC 的请求参数</li></ul><p>3）视图对象；<code>XxxxVO</code>，要求：</p><ul><li>不可继承自 <code>Entity</code></li><li><code>VO</code> 可以继承、组合其他 <code>DTO，VO，BO</code> 等对象</li><li><code>VO</code> 只能用于返回前端、rpc 的业务数据封装对象</li></ul><p>4）业务对象 <code>BO</code>，要求：</p><ul><li>不可以继承自 <code>Entity</code></li><li><code>BO</code> 对象只能用于 <code>service，manager，dao</code> 层，不得用于 <code>controller</code> 层</li></ul><h2 id="三、mvc-规范" tabindex="-1"><a class="header-anchor" href="#三、mvc-规范" aria-hidden="true">#</a> 三、MVC 规范</h2><h3 id="_1、整体分层" tabindex="-1"><a class="header-anchor" href="#_1、整体分层" aria-hidden="true">#</a> 1、整体分层</h3><ul><li>controller 层</li><li>service 层</li><li>manager 层</li><li>dao 层</li></ul><h3 id="_2、-controller-层规范" tabindex="-1"><a class="header-anchor" href="#_2、-controller-层规范" aria-hidden="true">#</a> 2、 <code>controller</code> 层规范</h3><p>1） 只允许在 method 上添加 <code>RequestMapping</code> 注解，不允许加在 class 上（为了方便的查找 url，放到 url 不能一次性查找出来）</p><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/department/list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DepartmentVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> departmentService<span class="token punctuation">.</span><span class="token function">listDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>反例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span> <span class="token punctuation">(</span><span class="token string">&quot;/department&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DepartmentVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> departmentService<span class="token punctuation">.</span><span class="token function">listDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>2）不推荐使用 rest 命名 url， 只能使用 <code>get/post</code> 方法。url 命名上规范如下：</p><blockquote><p><em>虽然 Rest 大法好，但是有时并不能一眼根据 url 看出来是什么操作，所以我们选择了后者，这个没有对与错，只有哪个更适合我们的团队。</em></p></blockquote><p><code>/业务模块/子模块/动作</code></p><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token constant">GET</span>  <span class="token operator">/</span>department<span class="token operator">/</span>get<span class="token operator">/</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span>      查询某个部门详细信息
<span class="token constant">POST</span> <span class="token operator">/</span>department<span class="token operator">/</span>query         复杂查询
<span class="token constant">POST</span> <span class="token operator">/</span>department<span class="token operator">/</span>add           添加部门
<span class="token constant">POST</span> <span class="token operator">/</span>department<span class="token operator">/</span>update        更新部门
<span class="token constant">GET</span>  <span class="token operator">/</span>department<span class="token operator">/</span>delete<span class="token operator">/</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span>   删除部门
</code></pre></div><p>3）每个方法必须添加 <code>swagger</code> 文档注解 <code>@ApiOperation</code> ，并填写接口描述信息，描述最后必须加上作者信息 <code>@author 哪吒</code> 。</p><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;更新部门信息 @author 哪吒&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/department/update&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">updateDepartment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DeptUpdateDTO</span> deptUpdateDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> departmentService<span class="token punctuation">.</span><span class="token function">updateDepartment</span><span class="token punctuation">(</span>deptUpdateDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre></div><p>4）controller 负责协同和委派业务，充当路由的角色，每个方法要保持简洁：</p><ul><li>不做任何的业务逻辑操作</li><li>不做任何的参数、业务校验，参数校验只允许使用@Valid 注解做简单的校验</li><li>不做任何的数据组合、拼装、赋值等操作</li></ul><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;添加部门 @author 哪吒&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/department/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DepartmentCreateDTO</span> departmentCreateDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> departmentService<span class="token punctuation">.</span><span class="token function">addDepartment</span><span class="token punctuation">(</span>departmentCreateDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>5）只能在 <code>controller</code> 层获取当前请求用户，并传递给 <code>service</code> 层。</p><blockquote><p><em>因为获取当前请求用户是从 ThreadLocal 里获取取的，在 service、manager、dao 层极有可能是其他非 request 线程调用，会出现 null 的情况，尽量避免</em></p></blockquote><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span><span class="token string">&quot;添加员工 @author yandanyang&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/employee/add&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">EmployeeAddDTO</span> employeeAddDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoginTokenBO</span> requestToken <span class="token operator">=</span> <span class="token class-name">SmartRequestTokenUtil</span><span class="token punctuation">.</span><span class="token function">getRequestUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> employeeService<span class="token punctuation">.</span><span class="token function">addEmployee</span><span class="token punctuation">(</span>employeeAddDTO<span class="token punctuation">,</span> requestToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3 id="_3、-service-层规范" tabindex="-1"><a class="header-anchor" href="#_3、-service-层规范" aria-hidden="true">#</a> 3、 <code>service</code> 层规范</h3><p>1）合理拆分 service 文件，如果业务较大，请拆分为多个 service。</p><p>如订单业务,所有业务都写到 OrderService 中会导致文件过大，故需要进行拆分如下：</p><ul><li><code>OrderQueryService</code> 订单查询业务</li><li><code>OrderCreateService</code> 订单新建业务</li><li><code>OrderDeliverService</code> 订单发货业务</li><li><code>OrderValidatorService</code> 订单验证业务</li></ul><p>2）谨慎处理 <code>@Transactional</code> 事务注解的使用，不要简单对 <code>service</code> 的方法添加个 <code>@Transactional</code> 注解就觉得万事大吉了。应当合并对数据库的操作，尽量减少添加了<code>@Transactional</code>方法内的业务逻辑。<br><code>@Transactional</code> 注解内的 <code>rollbackFor</code> 值必须使用异常的基类 <code>Throwable.class</code></p><blockquote><p><em>对于@Transactional 注解，当 spring 遇到该注解时，会自动从数据库连接池中获取 connection，并开启事务然后绑定到 ThreadLocal 上，如果业务并没有进入到最终的 操作数据库环节，那么就没有必要获取连接并开启事务，应该直接将 connection 返回给数据库连接池，供其他使用（比较难以讲解清楚，如果不懂的话就主动去问）。</em></p></blockquote><p>反例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">upOrDown</span><span class="token punctuation">(</span><span class="token class-name">Long</span> departmentId<span class="token punctuation">,</span> <span class="token class-name">Long</span> swapId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 验证 1</span>
        <span class="token class-name">DepartmentEntity</span> departmentEntity <span class="token operator">=</span> departmentDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>departmentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>departmentEntity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">DepartmentResponseCodeConst</span><span class="token punctuation">.</span><span class="token constant">NOT_EXISTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 验证 2</span>
        <span class="token class-name">DepartmentEntity</span> swapEntity <span class="token operator">=</span> departmentDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>swapId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>swapEntity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">DepartmentResponseCodeConst</span><span class="token punctuation">.</span><span class="token constant">NOT_EXISTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 验证 3</span>
        <span class="token class-name">Long</span> count <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">countByDepartmentId</span><span class="token punctuation">(</span>departmentId<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">DepartmentResponseCodeConst</span><span class="token punctuation">.</span><span class="token constant">EXIST_EMPLOYEE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 操作数据库 4</span>
        <span class="token class-name">Long</span> departmentSort <span class="token operator">=</span> departmentEntity<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        departmentEntity<span class="token punctuation">.</span><span class="token function">setSort</span><span class="token punctuation">(</span>swapEntity<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        departmentDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>departmentEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        swapEntity<span class="token punctuation">.</span><span class="token function">setSort</span><span class="token punctuation">(</span>departmentSort<span class="token punctuation">)</span><span class="token punctuation">;</span>
        departmentDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>swapEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>以上代码前三步都是使用 connection 进行验证操作，由于方法上有@Transactional 注解，所以这三个验证都是使用的同一个 connection。</p><p>若对于复杂业务、复杂的验证逻辑，会导致整个验证过程始终占用该 connection 连接，占用时间可能会很长，直至方法结束，connection 才会交还给数据库连接池。</p><p>对于复杂业务的不可预计的情况，长时间占用同一个 connection 连接不是好的事情，应该尽量缩短占用时间。</p><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">DepartmentService</span><span class="token punctuation">.</span>java

    <span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">upOrDown</span><span class="token punctuation">(</span><span class="token class-name">Long</span> departmentId<span class="token punctuation">,</span> <span class="token class-name">Long</span> swapId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DepartmentEntity</span> departmentEntity <span class="token operator">=</span> departmentDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>departmentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>departmentEntity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">DepartmentResponseCodeConst</span><span class="token punctuation">.</span><span class="token constant">NOT_EXISTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">DepartmentEntity</span> swapEntity <span class="token operator">=</span> departmentDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>swapId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>swapEntity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">DepartmentResponseCodeConst</span><span class="token punctuation">.</span><span class="token constant">NOT_EXISTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Long</span> count <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">countByDepartmentId</span><span class="token punctuation">(</span>departmentId<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">DepartmentResponseCodeConst</span><span class="token punctuation">.</span><span class="token constant">EXIST_EMPLOYEE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        departmentManager<span class="token punctuation">.</span><span class="token function">upOrDown</span><span class="token punctuation">(</span>departmentSort<span class="token punctuation">,</span>swapEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">succ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token class-name">DepartmentManager</span><span class="token punctuation">.</span>java

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upOrDown</span><span class="token punctuation">(</span><span class="token class-name">DepartmentEntity</span> departmentEntity <span class="token punctuation">,</span><span class="token class-name">DepartmentEntity</span> swapEntity<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Long</span> departmentSort <span class="token operator">=</span> departmentEntity<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        departmentEntity<span class="token punctuation">.</span><span class="token function">setSort</span><span class="token punctuation">(</span>swapEntity<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        departmentDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>departmentEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        swapEntity<span class="token punctuation">.</span><span class="token function">setSort</span><span class="token punctuation">(</span>departmentSort<span class="token punctuation">)</span><span class="token punctuation">;</span>
        departmentDao<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>swapEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre></div><p>将数据在 service 层准备好，然后传递给 manager 层，由 manager 层添加@Transactional 进行数据库操作。</p><p>3）需要注意的是：注解 <code>@Transactional</code> 事务在类的内部方法调用是不会生效的</p><p>反例：如果发生异常，saveData方法上的事务注解并不会起作用</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderCreateDTO</span> createDTO<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span>createDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Throwable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token class-name">OrderCreateDTO</span> createDTO<span class="token punctuation">)</span><span class="token punctuation">{</span>
        orderDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>createDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p><em>Spring采用动态代理(AOP)实现对bean的管理和切片，它为我们的每个class生成一个代理对象。只有在代理对象之间进行调用时，可以触发切面逻辑。而在同一个class中，方法A调用方法B，调用的是原对象的方法，而不通过代理对象。所以Spring无法拦截到这次调用，也就无法通过注解保证事务了。简单来说，在同一个类中的方法调用，不会被方法拦截器拦截到，因此事务不会起作用。</em></p></blockquote><p>解决方案：</p><ol><li>可以将方法放入另一个类，如新增 <code>manager层</code>，通过spring注入，这样符合了在对象之间调用的条件。</li><li>启动类添加<code> @EnableAspectJAutoProxy(exposeProxy = true)</code>，方法内使用<code>AopContext.currentProxy()</code>获得代理类，使用事务。</li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">SpringBootApplication</span><span class="token punctuation">.</span>java

<span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>exposeProxy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">OrderService</span><span class="token punctuation">.</span>java

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderCreateDTO</span> createDTO<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">OrderService</span> orderService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderService</span><span class="token punctuation">)</span><span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    orderService<span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span>createDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>4）service是具体的业务处理逻辑服务层，尽量避免将web层某些参数传递到service中。</p><p>反例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token class-name">ResponseDTO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">handlePinganRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">ResponseCodeConst</span><span class="token punctuation">.</span><span class="token constant">ERROR_PARAM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">PinganMsgDTO</span> <span class="token class-name">PinganMsgDTO</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span><span class="token class-name">PinganMsgDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 示例结束</span>
<span class="token punctuation">}</span>

</code></pre></div><p>反例中出现的问题：</p><ul><li>反例中把 <code>HttpServletRequest</code> 传递到service中，是为了获取Request流中的字符信息，然后才是真正的业务处理。按照分层的初衷：将代码、业务逻辑解耦，正确的做法应该是<code>handlePinganRequest</code>方法将<code>String</code>字符作为参数直接处理业务，将从<code>Request</code>中获取字符的操作放入<code>controller</code>中。</li><li>另一个坏处是不方便做单元测试，还得一个<code>new</code>一个<code>HttpServletRequest</code>并制造一个<code>InputStream</code>，然而这样做并不能模拟到真实的业务情景及数据。</li></ul><h3 id="_4、-manager-层规范" tabindex="-1"><a class="header-anchor" href="#_4、-manager-层规范" aria-hidden="true">#</a> 4、 manager 层规范</h3><p>manager 层的作用(引自《阿里 java 手册》)：</p><ul><li>对第三方平台封装的层，预处理返回结果及转化异常信息；</li><li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理；</li><li>与 DAO 层交互，对多个 DAO 的组合复用。</li></ul><h3 id="_5、-dao-层规范" tabindex="-1"><a class="header-anchor" href="#_5、-dao-层规范" aria-hidden="true">#</a> 5、 dao 层规范</h3><p>优先使用 mybatis-plus 框架。如果需要多个数据源操作的，可以选择使用 SmartDb 框架。</p><p>1）所有 Dao 继承自 BaseMapper</p><p>2）禁止使用 Mybatis-plus 的 Wrapper 条件构建器</p><p>3）禁止直接在 mybatis xml 中写死常量，应从 dao 中传入到 xml 中</p><p>3）建议不要使用星号 <code>*</code> 代替所有字段</p><p>正例：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>    NoticeDao.java

    Integer noticeCount(@Param(&quot;sendStatus&quot;) Integer sendStatus);
---------------------------------------------
    NoticeMapper.xml

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>noticeCount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>integer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select
        count(1)
        from t_notice
        where
        send_status = #{sendStatus}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>反例：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>    NoticeDao.java

    Integer noticeCount();
---------------------------------------------
    NoticeMapper.xml

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>noticeCount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>integer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select
        count(1)
        from t_notice
        where
        send_status = 0
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>3）dao层方法命名规范</p><ul><li>获取单个对象的方法用 <code>get</code> 做前缀。</li><li>获取多个对象的方法用 <code>list</code> 做前缀。</li><li>获取统计值的方法用 <code>count</code> 做前缀。</li><li>插入的方法用 <code>save/insert</code> 做前缀。</li><li>删除的方法用 <code>remove/delete</code> 做前缀。</li><li>修改的方法用 <code>update</code> 做前缀。</li></ul><p>建议：dao层方法命名尽量以sql语义命名，避免与业务关联。</p><p>正例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PerformanceDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">listByMonthAndItemId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;month&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> month<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;itemId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>反例：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PerformanceDTO</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInternalData</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;month&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> month<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;itemId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> itemId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>反例中出现的不规范操作：</p><ul><li>get代表单个查询，批量查询的应该 list 开头。</li><li>命名与业务关联，局限了dao方法的使用场景和范围，降低了方法的复用性，造成他人困惑以及重复造轮子。</li></ul><h3 id="_6、boolean类型的属性命名规范" tabindex="-1"><a class="header-anchor" href="#_6、boolean类型的属性命名规范" aria-hidden="true">#</a> 6、boolean类型的属性命名规范</h3><blockquote><p>类中布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。反例：定义为基本数据类型 Boolean isDeleted；的属性，它的方法也是 isDeleted()，RPC在反向解析的时候，“以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</p></blockquote><p>这是阿里巴巴开发手册中的原文，我们团队的规定是：<code>boolean</code> 类型的类属性和数据表字段都统一使用 <code>flag</code> 结尾。虽然使用 <code>isDeleted，is_deleted</code> 从字面语义上更直观，但是比起可能出现的潜在错误，这点牺牲还是值得的。</p><p>正例：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>deletedFlag，deleted_flag，onlineFlag，online_flag
</code></pre></div><h3 id="_7、" tabindex="-1"><a class="header-anchor" href="#_7、" aria-hidden="true">#</a> 7、</h3><h2 id="四、数据库-规范" tabindex="-1"><a class="header-anchor" href="#四、数据库-规范" aria-hidden="true">#</a> 四、数据库 规范</h2><h3 id="_1-建表规范" tabindex="-1"><a class="header-anchor" href="#_1-建表规范" aria-hidden="true">#</a> 1 建表规范</h3><p>表必备三字段：id, create_time, update_time</p><ul><li>id 字段 Long 类型，单表自增，自增长度为 1</li><li>create_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP</li><li>update_time 字段 datetime 类型，默认值 CURRENT_TIMESTAMP, On update CURRENT_TIMESTAMP</li></ul><h3 id="_2-枚举类表字段注释需要将所有枚举含义进行注释" tabindex="-1"><a class="header-anchor" href="#_2-枚举类表字段注释需要将所有枚举含义进行注释" aria-hidden="true">#</a> 2 枚举类表字段注释需要将所有枚举含义进行注释</h3><p>修改或增加字段的状态描述，必须要及时同步更新注释。<br> 如下表的 <code>sync_status</code> 字段 <code>同步状态 0 未开始 1同步中 2同步成功 3失败</code>。</p><p>正例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_change_data<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>sync_status<span class="token punctuation">\`</span></span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;同步状态 0 未开始 1同步中 2同步成功 3失败&#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>sync_time<span class="token punctuation">\`</span></span> <span class="token keyword">DATETIME</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;同步时间&#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>update_time<span class="token punctuation">\`</span></span> <span class="token keyword">DATETIME</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>change_data_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><p>反例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_change_data<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>sync_status<span class="token punctuation">\`</span></span> <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;同步状态 &#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>sync_time<span class="token punctuation">\`</span></span> <span class="token keyword">DATETIME</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;同步时间&#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>update_time<span class="token punctuation">\`</span></span> <span class="token keyword">DATETIME</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>change_data_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div><h3 id="_3-合理结合业务给表字段添加索引和唯一索引" tabindex="-1"><a class="header-anchor" href="#_3-合理结合业务给表字段添加索引和唯一索引" aria-hidden="true">#</a> 3 合理结合业务给表字段添加索引和唯一索引</h3><p>具体索引规范请参照《阿里巴巴 Java 开发手册》索引规约</p><h2 id="五、其他" tabindex="-1"><a class="header-anchor" href="#五、其他" aria-hidden="true">#</a> 五、其他</h2><h3 id="_1、代码提交规范" tabindex="-1"><a class="header-anchor" href="#_1、代码提交规范" aria-hidden="true">#</a> 1、代码提交规范</h3><ul><li>提交前应该冷静、仔细检查一下，确保没有忘记加入版本控制或不应该提交的文件。</li><li>提交前应该先编译一次（idea里ctrl+F9），防止出现编译都报错的情况。</li><li>提交前先更新pull一次代码，提交前发生冲突要比提交后发生冲突容易解决的多。</li><li>提交前检查代码是否格式化，是否符合代码规范，无用的包引入、变量是否清除等等。</li><li>提交时检查注释是否准确简洁的表达出了本次提交的内容。</li></ul><h3 id="_2、maven项目" tabindex="-1"><a class="header-anchor" href="#_2、maven项目" aria-hidden="true">#</a> 2、maven项目</h3><ul><li>pom禁止出现相同 groupId，artifactId 的依赖配置。</li><li>项目名称应该与 artifactId 保持一致。</li><li>定期检查jar包依赖关系，及时排除解决冲突的jar包。</li></ul><h3 id="_3、保持项目整洁" tabindex="-1"><a class="header-anchor" href="#_3、保持项目整洁" aria-hidden="true">#</a> 3、保持项目整洁</h3><p>使用git，必须添加 .gitignore 忽略配置文件。<br> 不要提交与项目无关的内容文件：idea配置、target包等。</p>`,159),o=[e];function c(l,u){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","devjava.html.vue"]]);export{k as default};
