import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的 <code>this</code>、<code>arguments</code>、<code>super</code> 和 <code>new.target</code>。箭头函数更适用于本来应该需要匿名函数的地方，并且它们不能用作构造函数。</p><blockquote><p>因为箭头函数没有 <code>prototype</code>，所以箭头函数本身没有 <code>this</code>。</p></blockquote><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><p>ES6 使用箭头函数</p><p>使用箭头函数有两个好处:</p><p>代码更加简洁</p><p>静态绑定this <strong>箭头函数中，this指向的是定义箭头函数的对象中的this</strong>。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;outer&#39;</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;inner&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">// 当前 this 指向</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;inner&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token comment">// &quot;outer&quot;  </span>
    obj2<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token comment">// &quot;inner</span>
</code></pre></div><ul><li>第一个使用了箭头函数，由于箭头函数的this与其所在环境中的this相同，也就是与obj的this相同，</li><li>而obj处于全局环境的活动对象中，this指向全局对象，这里指window，所以输出outer。</li><li>注意:obj对象的this与它的属性中的this不一样。</li><li>第二个使用了寻常函数，作为obj2的一个属性，func方法中的this指向了所在的对象。输出inner。</li></ul><h3 id="_1-返回对象" tabindex="-1"><a class="header-anchor" href="#_1-返回对象" aria-hidden="true">#</a> 1. 返回对象</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>由于大括号会被解释为代码块，所以利用箭头函数直接返回一个对象时，需要用小括号包裹。</p><h3 id="_2-禁止构造函数" tabindex="-1"><a class="header-anchor" href="#_2-禁止构造函数" aria-hidden="true">#</a> 2. 禁止构造函数</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Foo is not a constructor</span>
</code></pre></div><h3 id="_3-对象方法" tabindex="-1"><a class="header-anchor" href="#_3-对象方法" aria-hidden="true">#</a> 3. 对象方法</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>
<span class="token punctuation">}</span>

foo<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo.bar: &#39;baz&#39; window.bar: &#39;foo&#39;</span>
</code></pre></div><p>箭头函数会继承父级作用域的 <code>this</code>，而对象没有作用域，此时 <code>this</code> 指向全局作用域（window）。</p><h2 id="日常使用" tabindex="-1"><a class="header-anchor" href="#日常使用" aria-hidden="true">#</a> 日常使用</h2><h3 id="_1-闭包" tabindex="-1"><a class="header-anchor" href="#_1-闭包" aria-hidden="true">#</a> 1. 闭包</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">++</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> increase <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre></div>`,21),e=[o];function c(l,u){return a(),s("div",null,e)}const r=n(p,[["render",c],["__file","es603_fun.html.vue"]]);export{r as default};
