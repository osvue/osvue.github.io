import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<p>即限制流量进入</p><p><strong>缓存</strong>，是用来增加系统吞吐量，提升访问速度提供高并发。</p><p><strong>降级</strong>，是在系统某些服务组件不可用的时候、流量暴增、资源耗尽等情况下，暂时屏蔽掉出问题的服务，继续提供降级服务，给用户尽可能的友好提示，返回兜底数据，不会影响整体业务流程，待问题解决再重新上线服务</p><p><strong>限流</strong>，是指在使用缓存和降级无效的场景。比如当达到阈值后限制接口调用频率，访问次数，库存个数等，在出现服务不可用之前，提前把服务降级。只服务好一部分用户。</p><p>在我们使用微信、支付宝、短信等等这些api的时候，每个接口都会有调用上的限流。</p><p>限流是对某一时间窗口内的请求数进行限制，保持系统的可用性、稳定性和安全性，防止因流量暴增而导致的系统运行缓慢或宕机，</p><p>app 统计</p><p>友盟 cnzz .....</p><h3 id="限流算法" tabindex="-1"><a class="header-anchor" href="#限流算法" aria-hidden="true">#</a> 限流算法</h3><h4 id="计数器算法" tabindex="-1"><a class="header-anchor" href="#计数器算法" aria-hidden="true">#</a> 计数器算法</h4><p>简单粗暴</p><p>比如线程池大小，数据库连接池大小、nginx连接数等都属于计数器算法。</p><p>全局或某段时间范围达到阈值则限流。</p><h4 id="漏桶算法" tabindex="-1"><a class="header-anchor" href="#漏桶算法" aria-hidden="true">#</a> 漏桶算法</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>削峰
缓冲
消费速度固定 因为计算性能固定
保证桶不能忙
</code></pre></div><h4 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法" aria-hidden="true">#</a> 令牌桶算法</h4><p>平滑的流入速率限制，消费/秒。</p><p>可以用于对外服务接口，内部集群调用</p><p><strong>区别</strong></p><ul><li>令牌桶是按照固定速率从桶里拿令牌消费，如果令牌为0，则拒绝新请求</li><li>漏桶是按照固定速率流出请求，流入速率不控制，当桶内请求达到阈值，新请求则被拒绝。</li><li>令牌桶支持每次拿多个令牌，平均流入速率，并支持突发流入，还可以支持缓慢提升流入速度</li></ul><h4 id="并发限流" tabindex="-1"><a class="header-anchor" href="#并发限流" aria-hidden="true">#</a> 并发限流</h4><p>设置系统阈值总的qps个数</p><p>Tomcat中配置的</p><ul><li>acceptCount 响应连接数</li><li>maxConnections 瞬时最大连接数</li><li>maxThreads 最大线程数</li></ul><h4 id="接口限流" tabindex="-1"><a class="header-anchor" href="#接口限流" aria-hidden="true">#</a> 接口限流</h4><h5 id="接口总数" tabindex="-1"><a class="header-anchor" href="#接口总数" aria-hidden="true">#</a> 接口总数</h5><p>可以使用atomic类或者semaphore进行限流</p><p>这种方式简单粗暴。没有平滑处理。使用限制某个接口的总并发数，或限制某账号服务调用总次数。</p><p>比如某些开放平台限制试用账号。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 拒绝</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
	atomic<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre></div><h5 id="接口时间窗口" tabindex="-1"><a class="header-anchor" href="#接口时间窗口" aria-hidden="true">#</a> 接口时间窗口</h5><p>此时可以使用<code>Guava Cache</code>，类似于一个<code>ConcurrentMap</code>,但并不完全一样。</p><p>最基础的不同是<code>ConcurrentMap</code>保存所有的元素知道它们被明确删除,<code>Guava Cache</code>可以配置自动过期</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">//计数器</span>
counter<span class="token punctuation">;</span>
<span class="token comment">// 限制数量</span>
limit<span class="token punctuation">;</span>
<span class="token comment">// 限制单位 1000=秒</span>
unit<span class="token punctuation">;</span>
<span class="token comment">// 获得当前时间</span>
current <span class="token operator">=</span> system<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> unit
<span class="token comment">//判断时间窗内是否限制访问</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 拒绝</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="使用guava实现" tabindex="-1"><a class="header-anchor" href="#使用guava实现" aria-hidden="true">#</a> 使用guava实现</h3><p><strong>引入包</strong></p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>28.1-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p><strong>核心代码</strong></p><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">&gt;</span></span> counter <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
				<span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

					<span class="token annotation punctuation">@Override</span>
					<span class="token keyword">public</span> <span class="token class-name">AtomicLong</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Long</span> secend<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
						<span class="token comment">// TODO Auto-generated method stub</span>
						<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="令牌桶实现" tabindex="-1"><a class="header-anchor" href="#令牌桶实现" aria-hidden="true">#</a> 令牌桶实现</h4><p><strong>稳定模式(SmoothBursty:令牌生成速度恒定)</strong></p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// RateLimiter.create(2)每秒产生的令牌数</span>
		<span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// limiter.acquire() 阻塞的方式获取令牌</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// TODO Auto-generated catch block</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>\`\`\`RateLimiter.create(2)\`\` 容量和突发量，令牌桶算法允许将一段时间内没有消费的令牌暂存到令牌桶中，用来突发消费。</p><p><strong>渐进模式(SmoothWarmingUp:令牌生成速度缓慢提升直到维持在一个稳定值)</strong></p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token comment">// 平滑限流，从冷启动速率（满的）到平均消费速率的时间间隔</span>
		<span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000l</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// TODO Auto-generated catch block</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>超时</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>boolean tryAcquire = limiter.tryAcquire(Duration.ofMillis(11));
</code></pre></div><p>在timeout时间内是否能够获得令牌，异步执行</p><h3 id="分布式系统限流" tabindex="-1"><a class="header-anchor" href="#分布式系统限流" aria-hidden="true">#</a> 分布式系统限流</h3><h4 id="nginx-lua" tabindex="-1"><a class="header-anchor" href="#nginx-lua" aria-hidden="true">#</a> Nginx + Lua</h4><p>可以使用resty.lock保持原子特性，请求之间不会产生锁的重入</p><p>https://github.com/openresty/lua-resty-lock</p><p>使用lua_shared_dict存储数据</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> locks <span class="token operator">=</span> require <span class="token string">&quot;resty.lock&quot;</span>

<span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> lock <span class="token operator">=</span>locks<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">&quot;locks&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> elapsed<span class="token punctuation">,</span> err <span class="token operator">=</span>lock<span class="token punctuation">:</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token string">&quot;limit_key&quot;</span><span class="token punctuation">)</span> <span class="token comment">--互斥锁 保证原子特性</span>
    <span class="token keyword">local</span> limit_counter <span class="token operator">=</span>ngx<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>limit_counter <span class="token comment">--计数器</span>

    <span class="token keyword">local</span> key <span class="token operator">=</span> <span class="token string">&quot;ip:&quot;</span> <span class="token operator">..</span>os<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">local</span> limit <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">--限流大小</span>
    <span class="token keyword">local</span> current <span class="token operator">=</span>limit_counter<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>

    <span class="token keyword">if</span> current <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">and</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&gt;</span> limit <span class="token keyword">then</span> <span class="token comment">--如果超出限流大小</span>
       lock<span class="token punctuation">:</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">end</span>
    <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
       limit_counter<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--第一次需要设置过期时间，设置key的值为1，</span>
过期时间为<span class="token number">1</span>秒
    <span class="token keyword">else</span>
        limit_counter<span class="token punctuation">:</span><span class="token function">incr</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">--第二次开始加1即可</span>
    <span class="token keyword">end</span>
    lock<span class="token punctuation">:</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token keyword">end</span>
ngx<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre></div>`,54),c=[o];function e(u,l){return a(),s("div",null,c)}const k=n(p,[["render",e],["__file","Tce_c.html.vue"]]);export{k as default};
