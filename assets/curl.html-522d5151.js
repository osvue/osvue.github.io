import{_ as o,M as p,p as c,q as l,R as a,t as s,N as e,a1 as t}from"./framework-d81ad7e5.js";const r={},d=a("h2",{id:"crul",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#crul","aria-hidden":"true"},"#"),s(" crul")],-1),u=a("ul",null,[a("li",null,[s("curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端 "),a("strong",null,"（client）"),s(" 的 URL 工具的意思。")])],-1),i=a("p",null,'curl 是一种命令行工具，作用是发出网络请求，然后获取数据，显示在"标准输出"（stdout）上面。它支持多种协议，下面列举其常用功能。',-1),g=a("h5",{id:"一、查看网页源码",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#一、查看网页源码","aria-hidden":"true"},"#"),s(" 一、查看网页源码")],-1),k={href:"https://link.jianshu.com/?t=http://www.sina.com",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-xml" data-ext="xml"><pre class="language-xml"><code>$ curl www.sina.com
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>301 Moved Permanently<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>white<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>301 Moved Permanently<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span>nginx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>如果要把这个网页保存下来，可以使用 <code>-o</code> 参数：</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span>o <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span> www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com
</code></pre></div><h5 id="二、自动跳转" tabindex="-1"><a class="header-anchor" href="#二、自动跳转" aria-hidden="true">#</a> 二、自动跳转</h5><p>有的网址是自动跳转的。使用 <code>-L</code> 参数，curl 就会跳转到新的网址。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token constant">L</span> www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com
</code></pre></div>`,6),b={href:"https://link.jianshu.com/?t=http://www.sina.com.cn",target:"_blank",rel:"noopener noreferrer"},m=t(`<h5 id="三、显示头信息" tabindex="-1"><a class="header-anchor" href="#三、显示头信息" aria-hidden="true">#</a> 三、显示头信息</h5><p><code>-i</code> 参数可以显示 http response 的头信息，连同网页代码一起。<code>-I</code> 参数则只显示 http response 的头信息。</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>$ curl -i www.sina.com
HTTP/1.1 301 Moved Permanently
Server: nginx
Date: Tue, 23 Aug 2016 08:30:16 GMT
Content-Type: text/html
Location: http://www.sina.com.cn/
Expires: Tue, 23 Aug 2016 08:32:16 GMT
Cache-Control: max-age=120
Age: 102
Content-Length: 178
X-Cache: HIT from xd33-83.sina.com.cn

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>301 Moved Permanently<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>white<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>301 Moved Permanently<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">&gt;</span></span>nginx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h5 id="四、显示通信过程" tabindex="-1"><a class="header-anchor" href="#四、显示通信过程" aria-hidden="true">#</a> 四、显示通信过程</h5><p><code>-v</code> 参数可以显示一次 http 通信的整个过程，包括端口连接和 http request 头信息。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-v</span> www.sina.com
* Rebuilt URL to: www.sina.com/
* Hostname was NOT found <span class="token keyword">in</span> DNS cache
*   Trying <span class="token number">202.108</span>.33.60<span class="token punctuation">..</span>.
* Connected to www.sina.com <span class="token punctuation">(</span><span class="token number">202.108</span>.33.60<span class="token punctuation">)</span> port <span class="token number">80</span> <span class="token punctuation">(</span><span class="token comment">#0)</span>
<span class="token operator">&gt;</span> GET / HTTP/1.1
<span class="token operator">&gt;</span> User-Agent: curl/7.35.0
<span class="token operator">&gt;</span> Host: www.sina.com
<span class="token operator">&gt;</span> Accept: */*
<span class="token operator">&gt;</span> 
<span class="token operator">&lt;</span> HTTP/1.1 <span class="token number">301</span> Moved Permanently
* Server nginx is not blacklisted
<span class="token operator">&lt;</span> Server: nginx
<span class="token operator">&lt;</span> Date: Tue, <span class="token number">23</span> Aug <span class="token number">2016</span> 08:48:14 GMT
<span class="token operator">&lt;</span> Content-Type: text/html
<span class="token operator">&lt;</span> Location: http://www.sina.com.cn/
<span class="token operator">&lt;</span> Expires: Tue, <span class="token number">23</span> Aug <span class="token number">2016</span> 08:50:14 GMT
<span class="token operator">&lt;</span> Cache-Control: max-age<span class="token operator">=</span><span class="token number">120</span>
<span class="token operator">&lt;</span> Age: <span class="token number">40</span>
<span class="token operator">&lt;</span> Content-Length: <span class="token number">178</span>
<span class="token operator">&lt;</span> X-Cache: HIT from xd33-81.sina.com.cn
<span class="token operator">&lt;</span> 
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token number">301</span> Moved Permanently<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body <span class="token assign-left variable">bgcolor</span><span class="token operator">=</span><span class="token string">&quot;white&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>center<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token number">301</span> Moved Permanently<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>/center<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>hr<span class="token operator">&gt;</span><span class="token operator">&lt;</span>center<span class="token operator">&gt;</span>nginx<span class="token operator">&lt;</span>/center<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
* Connection <span class="token comment">#0 to host www.sina.com left intact</span>
</code></pre></div><p>如果觉得上面的信息还不够，那么下面的命令可以查看更详细的通信过程。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token operator">-</span>trace output<span class="token punctuation">.</span>txt www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com
</code></pre></div><p>或者</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token operator">-</span>trace<span class="token operator">-</span>ascii output<span class="token punctuation">.</span>txt www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com
</code></pre></div><p>运行后，打开 output.txt 文件查看。</p><h5 id="五、发送表单信息" tabindex="-1"><a class="header-anchor" href="#五、发送表单信息" aria-hidden="true">#</a> 五、发送表单信息</h5><p>发送表单信息有 GET 和 POST 两种方法。GET 方法相对简单，只要把数据附在网址后面就行。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl example<span class="token punctuation">.</span>com<span class="token operator">/</span>form<span class="token punctuation">.</span>cgi<span class="token operator">?</span>data<span class="token operator">=</span>xxx
</code></pre></div><p>POST 方法必须把数据和网址分开，curl 就要用到 <code>--data</code> 或者 <code>-d</code> 参数。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token constant">X</span> <span class="token constant">POST</span> <span class="token operator">-</span><span class="token operator">-</span>data <span class="token string-literal"><span class="token string">&quot;data=xxx&quot;</span></span> example<span class="token punctuation">.</span>com<span class="token operator">/</span>form<span class="token punctuation">.</span>cgi

curl <span class="token operator">-</span><span class="token constant">H</span> <span class="token string-literal"><span class="token string">&quot;Content-Type: application/json&quot;</span></span> <span class="token operator">-</span><span class="token constant">X</span> <span class="token constant">POST</span> <span class="token operator">-</span>d <span class="token string-literal"><span class="token string">&quot;{\\&quot;abc\\&quot;:123}&quot;</span></span> <span class="token string-literal"><span class="token string">&quot;https://httpbin.org/post&quot;</span></span>
</code></pre></div><p>json数据放在一个文件里</p><div class="language-text" data-ext="text"><pre class="language-text"><code>　curl -H &quot;Content-Type: application/json&quot; -X POST -d @test.json URL

</code></pre></div><p>如果你的数据没有经过表单编码，还可以让 curl 为你编码，参数是 <code>--data-urlencode</code>。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token constant">X</span> <span class="token constant">POST</span><span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">-</span>urlencode <span class="token string-literal"><span class="token string">&quot;date=April 1&quot;</span></span> example<span class="token punctuation">.</span>com<span class="token operator">/</span>form<span class="token punctuation">.</span>cgi
</code></pre></div><h5 id="六、http动词" tabindex="-1"><a class="header-anchor" href="#六、http动词" aria-hidden="true">#</a> 六、HTTP动词</h5><p>curl 默认的 HTTP 动词是 GET，使用 <code>-X</code> 参数可以支持其他动词。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token constant">X</span> <span class="token constant">POST</span> www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com
$ curl <span class="token operator">-</span><span class="token constant">X</span> <span class="token constant">DELETE</span> www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com
</code></pre></div><h5 id="七、user-agent字段" tabindex="-1"><a class="header-anchor" href="#七、user-agent字段" aria-hidden="true">#</a> 七、User Agent字段</h5><p>这个字段是用来表示客户端的设备信息。服务器有时会根据这个字段，针对不同设备，返回不同格式的网页，比如手机版和桌面版。 浏览器的 User Agent 是：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> <span class="token operator">like</span> Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">51.0</span><span class="token number">.2704</span><span class="token number">.84</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>
</code></pre></div><p>curl 可以这样模拟：</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token operator">-</span>user<span class="token operator">-</span>agent <span class="token string-literal"><span class="token string">&quot;[User Agent]&quot;</span></span> <span class="token punctuation">[</span><span class="token constant">URL</span><span class="token punctuation">]</span>
</code></pre></div><h5 id="八、cookie" tabindex="-1"><a class="header-anchor" href="#八、cookie" aria-hidden="true">#</a> 八、cookie</h5><p>使用 <code>--cookie</code> 参数，可以让 curl 发送 cookie。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token operator">-</span>cookie <span class="token string-literal"><span class="token string">&quot;name=xxx&quot;</span></span> www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com
</code></pre></div><p>至于具体的 cookie 的值，可以从 http response 头信息的 <code>Set-Cookie</code> 字段中得到。</p><h5 id="九、增加头信息" tabindex="-1"><a class="header-anchor" href="#九、增加头信息" aria-hidden="true">#</a> 九、增加头信息</h5><p>有时需要在 http request 之中，自行增加一个头信息。<code>--header</code> 参数就可以起到这个作用。</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>$ curl <span class="token operator">--</span>header <span class="token string">&quot;Content-Type:application/json&quot;</span> http<span class="token operator">:</span><span class="token comment">//example.com</span>
</code></pre></div><h5 id="十、http认证" tabindex="-1"><a class="header-anchor" href="#十、http认证" aria-hidden="true">#</a> 十、HTTP认证</h5><p>有些网域需要 HTTP 认证，这时 curl 需要用到 <code>--user</code> 或者 <code>-u</code> 参数。</p><div class="language-ruby" data-ext="rb"><pre class="language-ruby"><code>$ curl <span class="token operator">-</span><span class="token operator">-</span>user name<span class="token symbol">:password</span> example<span class="token punctuation">.</span>com
</code></pre></div><h2 id="curl" tabindex="-1"><a class="header-anchor" href="#curl" aria-hidden="true">#</a> CURL</h2><p>不带有任何参数时，curl 就是发出 GET 请求。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://www.example.com
</code></pre></div></blockquote><p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p><h2 id="a" tabindex="-1"><a class="header-anchor" href="#a" aria-hidden="true">#</a> <strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-A</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#39;</span> https://google.com
</code></pre></div></blockquote><p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-A</span> <span class="token string">&#39;&#39;</span> https://google.com
</code></pre></div></blockquote><p>上面命令会移除<code>User-Agent</code>标头。</p><p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;User-Agent: php/1.0&#39;</span> https://google.com
</code></pre></div></blockquote><h2 id="b" tabindex="-1"><a class="header-anchor" href="#b" aria-hidden="true">#</a> <strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">&#39;foo=bar&#39;</span> https://google.com
</code></pre></div></blockquote><p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">&#39;foo1=bar;foo2=bar2&#39;</span> https://google.com
</code></pre></div></blockquote><p>上面命令发送两个 Cookie。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-b</span> cookies.txt https://www.google.com
</code></pre></div></blockquote><p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> <strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-c</span> cookies.txt https://www.google.com
</code></pre></div></blockquote><p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p><h2 id="d" tabindex="-1"><a class="header-anchor" href="#d" aria-hidden="true">#</a> <strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> -d<span class="token string">&#39;login=emma＆password=123&#39;</span>-X POST https://google.com/login
<span class="token comment"># 或者</span>
$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;login=emma&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;password=123&#39;</span> <span class="token parameter variable">-X</span> POST  https://google.com/login
</code></pre></div></blockquote><p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p><p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;@data.txt&#39;</span> https://google.com/login
</code></pre></div></blockquote><p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p><h2 id="data-urlencode" tabindex="-1"><a class="header-anchor" href="#data-urlencode" aria-hidden="true">#</a> <strong>--data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> --data-urlencode <span class="token string">&#39;comment=hello world&#39;</span> https://google.com/login
</code></pre></div></blockquote><p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p><h2 id="e" tabindex="-1"><a class="header-anchor" href="#e" aria-hidden="true">#</a> <strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></div></blockquote><p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p><p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Referer: https://google.com?q=example&#39;</span> https://www.example.com
</code></pre></div></blockquote><h2 id="f" tabindex="-1"><a class="header-anchor" href="#f" aria-hidden="true">#</a> <strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;file=@photo.png&#39;</span> https://google.com/profile
</code></pre></div></blockquote><p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p><p><code>-F</code>参数可以指定 MIME 类型。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;file=@photo.png;type=image/png&#39;</span> https://google.com/profile
</code></pre></div></blockquote><p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p><p><code>-F</code>参数也可以指定文件名。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;file=@photo.png;filename=me.png&#39;</span> https://google.com/profile
</code></pre></div></blockquote><p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p><h2 id="g" tabindex="-1"><a class="header-anchor" href="#g" aria-hidden="true">#</a> <strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-G</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;q=kitties&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;count=20&#39;</span> https://google.com/search
</code></pre></div></blockquote><p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p><p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-G</span> --data-urlencode <span class="token string">&#39;comment=hello world&#39;</span> https://www.example.com
</code></pre></div></blockquote><h2 id="h" tabindex="-1"><a class="header-anchor" href="#h" aria-hidden="true">#</a> <strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Accept-Language: en-US&#39;</span> https://google.com
</code></pre></div></blockquote><p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Accept-Language: en-US&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Secret-Message: xyzzy&#39;</span> https://google.com
</code></pre></div></blockquote><p>上面命令添加两个 HTTP 标头。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;}&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Content-Type: application/json&#39;</span> https://google.com/login
</code></pre></div></blockquote><p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p><h2 id="i" tabindex="-1"><a class="header-anchor" href="#i" aria-hidden="true">#</a> <strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-i</span> https://www.example.com
</code></pre></div></blockquote><p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><h2 id="i-1" tabindex="-1"><a class="header-anchor" href="#i-1" aria-hidden="true">#</a> <strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-I</span> https://www.example.com
</code></pre></div></blockquote><p>上面命令输出服务器对 HEAD 请求的回应。</p><p><code>--head</code>参数等同于<code>-I</code>。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">--head</span> https://www.example.com
</code></pre></div></blockquote><h2 id="k" tabindex="-1"><a class="header-anchor" href="#k" aria-hidden="true">#</a> <strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-k</span> https://www.example.com
</code></pre></div></blockquote><p>上面命令不会检查服务器的 SSL 证书是否正确。</p><h2 id="l" tabindex="-1"><a class="header-anchor" href="#l" aria-hidden="true">#</a> <strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;tweet=hi&#39;</span> https://api.twitter.com/tweet
</code></pre></div></blockquote><h2 id="limit-rate" tabindex="-1"><a class="header-anchor" href="#limit-rate" aria-hidden="true">#</a> <strong>--limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> --limit-rate 200k https://google.com
</code></pre></div></blockquote><p>上面命令将带宽限制在每秒 200K 字节。</p><h2 id="o" tabindex="-1"><a class="header-anchor" href="#o" aria-hidden="true">#</a> <strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-o</span> example.html https://www.example.com
</code></pre></div></blockquote><p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p><h2 id="o-1" tabindex="-1"><a class="header-anchor" href="#o-1" aria-hidden="true">#</a> <strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-O</span> https://www.example.com/foo/bar.html
</code></pre></div></blockquote><p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p><h2 id="s" tabindex="-1"><a class="header-anchor" href="#s" aria-hidden="true">#</a> <strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-s</span> https://www.example.com
</code></pre></div></blockquote><p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-o</span> /dev/null https://google.com
</code></pre></div></blockquote><h2 id="s-1" tabindex="-1"><a class="header-anchor" href="#s-1" aria-hidden="true">#</a> <strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-o</span> /dev/null https://google.com
</code></pre></div></blockquote><p>上面命令没有任何输出，除非发生错误。</p><h2 id="u" tabindex="-1"><a class="header-anchor" href="#u" aria-hidden="true">#</a> <strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-u</span> <span class="token string">&#39;bob:12345&#39;</span> https://google.com/login
</code></pre></div></blockquote><p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> https://bob:12345@google.com/login
</code></pre></div></blockquote><p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-u</span> <span class="token string">&#39;bob&#39;</span> https://google.com/login
</code></pre></div></blockquote><p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><h2 id="v" tabindex="-1"><a class="header-anchor" href="#v" aria-hidden="true">#</a> <strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-v</span> https://www.example.com
</code></pre></div></blockquote><p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">--trace</span> - https://www.example.com
</code></pre></div></blockquote><h2 id="x" tabindex="-1"><a class="header-anchor" href="#x" aria-hidden="true">#</a> <strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-x</span> socks5://james:cats@myproxy.com:8080 https://www.example.com
</code></pre></div></blockquote><p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-x</span> james:cats@myproxy.com:8080 https://www.example.com
</code></pre></div></blockquote><p>上面命令中，请求的代理使用 HTTP 协议。</p><h2 id="x-1" tabindex="-1"><a class="header-anchor" href="#x-1" aria-hidden="true">#</a> <strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> POST https://www.example.com
</code></pre></div></blockquote><p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p>`,167);function v(x,w){const n=p("ExternalLinkIcon");return c(),l("div",null,[d,u,i,g,a("p",null,[s("直接在 curl 命令后加上网址，就可以看到网页源码。以网址 "),a("a",k,[s("www.sina.com"),e(n)]),s("为例（选择该网址，主要因为它的网页代码较短）。")]),h,a("p",null,[s("键入上面的命令，结果自动跳转为 "),a("a",b,[s("www.sina.com.cn"),e(n)]),s("。")]),m])}const f=o(r,[["render",v],["__file","curl.html.vue"]]);export{f as default};
