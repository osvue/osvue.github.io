import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const e={},p=t(`<ul><li><p>什么是 BeanDefinition？</p><ul><li>​ BeanDefinition 是 Spring Framework 中定义 Bean 的配置元信息接口，包含：</li><li>​ Bean 的类名</li><li>​ Bean 行为配置元素，如作用域、自动绑定的模式，生命周期回调等</li><li>​ 其他 Bean 引用，又可称作合作者（collaborators）或者依赖（dependencies）</li><li>​ 配置设置，比如 Bean 属性（Properties）</li></ul></li></ul><table><thead><tr><th>Class</th><th>Bean 全类名，必须是具体类，不能用抽象类或接口</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>Name</td><td>Bean 的名称或者 ID</td></tr><tr><td></td><td></td></tr><tr><td>Scope</td><td>Bean 的作用域（如：singleton、prototype 等）</td></tr><tr><td></td><td></td></tr><tr><td>Constructor arguments</td><td>Bean 构造器参数（用于依赖注入）</td></tr><tr><td></td><td></td></tr><tr><td>Properties</td><td>Bean 属性设置（用于依赖注入）</td></tr><tr><td></td><td></td></tr><tr><td>Autowiring mode</td><td>Bean 自动绑定模式（如：通过名称 byName）</td></tr><tr><td></td><td></td></tr><tr><td>Lazy initialization mode</td><td>Bean 延迟初始化模式（延迟和非延迟）</td></tr><tr><td></td><td></td></tr><tr><td>Initialization method</td><td>Bean 初始化回调方法名称</td></tr><tr><td></td><td></td></tr><tr><td>Destruction method</td><td>Bean 销毁回调方法名称</td></tr></tbody></table><ul><li>BeanDefinition 构建 <ul><li>通过 BeanDefinitionBuilder</li><li>通过 AbstractBeanDefinition 以及派生类</li></ul></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1.通过 BeanDefinitionBuilder 构建</span>
        <span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过属性设置</span>
        beanDefinitionBuilder
                <span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;鲁斯菲尔&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 BeanDefinition 实例</span>
        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// BeanDefinition 并非 Bean 终态，可以自定义修改</span>

        <span class="token comment">// 2. 通过 AbstractBeanDefinition 以及派生类</span>
        <span class="token class-name">GenericBeanDefinition</span> genericBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置 Bean 类型</span>
        genericBeanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过 MutablePropertyValues 批量操作属性</span>
        <span class="token class-name">MutablePropertyValues</span> propertyValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        propertyValues.addPropertyValue(&quot;id&quot;, 1);</span>
<span class="token comment">//        propertyValues.addPropertyValue(&quot;name&quot;, &quot;鲁斯菲尔&quot;);</span>
        propertyValues
                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;鲁斯菲尔&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过 set MutablePropertyValues 批量操作属性</span>
        genericBeanDefinition<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>propertyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h3 id="bean-实例化-instantiation" tabindex="-1"><a class="header-anchor" href="#bean-实例化-instantiation" aria-hidden="true">#</a> Bean 实例化（Instantiation）</h3><ul><li>常规方式 <ul><li>通过构造器（配置元信息：XML、Java 注解和 Java API ）</li><li>通过静态工厂方法（配置元信息：XML 和 Java API ）</li><li>通过 Bean 工厂方法（配置元信息：XML和 Java API ）</li><li>通过 FactoryBean（配置元信息：XML、Java 注解和 Java API ）</li></ul></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
&lt;!--FactoryBean 实现 --&gt;
    &lt;bean id=&quot;huser&quot; class=&quot;com.osvue.spring.in.bean.difinition.UserFactoryBean&quot;/&gt;

*/</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;context/ioc.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        applicationContext<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
</code></pre></div><ul><li>特殊方式 <ul><li>通过 ServiceLoaderFactoryBean（配置元信息：XML、Java 注解和 Java API ）</li><li>通过 AutowireCapableBeanFactory#createBean(java.lang.Class, int, boolean)</li><li>通过 BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</li></ul></li></ul><h3 id="bean-初始化-initialization" tabindex="-1"><a class="header-anchor" href="#bean-初始化-initialization" aria-hidden="true">#</a> Bean 初始化（Initialization）</h3><ul><li>@PostConstruct 标注方法</li><li>实现 InitializingBean 接口的 afterPropertiesSet() 方法</li><li>自定义初始化方法 <ul><li>XML 配置：<code>&lt;bean init-method=”init” ... /&gt;</code></li><li>Java 注解：@Bean(initMethod=”init”)</li><li>Java API：AbstractBeanDefinition#setInitMethodName(String)</li></ul></li></ul><h3 id="延迟初始化-spring-bean" tabindex="-1"><a class="header-anchor" href="#延迟初始化-spring-bean" aria-hidden="true">#</a> 延迟初始化 Spring Bean</h3><ul><li>Bean 延迟初始化（Lazy Initialization）</li><li>XML 配置：<code>&lt;bean lazy-init=”true” ... /&gt;</code></li><li>Java 注解：@Lazy(true)</li></ul><h3 id="bean-销毁-destroy" tabindex="-1"><a class="header-anchor" href="#bean-销毁-destroy" aria-hidden="true">#</a> Bean 销毁（Destroy）</h3><ul><li>@PreDestroy 标注方法</li><li>实现 DisposableBean 接口的 destroy() 方法</li><li>自定义销毁方法 <ul><li>XML 配置：&lt;bean destroy=”destroy” ... /&gt;</li><li>Java 注解：@Bean(destroy=”destroy”)</li><li>Java API：AbstractBeanDefinition#setDestroyMethodName(String)</li></ul></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">//        applicationContext.refresh();</span>

        <span class="token class-name">User</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
        applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><p>如何注册一个 Spring Bean？ 答：通过 BeanDefinition 和外部单体对象来注册</p></li><li><p>什么是 Spring BeanDefinition？ 答：回顾“定义 Spring Bean” 和 “BeanDefinition 元信息”</p></li><li><p>Spring 容器是怎样管理注册 Bean 答 IoC 配置元信息读取和解析、依赖查找和注入以及 Bean 生命周期等。</p></li></ul>`,16),o=[p];function c(i,l){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","spring04_bean.html.vue"]]);export{r as default};
