import{_ as n,p as s,q as a,a1 as p}from"./framework-d81ad7e5.js";const t={},o=p(`<p>通过控制图层，层级和大小来实现图层透视功能。 主要使用图层监听事件 prerender监听图层渲染之前，postrender监听图层渲染之后。</p><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.map</span> <span class="token punctuation">{</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.6.1/css/ol.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.6.1/build/ol.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 图层</span>
    <span class="token keyword">var</span> roads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Tile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>XYZ</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://webrd01.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x={x}&amp;y={y}&amp;z={z}&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 图层2</span>
    <span class="token keyword">var</span> imagery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Tile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>XYZ</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 实例</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;map&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> container<span class="token punctuation">,</span>
      <span class="token literal-property property">layers</span><span class="token operator">:</span> <span class="token punctuation">[</span>roads<span class="token punctuation">,</span> imagery<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">view</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>View</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">center</span><span class="token operator">:</span> ol<span class="token punctuation">.</span>proj<span class="token punctuation">.</span><span class="token function">fromLonLat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">37.41</span><span class="token punctuation">,</span> <span class="token number">8.82</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">zoom</span><span class="token operator">:</span> <span class="token number">4</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><ul><li>这里我们创建了两个图层，记住图层的默认层级都是后面添加的大于前面的层级。</li><li>要实现图层透视的效果，其实就是在基础图层上固定范围绘制上图层来达到效果。</li></ul><h3 id="获取鼠标在地图上的坐标位置" tabindex="-1"><a class="header-anchor" href="#获取鼠标在地图上的坐标位置" aria-hidden="true">#</a> 获取鼠标在地图上的坐标位置</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>   <span class="token comment">// 地图像素位置</span>
    <span class="token keyword">let</span> mousePosition <span class="token operator">=</span> <span class="token keyword">null</span>

    container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mousemove&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// getEventPixel(event) 根据事件当前位置 返回地图像素位置。</span>
      mousePosition <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEventPixel</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>

      <span class="token comment">// 重新渲染地图 render()</span>
      map<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    container<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;mouseout&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      mousePosition <span class="token operator">=</span> <span class="token keyword">null</span>
      map<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><ol><li>创建全局变量（<code>mousePosition</code>）实时保存鼠标地理位置。</li><li>通过监听容器的<strong>鼠标移入事件</strong>获取当前位置窗口位置，使用<code>getEventPixel()</code>转换为地理位置。</li><li>监听容器的<strong>鼠标移出事件</strong>取消地理位置。</li><li>每次监听都需要重绘地图，用于透视图层内容的更新。</li></ol><h3 id="监听图层事件" tabindex="-1"><a class="header-anchor" href="#监听图层事件" aria-hidden="true">#</a> 监听图层事件</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code> 
    <span class="token comment">// 半径</span>
    <span class="token keyword">let</span> radius <span class="token operator">=</span> <span class="token number">75</span>
    <span class="token comment">// 图层渲染之前</span>
    imagery<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;prerender&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> event<span class="token punctuation">.</span>context
      ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保存</span>
      ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>mousePosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>mousePosition<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mousePosition<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span>
        ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> radius<span class="token punctuation">)</span> <span class="token operator">/</span> radius
        ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&#39;rgba(0,0,0,0.5)&#39;</span>
        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 使用裁剪 只加载 圆内数据</span>
      ctx<span class="token punctuation">.</span><span class="token function">clip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 图层渲染之后</span>
    imagery<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;postrender&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ctx <span class="token operator">=</span> event<span class="token punctuation">.</span>context
      ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><ol><li>这里绘制的是圆形，你可以自定义其他图形。</li><li>通过图层事件<code>prerender</code>图层渲染之前，在监听中返回的图层实例<code>canvas</code>。这里一定要先保存状态<code>ctx.save()</code>，通过<code>mousePosition</code>获取鼠标的坐标，随意绘制图形，使用<code>clip()</code>裁剪画布，只展示裁剪后的内容。</li><li>通过<code>postrender</code>图层渲染之后。恢复保存的<code>canvas</code>内容展示。</li></ol><h3 id="使用vector图层通过绘制多边行的方法" tabindex="-1"><a class="header-anchor" href="#使用vector图层通过绘制多边行的方法" aria-hidden="true">#</a> 使用<code>Vector</code>图层通过绘制多边行的方法</h3><ul><li>绘制出省市区的多边行，把该图层添加到地图图层上，就实现了绘制省市区图形。</li></ul><h2 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> Vector</h2><ul><li><strong>矢量图层</strong>： 在客户端呈现的矢量数据。构成一个矢量图层需要一个数据源(<code>source</code>)和一个样式(<code>style</code>)，数据源构成矢量图层的要素，样式规定要素显示的方式和外观。一个矢量图层包含一个到多个要素(<code>feature</code>)，每个要素由地理属(<code>geometry</code>)和其他属性组成。</li><li>常用于从数据库中请求数据，接受数据，并将接收的数据解析成图层上的信息。如将鼠标移动到中国，相应的区域会以<strong>红色高亮</strong>显示出来，高亮便是矢量图层的行为。</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>  
    <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;map&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 图层</span>
    <span class="token keyword">var</span> layerTile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Tile</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>XYZ</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://webrd01.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x={x}&amp;y={y}&amp;z={z}&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 视图</span>
    <span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>View</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">center</span><span class="token operator">:</span> ol<span class="token punctuation">.</span>proj<span class="token punctuation">.</span><span class="token function">fromLonLat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">130.41</span><span class="token punctuation">,</span> <span class="token number">28.82</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">zoom</span><span class="token operator">:</span> <span class="token number">4</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    map<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span>
    map<span class="token punctuation">.</span><span class="token function">addLayer</span><span class="token punctuation">(</span>layerTile<span class="token punctuation">)</span>
  
</code></pre></div><h3 id="绘制图层" tabindex="-1"><a class="header-anchor" href="#绘制图层" aria-hidden="true">#</a> 绘制图层</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>js复制代码    <span class="token comment">// 设置图层</span>
    <span class="token keyword">var</span> areaLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">features</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 添加图层</span>
    map<span class="token punctuation">.</span><span class="token function">addLayer</span><span class="token punctuation">(</span>areaLayer<span class="token punctuation">)</span>

    <span class="token keyword">let</span> areaFeature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    geo<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> areaFeatureTem <span class="token operator">=</span> <span class="token keyword">null</span>
      <span class="token keyword">let</span> lineData <span class="token operator">=</span> g<span class="token punctuation">.</span>features<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>lineData<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;MultiPolygon&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        areaFeatureTem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Feature</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">geometry</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>MultiPolygon</span><span class="token punctuation">(</span>lineData<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>coordinates<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token string">&#39;EPSG:4326&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EPSG:3857&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lineData<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;Polygon&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        areaFeatureTem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Feature</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">geometry</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Polygon</span><span class="token punctuation">(</span>lineData<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>coordinates<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token string">&#39;EPSG:4326&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EPSG:3857&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      areaFeatureTem<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;#4e98f444&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
            <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">227</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      areaFeature<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>areaFeatureTem<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 加入组装好的数据</span>
    areaLayer<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addFeatures</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>areaFeature<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>先创建图层，然后创建要素。多边行在要素中主要分为两种，<code>MultiPolygon</code>、<code>Polygon</code>，都是表示多边行的。不同的是<code>MultiPolygon</code>数据格式是4维数组，<code>Polygon</code>是3维数组。最后把创建好的要素放入图层中。</li></ul><h3 id="_1、tilelayer-瓦片图层。一般加载切片图层-wmts-wms" tabindex="-1"><a class="header-anchor" href="#_1、tilelayer-瓦片图层。一般加载切片图层-wmts-wms" aria-hidden="true">#</a> 1、TileLayer 瓦片图层。一般加载切片图层（wmts,wms）</h3><p>天地图（wmts）</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> tempLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TileLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">projection</span><span class="token operator">:</span> <span class="token string">&quot;EPSG:4326&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">XYZ</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://t0.tianditu.gov.cn/DataServer?T=img_w&amp;x={x}&amp;y={y}&amp;l={z}&amp;tk=&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token comment">// 加载 wms 服务</span>
      <span class="token keyword">let</span> wmsLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TileLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">preload</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TileWMS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8090/geoserver/keshan/wms&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">//定义服务的请求参数</span>
          <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token constant">LAYERS</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//图层名称</span>
            <span class="token constant">FORMAT</span><span class="token operator">:</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">,</span>
            <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token string">&quot;1.1.1&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">tiled</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token constant">STYLES</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">exceptions</span><span class="token operator">:</span> <span class="token string">&quot;application/vnd.ogc.se_inimage&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">cql_filter</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//过滤条件</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token comment">//可选，定义请求瓦片的大小 级别等，不需要的话可注释</span>
          <span class="token literal-property property">tileGrid</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>tilegrid<span class="token punctuation">.</span>TileGrid</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">resolutions</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTileResolutions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">tileSize</span><span class="token operator">:</span> <span class="token number">512</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">serverType</span><span class="token operator">:</span> <span class="token string">&quot;geoserver&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">crossOrigin</span><span class="token operator">:</span> <span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//跨域请求，主要涉及到地图图片的导出</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">maxZoom</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
        <span class="token literal-property property">minZoom</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token literal-property property">zIndex</span><span class="token operator">:</span>  <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//自定义一些图层的属性</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="wmts服务" tabindex="-1"><a class="header-anchor" href="#wmts服务" aria-hidden="true">#</a> wmts服务</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>      <span class="token comment">// 加载 wmts 服务</span>
      <span class="token keyword">const</span> matrixIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> z <span class="token operator">&lt;</span> <span class="token number">21</span><span class="token punctuation">;</span> <span class="token operator">++</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        matrixIds<span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;EPSG:4490_dzdtz:&quot;</span> <span class="token operator">+</span> z<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//自己瓦片的比例尺</span>
      <span class="token keyword">var</span> resolutions <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token number">1.4078260157100582</span><span class="token punctuation">,</span> <span class="token number">0.7031250000000002</span><span class="token punctuation">,</span> <span class="token number">0.3515625000000001</span><span class="token punctuation">,</span>
        <span class="token number">0.17578125000000006</span><span class="token punctuation">,</span> <span class="token number">0.08789062500000003</span><span class="token punctuation">,</span> <span class="token number">0.043945312500000014</span><span class="token punctuation">,</span>
        <span class="token number">0.021972656250000007</span><span class="token punctuation">,</span> <span class="token number">0.010986328125000003</span><span class="token punctuation">,</span> <span class="token number">0.005493164062500002</span><span class="token punctuation">,</span>
        <span class="token number">0.002746582031250001</span><span class="token punctuation">,</span> <span class="token number">0.0013732910156250004</span><span class="token punctuation">,</span> <span class="token number">6.866455078125002e-4</span><span class="token punctuation">,</span>
        <span class="token number">3.433227539062501e-4</span><span class="token punctuation">,</span> <span class="token number">1.7166137695312505e-4</span><span class="token punctuation">,</span> <span class="token number">8.583068847656253e-5</span><span class="token punctuation">,</span>
        <span class="token number">4.2915344238281264e-5</span><span class="token punctuation">,</span> <span class="token number">2.1457672119140632e-5</span><span class="token punctuation">,</span> <span class="token number">1.0728836059570316e-5</span><span class="token punctuation">,</span>
        <span class="token number">5.364418029785158e-6</span><span class="token punctuation">,</span> <span class="token number">2.682209014892579e-6</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> wmtsLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TileLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">preload</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">WMTS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
          <span class="token literal-property property">layer</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">matrixSet</span><span class="token operator">:</span> <span class="token string">&quot;EPSG:4490_dzdtz&quot;</span><span class="token punctuation">,</span> <span class="token comment">//瓦片矩阵集的名称</span>
          <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">tileGrid</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">WMTSTileGrid</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">tileSize</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">extent</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">180.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">270.4034600217749</span><span class="token punctuation">,</span> <span class="token number">180.4034600217749</span><span class="token punctuation">,</span> <span class="token number">90.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">180.0</span><span class="token punctuation">,</span> <span class="token number">90.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">resolutions</span><span class="token operator">:</span> resolutions<span class="token punctuation">,</span>
            <span class="token literal-property property">matrixIds</span><span class="token operator">:</span> matrixIds<span class="token punctuation">,</span>  <span class="token comment">//矩阵级别</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">wrapX</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">maxZoom</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
        <span class="token literal-property property">minZoom</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">zIndex</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>wmts有些参数比较复杂，需要自己去看服务元数据的参数，比如矩阵也就是切片层级的名称，瓦片层级等。</li></ul><h3 id="_2、vectorlayer-矢量图层-这个图层主要是添加自己的绘制的一些要素" tabindex="-1"><a class="header-anchor" href="#_2、vectorlayer-矢量图层-这个图层主要是添加自己的绘制的一些要素" aria-hidden="true">#</a> 2、VectorLayer 矢量图层，这个图层主要是添加自己的绘制的一些要素</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> maskLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VectorLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">preload</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">VectorSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">features</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//图层要素</span>
      <span class="token comment">//geojson的读取方式</span>
      <span class="token comment">//features: [new GeoJSON().readFeature(masked)]</span>
      <span class="token comment">//url的读取方式</span>
      <span class="token comment">//url: &quot;/static/wgs84jz.json&quot;,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//图层样式</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Style</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">stroke</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;#01FDFF&quot;</span><span class="token punctuation">,</span> 
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&quot;#061F57&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">,</span>  <span class="token comment">//图层透明度</span>
    <span class="token literal-property property">projection</span><span class="token operator">:</span> <span class="token string">&quot;EPSG:4326&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>VectorLayer使用比较灵活，可以自定义样式，图层要素等</p><h3 id="_3、imagelayer-影像图层" tabindex="-1"><a class="header-anchor" href="#_3、imagelayer-影像图层" aria-hidden="true">#</a> 3、ImageLayer 影像图层</h3><ul><li>它是基于图片的图层类型，适用于一次性加载一张完整的图片来显示地图数据。基本类似于TileLayer，但是ImageLayer不能加载切片</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> wmsLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ImageWMS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">crossOrigin</span><span class="token operator">:</span> <span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token constant">LAYERS</span><span class="token operator">:</span> param<span class="token punctuation">.</span>layers<span class="token punctuation">,</span>
        <span class="token constant">FORMAT</span><span class="token operator">:</span> <span class="token string">&quot;image/png&quot;</span><span class="token punctuation">,</span>
        <span class="token constant">VERSION</span><span class="token operator">:</span> <span class="token string">&quot;1.1.1&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">tiled</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token constant">STYLES</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">exceptions</span><span class="token operator">:</span> <span class="token string">&quot;application/vnd.ogc.se_inimage&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cql_filter</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">serverType</span><span class="token operator">:</span> <span class="token string">&quot;geoserver&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 
    <span class="token literal-property property">maxZoom</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minZoom</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span>  <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在 OpenLayers 中，VectorLayer、ImageLayer 和 TileLayer 是三种常见的图层类型，它们在加载和显示地图数据的方式上有一些区别。</p><h3 id="vectorlayer-矢量图层" tabindex="-1"><a class="header-anchor" href="#vectorlayer-矢量图层" aria-hidden="true">#</a> VectorLayer（矢量图层）</h3><p>VectorLayer 是基于矢量数据的图层类型，适用于加载和显示矢量要素数据，如点、线、多边形等。 VectorLayer 的数据通常是通过 GeoJSON、KML、GPX 等格式提供的，或者通过手动创建要素（Feature）添加到图层中。 VectorLayer 可以对矢量要素进行样式渲染、交互操作、查询等操作，具有高度的灵活性和可定制性。</p><h3 id="imagelayer-影像图层" tabindex="-1"><a class="header-anchor" href="#imagelayer-影像图层" aria-hidden="true">#</a> ImageLayer（影像图层）</h3><p>ImageLayer 是基于图片的图层类型，适用于一次性加载一张完整的图片来显示地图数据。 对于小范围区域或静态图片，可以使用 ImageLayer。通过设置图层的 source 属性为 ol.source.ImageStatic，可以指定图片的 URL、投影、范围等信息。 ImageLayer 适用于不需要动态切片的影像数据，例如航拍照片。</p><h3 id="tilelayer-瓦片图层" tabindex="-1"><a class="header-anchor" href="#tilelayer-瓦片图层" aria-hidden="true">#</a> TileLayer（瓦片图层）</h3><p>TileLayer 是基于切片的图层类型，适用于将地图数据分为多个小块（瓦片）进行加载和显示。 地图服务通常以瓦片的形式提供数据，因此 TileLayer 是常用的图层类型。 TileLayer 使用的图层源（source）通常是 ol.source.TileWMS、ol.source.TileArcGISRest、ol.source.OSM 等类型。这些源会自动处理切片请求，加载合适的瓦片并随着地图视图的变化进行更新。</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>VectorLayer 适用于加载和显示矢量要素数据，具有灵活的样式渲染和交互操作能力。 ImageLayer 适用于静态或小范围的影像数据，一次性加载整张图片进行显示。 TileLayer 适用于将地图数据分为瓦片进行加载和显示，支持动态切片请求和视图变化时的更新。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//这里定义的是图层类型</span>
<span class="token keyword">const</span> layer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">VectorLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">source</span><span class="token operator">:</span>vectorSource<span class="token punctuation">,</span><span class="token comment">//矢量图层源 （必须）</span>
 <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层样式（必须）</span>
 <span class="token literal-property property">feature</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层元素（必须）</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><p>1、添加/删除指定图层：map.addLayer/removeLayer(layer) 2、图层是轻量级容器从 数据源source获取数据 3、source子类分别对应不同图层类：</p><p>ol.source.ImageSource() ol.source.TileSource() ol.source.VectorSource()</p><h3 id="source主要有以下属性" tabindex="-1"><a class="header-anchor" href="#source主要有以下属性" aria-hidden="true">#</a> Source主要有以下属性</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Ol<span class="token punctuation">.</span>si</span><span class="token operator">=</span>ource<span class="token punctuation">.</span><span class="token function">VectorSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">attributions</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//</span>
    <span class="token literal-property property">attributionsCollapsible</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//布尔值  默认为true </span>
    <span class="token literal-property property">projection</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//投影系</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span><span class="token comment">//默认为&#39;ready&#39;</span>
    <span class="token literal-property property">wrapX</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>ol.layer.Tile()和ol.layer.Image()图层都具有相同的属性如下</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Tile</span><span class="token operator">/</span><span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">.2</span><span class="token punctuation">,</span><span class="token comment">//透明度 区间范围为（0,1）默认为1</span>
 <span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
 <span class="token literal-property property">extent</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层范围的边界范围</span>
 <span class="token literal-property property">zIndex</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的层级</span>
 <span class="token literal-property property">minResolution</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//最小分辨率</span>
 <span class="token literal-property property">maxResolution</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">//最大分辨率</span>
 <span class="token literal-property property">reload</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//预加载</span>
 <span class="token literal-property property">source</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>TileSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">ImageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//图层源,</span>
 <span class="token literal-property property">map</span><span class="token operator">:</span>  <span class="token punctuation">,</span><span class="token comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>ol.layer.Tile() 平铺图层 ol.layer.image() 图像图层</p><h3 id="矢量图层" tabindex="-1"><a class="header-anchor" href="#矢量图层" aria-hidden="true">#</a> 矢量图层</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>Vector</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//以下为图层的属性选项， 都可设置，所以皆有getter/setter</span>
 <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//透明度 区间范围为(0, 1) 默认为1</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//显示属性 布尔值 默认为true</span>
    <span class="token literal-property property">extent</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的边界范围。该层将不会在此范围之外呈现</span>
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//图层渲染的索引层级。在渲染时，图层将被排序，首先是z-idnex，然后是位置，当为undefined时，对于添加到映射的layers集合中的层，zIndex为0，或者当使用该层的setMap()方法时，zIndex为无穷大</span>
    <span class="token literal-property property">minResolution</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最小分辨率(包括在内)</span>
    <span class="token literal-property property">maxResolution</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token comment">//该层可见的最大分辨率（包括在内）</span>
    <span class="token literal-property property">renderOrder</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//呈现顺序。函数用于在呈现前对特性进行排序。默认情况下，特性是按照创建它们的顺序绘制的。使用null来避免排序，但是得到一个未定义的绘制顺序</span>
    <span class="token literal-property property">renderBuffer</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token comment">//默认为100 缓冲区</span>
    <span class="token literal-property property">renderMode</span><span class="token operator">:</span><span class="token string">&#39;vector&#39;</span><span class="token punctuation">,</span><span class="token comment">//默认为&#39;vector&#39; 矢量图层的渲染模式</span>
    <span class="token literal-property property">source</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>source<span class="token punctuation">.</span>VectorSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//图层源</span>
    <span class="token literal-property property">map</span><span class="token operator">:</span>  <span class="token punctuation">,</span><span class="token comment">//把图层覆盖在地图上，地图不会在它的图层集合中管理这个图层，这个图层将被呈现在顶部，这对于临时层非常有用</span>
    <span class="token literal-property property">declutter</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false 整理图片和文字。清理应用于所有图像和文本样式，优先级由样式的z-index定义。z-index指数越低，优先级越高</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//图层样式</span>
    <span class="token literal-property property">updateWhileAnimating</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false </span>
    <span class="token literal-property property">updateWhileInteracting</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//默认为false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>其中渲染模式有两种: image : 矢量图层被渲染为图像，性能很好，但是点符号和文本总是随着视图的旋转 动画中会被缩放。 vector:矢量图层为呈现为向量，即使在动画中也能精准的渲染，性能较慢。</p><h3 id="feature" tabindex="-1"><a class="header-anchor" href="#feature" aria-hidden="true">#</a> Feature</h3><p>Feature 用于地理特征的矢量元素，具有几何geometry和其他属性，类似于矢量文件格式(如GeoJSON)中的特性。 1、添加矢量元素：addFeature(feature) 2、移除矢量图层 clear()</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> feature<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>Feature</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">geometry</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Polygon</span><span class="token punctuation">(</span>polyCoords<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">labelPoint</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>Point</span><span class="token punctuation">(</span>labelCoords<span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">name</span><span class="token operator">:</span> ‘My Polygon’
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>3、一个feature只有一个默认几何属性geometry，可以有任意数量的命名集合图形：</p><p>获取默认几何属性： feature.getGeometry()</p><p>设置几何属性：feature.setGeometry(geometry)</p><p>设置几何属性名：feature.setGeometryName(name)</p><p>矢量元素要呈现的几何图形的特征属性、几何图形或函数由geometry属性选项设定，主要有以下几种子类模型： 1、ol.geom.Circle():圆形 2、ol.geom.Geometry() 几何图形 3、ol.geom.LinearRing 环线 4、ol.geom.LineString 线段</p><p>feature的稳定标志符ID: 设置feature的ID： feature.setId(id)； 当id可能相同时，可以加以区分：feature.setId(id+&#39;&#39;featureName&quot;); 获取的featureID: vector.getSource().getFeatureById()/vectorsource.getFeatureById()</p><p>feature的set(key,value,option) 设置key: feature.set(“keyName”,name) keyName是字符串 获取key: feature.get(“keyName”)</p><h3 id="style" tabindex="-1"><a class="header-anchor" href="#style" aria-hidden="true">#</a> Style</h3><p>矢量特征呈现样式的容器。在重新呈现使用样式的特性或图层之前，通过set*()方法对样式及其子元素所做的任何更改都不会生效。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Style</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">geometry</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">geom<span class="token punctuation">.</span>LineString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">fill</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">style<span class="token punctuation">.</span>Fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//填充样式</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span>color
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">image</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">style<span class="token punctuation">.</span>Image</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//数值</span>
        <span class="token literal-property property">rotateWithView</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//布尔值</span>
        <span class="token literal-property property">rotation</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//数值</span>
        <span class="token literal-property property">scale</span><span class="token operator">:</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">image</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">style<span class="token punctuation">.</span>Icon</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//可以使用图片资源</span>
  <span class="token literal-property property">anchor</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0.5</span>，<span class="token number">0.5</span><span class="token punctuation">]</span>，<span class="token comment">//锚。默认值是图标中心 默认值是[0.5,0.5]</span>
        <span class="token literal-property property">anchorOrigin</span><span class="token operator">:</span><span class="token string">&#39;top-left&#39;</span><span class="token punctuation">,</span><span class="token comment">//锚的原点:左下角、右下角、左上方或右上方。默认是左上</span>
        <span class="token literal-property property">anchorXUnits</span><span class="token operator">:</span><span class="token string">&#39;fraction&#39;</span><span class="token punctuation">,</span><span class="token comment">//指定锚点x值的单位。&#39;fraction&#39;的值表示x值是图标的&#39;fraction&#39;。&#39;pixels&#39;的值表示像素中的x值,默认为&#39;fraction&#39;</span>
        <span class="token literal-property property">anchorYUnits</span><span class="token operator">:</span><span class="token string">&#39;fraction&#39;</span><span class="token punctuation">,</span><span class="token comment">//指定锚点y值的单位。&#39;fraction&#39;的值表示y值是图标的&#39;fraction&#39;。&#39;pixels&#39;的值表示像素中的y值,默认为&#39;fraction&#39;</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span>color<span class="token punctuation">,</span><span class="token comment">//颜色、渐变或图案</span>
        <span class="token literal-property property">crossOrigin</span><span class="token operator">:</span><span class="token punctuation">,</span>
        <span class="token literal-property property">img</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//图标的图像对象  如果没有提供src选项，则必须已经加载了提供的图像</span>
        <span class="token literal-property property">imgSize</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//</span>
        <span class="token literal-property property">offset</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token comment">//偏移值，默认为[0,0]</span>
        <span class="token literal-property property">offsetOrigin</span><span class="token operator">:</span><span class="token string">&#39;top-left&#39;</span><span class="token punctuation">,</span><span class="token comment">//偏移量的原点，bottom-left, bottom-right, top-left or top-right. 默认是\`top-left\`</span>
        <span class="token literal-property property">opacity</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//默认是1  （0，1）</span>
        <span class="token literal-property property">scale</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//默认是1</span>
        rotation：<span class="token number">0</span>，<span class="token comment">//以弧度旋转(顺时针方向正旋转) 默认为0</span>
        size：<span class="token punctuation">,</span><span class="token comment">//图标大小(以像素为单位)。可与偏移量一起用于定义要从原点(sprite)图标图像使用的子矩形</span>
        <span class="token literal-property property">src</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//图像URL源</span>
        rotateWithView：<span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否旋转视图中的图标  默认为false </span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">stroke</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//描绘</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token comment">//宽</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span>color<span class="token comment">//颜色、渐变或图案</span>
  <span class="token literal-property property">lineCap</span><span class="token operator">:</span><span class="token string">&#39;round&#39;</span><span class="token punctuation">,</span><span class="token comment">//线帽风格  butt, round, 或者 square 默认 round</span>
        <span class="token literal-property property">lineJoin</span><span class="token operator">:</span><span class="token string">&#39;round&#39;</span><span class="token punctuation">,</span><span class="token comment">//线连接方式 bevel, round, 或者 miter 默认 round</span>
        lineDash： <span class="token punctuation">[</span><span class="token punctuation">]</span>，<span class="token comment">//线间隔模式 这个变化与分辨率有关 默认为undefined Internet Explorer 10和更低版本不支持</span>
        <span class="token literal-property property">lineDashOffset</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//线段间隔偏移 默认0</span>
        <span class="token literal-property property">miterLimit</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token comment">// 默认10</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//文字</span>
   <span class="token literal-property property">font</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//默认是&#39;10px sans-serif&#39;</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本内容</span>
        textAlign：<span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本对齐 &#39;left&#39;, &#39;right&#39;, &#39;center&#39;, &#39;end&#39; &#39;start&#39;.针对于placement: &#39;point&#39;,默认为&#39;center&#39;；针对于placement: &#39;line&#39;，默认是让渲染器选择不超过maxAngle的位置</span>
        <span class="token literal-property property">textBaseline</span><span class="token operator">:</span><span class="token string">&#39;middle&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本基线  &#39;bottom&#39;, &#39;top&#39;, &#39;middle&#39;, &#39;alphabetic&#39;, &#39;hanging&#39;, &#39;ideographic&#39; 默认&#39;middle&#39;</span>
        <span class="token literal-property property">placement</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token comment">//文本布置</span>
        scale：，
        <span class="token literal-property property">padding</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//文本周围的像素填充。数组中值的顺序是[top, right, bottom, left]</span>
        <span class="token literal-property property">fill</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//如果未设置，默认未#333</span>
        <span class="token literal-property property">stroke</span><span class="token operator">:</span><span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>style<span class="token punctuation">.</span>Stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">offsetX</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//水平文本偏移量(以像素为单位)。正值将把文本右移。默认0</span>
        <span class="token literal-property property">offsetY</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//垂直文本偏移量(以像素为单位)。正值会将文本向下移动。默认0</span>
        rotation：<span class="token number">0</span>，<span class="token comment">//默认0</span>
        <span class="token literal-property property">rotateWithView</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">backgroundFill</span><span class="token operator">:</span>  <span class="token punctuation">,</span><span class="token comment">//当placement:“point”时，填充文本背景的样式。默认为无填充 </span>
        <span class="token literal-property property">backgroundStroke</span><span class="token operator">:</span> <span class="token punctuation">,</span><span class="token comment">//当placement:“point”时，描绘文本背景的样式。默认为无描绘</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre></div><p>ol.geom.Geomtry() 方法 ： 1 1、getProperties()获取一个包含所有属性名和值的对象 2、getClosestPoint(point,option) 将几何图形的最近点作为坐标返回到经过的点。 3、getExtent() 获取几何的范围 4、getKeys()获取几何的属性名称列表 5、intersectsCoordinate(coordunate) 判断该集合是否包含指定的坐标 返回true 或者false</p><p>ol.geom.Circle() 方法 ： 1、getCenter()返回中心坐标 2、applyTransform（transformFn） 对几何图形的每个坐标应用一个变换函数，在适当的位置修改几何图形。不想修改的时候需要克隆一个，再用此函数。 3、getFirstCoordinate（）返回几何图形的第一个坐标 4、getLastCoordinate()返回几何图形的最后一个坐标 5、setCenter(center) 将圆心设置为 coordinate 6、setCenterAndRadius(center,radius,option) 设置圆的中心(coordinate)和半径（number）</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span><span class="token function">LineString</span><span class="token punctuation">(</span>coordinates<span class="token punctuation">,</span> opt_layout<span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">ol<span class="token punctuation">.</span>geom<span class="token punctuation">.</span>lineString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">coordinates</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//坐标，</span>
 <span class="token literal-property property">layout</span><span class="token operator">:</span>layout
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>方法：</p><ol><li>appendCoordinate(coordinate) 将经过的坐标追加到linestring的坐标里</li><li>applyTransform(transformFn) 对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先clone()它，然后在克隆上使用此函数</li><li>forEachSegment(callback)遍历每条线段，调用提供的回调函数，如果回调函数返回一个真值，则函数立即返回该值。否则函数返回false</li><li>getCoordinates/setCoordinates()返回线段的坐标/设置线段的坐标</li><li>getLastCoordinate()返回几何图形的第一个坐标</li></ol><p>ol.geom.Point(coordinates, opt_layout) new ol.geom.Point</p><p>方法</p><ol><li>applyTransform(transformFn) 对几何图形的每个坐标应用一个变换函数。在适当的位置修改几何图形。如果不想修改几何图形，请首先clone()它，然后在克隆上使用此函数</li><li>getCoordinates()返回点的坐标</li><li>setCoordinates(coordinates, opt_layout)设置点的坐标</li><li>getFirstCoordinate()返回几何图形的第一个坐标</li><li>getLastCoordinate()返回几何图形的最后一个坐标</li><li>getLayout()返回几何图形的Layout</li><li>getType()得到这个几何图形的类型</li></ol>`,70),e=[o];function c(l,r){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","layer.html.vue"]]);export{k as default};
