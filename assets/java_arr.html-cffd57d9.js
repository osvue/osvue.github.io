import{_ as n,p as s,q as a,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<h2 id="arrayinit" tabindex="-1"><a class="header-anchor" href="#arrayinit" aria-hidden="true">#</a> arrayInit</h2><ol><li>直接给每个元素赋值 int array[4] = {1,2,3,4};</li><li>给一部分赋值，后面的全部为0 int array[4] = {1,2};</li><li>由赋值参数个数决定数组的个数 int array[] = {1,2};</li><li>数组元素的值是随机分配的 int array[4] = {}; 当初始化参数时，推荐使用 int array[4] = {0};</li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code>        
          <span class="token comment">//1、静态初始化</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token punctuation">{</span>
                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">&quot;里斯&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//2、默认初始化</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//默认给数组进行赋值，和成员变量赋值一样</span>
        <span class="token comment">//3、动态初始化</span>
        <span class="token keyword">int</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> d<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>d<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

</code></pre></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><blockquote><p>布尔运算符号 &amp;(逻辑与) &amp;&amp;(短路与) |(逻辑或) ||(短路或) !(非) ^(异或)</p></blockquote><ul><li>这些符号只能运算 boolean类型的值 结果也是boolean类型</li><li>运算规则 <ul><li>与 : 两边都真才是真 一边为假就是假</li><li>或 : 一边为真就是真 两边都假才是假</li><li>非 : 取反 非真即假 非假即真</li><li>异或 : 两边不同就是真 两边相同就是假</li><li>短路 : &amp;&amp; 和 || 会短路</li><li>当运算符号前的 结果已经决定了整个表达式的结果</li><li>运算符号后的 代码将不再执行</li><li>&amp;&amp; 前是 false 就短路</li><li>|| 前是 true 就短路</li></ul></li></ul><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> BASE64</h2><div class="language-java" data-ext="java"><pre class="language-java"><code>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">de</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Decoder</span> decoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">final</span> <span class="token class-name">Base64<span class="token punctuation">.</span>Encoder</span> encoder <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">&quot;字串文字&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> textByte <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 編碼</span>
		<span class="token keyword">final</span> <span class="token class-name">String</span> encodedText <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>textByte<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 解碼</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodedText<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div>`,8),e=[o];function c(l,u){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","java_arr.html.vue"]]);export{i as default};
