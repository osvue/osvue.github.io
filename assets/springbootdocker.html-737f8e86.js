import{_ as e,p as l,q as o,a1 as i}from"./framework-d81ad7e5.js";const r={},a=i(`<h3 id="boot-docker" tabindex="-1"><a class="header-anchor" href="#boot-docker" aria-hidden="true">#</a> boot Docker</h3><ul><li>a <code>打包-&gt;传到服务器-&gt;java -jar运行</code></li></ul><ul><li><p>而且服务器还得先配置好java运行环境</p></li><li><p>使用docker部署项目，只需要在项目中编写一个Dockerfile文件</p></li><li><p>在项目中创建一个Dockerfile文件</p></li></ul><h3 id="dockerfile编写" tabindex="-1"><a class="header-anchor" href="#dockerfile编写" aria-hidden="true">#</a> Dockerfile编写</h3><ul><li>第一步jar包运行需要一个运行环境 <code>FROM openjdk:8-jdk-slim</code> 第二步写上作者 <code>LABEL maintainer=osvue</code></li></ul><p>第三步复制jar包</p><ul><li><p>在docker中运行容器，本身是运行了小的linux系统。要运行这个jar包，linux中就得有这个jar包，使用copy命令把jar包复制到一个自定义路径下</p></li><li><p>我的Dockerfile文件放到了项目根路径下，跟target目录平级</p></li><li><p><code>COPY target/*.jar /main.jar</code></p></li><li><p>target目录下也就一个jar包，直接写*.jar，把jar包复制到了小linux中根路径下，名称为main.jar</p></li></ul><ul><li>第四步启动命令 上面复制完之后名称为main.jar，所以这里启动命令也是启动mian.jar</li></ul><p><code>ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/main.jar&quot;]</code></p><div class="language-dockerFile" data-ext="dockerFile"><pre class="language-dockerFile"><code>FROM openjdk:8-jdk-slim
LABEL maintainer=osvue
 
COPY target/*.jar /main.jar
 
ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/main.jar&quot;]
 
</code></pre></div><ul><li><strong>把target文件夹和Dockerfile文件上传到安装好docker的服务器，在服务器上使用docker构建镜像</strong></li></ul><ul><li><strong>docker build -t java-test:v1.0 -f Dockerfile .</strong></li></ul><ul><li><p><strong>-t</strong> 后面是镜像名称和版本号</p></li><li><p><strong>-f</strong> 是使用哪个Dockerfile文件，当前目录就有Dockerfile文件，所以这个参数也可以省略不写</p></li></ul><p>命令最后有一个点 <strong>(.)</strong> ，这个点表示在当前目录下工作（就是COPY命令在复制的时候以当前目录为基准，把当前目录下target文件夹中的所有jar包复制到容器的小Linux下）</p><ul><li>docker images查看镜像是否存在</li></ul><ul><li>查看运行日志</li></ul><p><code>docker logs 容器ID</code></p><h3 id="docker-build" tabindex="-1"><a class="header-anchor" href="#docker-build" aria-hidden="true">#</a> docker build</h3><p><code>docker build</code>命令用于从Dockerfile构建镜像。</p><ul><li><code>docker build -t ImageName:TagName dir</code></li></ul><p>选项</p><ul><li><strong>-t 给镜像加一个Tag</strong></li></ul><ul><li><strong>ImageName 给镜像起的名称</strong></li><li><strong>TagName 给镜像的Tag名</strong></li><li><strong>Dir Dockerfile所在目录</strong></li></ul><p>例子</p><ul><li><strong><code>docker build -t abcddd-redis:v1.1 .</code></strong></li></ul><div class="language-text" data-ext="text"><pre class="language-text"><code>abcddd-redis 是镜像名
v1.1 是 tag 标签
. 表示当前目录，即Dockerfile所在目录 
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>当使用Dockerfile构建镜像时，所在的目录一定要使用一个干净的目录（最好新建一个），以免目录下有其他文件（构建会加载当前目录下所有文件，导致磁盘爆满）。</li></ul></div>`,27),t=[a];function d(c,n){return l(),o("div",null,t)}const s=e(r,[["render",d],["__file","springbootdocker.html.vue"]]);export{s as default};
