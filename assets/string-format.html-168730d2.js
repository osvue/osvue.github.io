import{_ as a,p as n,q as s,a1 as t}from"./framework-d81ad7e5.js";const e={},p=t(`<h2 id="string-prototype-tolowercase" tabindex="-1"><a class="header-anchor" href="#string-prototype-tolowercase" aria-hidden="true">#</a> String.prototype.toLowerCase</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.toLowerCase()</p></div><p>返回值：</p><p>小写的字符串。</p><h3 id="_2-描述" tabindex="-1"><a class="header-anchor" href="#_2-描述" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>用于小写字符串。</li></ul></blockquote><h3 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using toLowerCase</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;ALPHABET&#39;</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;alphabet&#39;</span>
</code></pre></div></li></ul><h2 id="string-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#string-prototype-tostring" aria-hidden="true">#</a> String.prototype.toString</h2><h3 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.toString()</p></div><p>返回值：</p><p>字符串。</p><h3 id="_2-描述-1" tabindex="-1"><a class="header-anchor" href="#_2-描述-1" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-1" tabindex="-1"><a class="header-anchor" href="#_3-示例-1" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using toString</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello world&quot;</span>
</code></pre></div></li></ul><h2 id="string-prototype-touppercase" tabindex="-1"><a class="header-anchor" href="#string-prototype-touppercase" aria-hidden="true">#</a> String.prototype.toUpperCase</h2><h3 id="_1-语法-2" tabindex="-1"><a class="header-anchor" href="#_1-语法-2" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.toUpperCase()</p></div><p>返回值：</p><p>大写的字符串。</p><h3 id="_2-描述-2" tabindex="-1"><a class="header-anchor" href="#_2-描述-2" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>常用于大写字符串。</li></ul></blockquote><h3 id="_3-示例-2" tabindex="-1"><a class="header-anchor" href="#_3-示例-2" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using toUpperCase</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;alphabet&#39;</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;ALPHABET&#39;</span>
</code></pre></div></li></ul><h2 id="string-prototype-trim" tabindex="-1"><a class="header-anchor" href="#string-prototype-trim" aria-hidden="true">#</a> String.prototype.trim</h2><h3 id="_1-语法-3" tabindex="-1"><a class="header-anchor" href="#_1-语法-3" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.trim()</p></div><p>返回值：</p><p>两端去掉空白的新字符串。</p><h3 id="_2-描述-3" tabindex="-1"><a class="header-anchor" href="#_2-描述-3" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-3" tabindex="-1"><a class="header-anchor" href="#_3-示例-3" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using trim</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> orig <span class="token operator">=</span> <span class="token string">&#39;   foo  &#39;</span><span class="token punctuation">;</span>
orig<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39;</span>
</code></pre></div></li></ul><h2 id="string-prototype-trimstart" tabindex="-1"><a class="header-anchor" href="#string-prototype-trimstart" aria-hidden="true">#</a> String.prototype.trimStart</h2><h3 id="_1-语法-4" tabindex="-1"><a class="header-anchor" href="#_1-语法-4" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.trimStart()</p></div><p>返回值：</p><p>左侧去掉空白的新字符串。</p><h3 id="_2-描述-4" tabindex="-1"><a class="header-anchor" href="#_2-描述-4" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-4" tabindex="-1"><a class="header-anchor" href="#_3-示例-4" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using trimLeft/trimStart</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;   foo  &quot;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo  &#39;</span>
str<span class="token punctuation">.</span><span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo  &#39;</span>
</code></pre></div></li></ul><h2 id="string-prototype-trimend" tabindex="-1"><a class="header-anchor" href="#string-prototype-trimend" aria-hidden="true">#</a> String.prototype.trimEnd</h2><h3 id="_1-语法-5" tabindex="-1"><a class="header-anchor" href="#_1-语法-5" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.trimEnd()</p></div><p>返回值：</p><p>右侧去掉空白的新字符串。</p><h3 id="_2-描述-5" tabindex="-1"><a class="header-anchor" href="#_2-描述-5" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例-5" tabindex="-1"><a class="header-anchor" href="#_3-示例-5" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using trimEnd</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;   foo  &quot;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;   foo&#39;</span>
str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;   foo&#39;</span>
</code></pre></div></li></ul>`,60),o=[p];function r(i,c){return n(),s("div",null,o)}const u=a(e,[["render",r],["__file","string-format.html.vue"]]);export{u as default};
