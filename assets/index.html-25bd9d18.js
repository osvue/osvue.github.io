import{_ as e,p as i,q as l,a1 as r}from"./framework-d81ad7e5.js";const c={},a=r('<p>正则表达式:符合一定规则的表达式。</p><ul><li><p>作用：用于专门操作字符串。</p></li><li><p>特点：用于一些特定的符号来表示一些代码操作。这样就简化书写。 所以学习正则表达式，就是在学习一些特殊符号的使用。</p></li><li><p>好处：可以简化对字符串的复杂操作。</p></li><li><p>弊端：符号定义越多，正则越长，阅读性越差。</p></li></ul><h4 id="具体操作功能" tabindex="-1"><a class="header-anchor" href="#具体操作功能" aria-hidden="true">#</a> 具体操作功能：</h4><ol><li><p>匹配：<code>String matches</code>方法。用规则匹配整个字符串，只要有一处不符合规则，就匹配结束，返回false。</p></li><li><p>切割：<code>String split();</code></p></li><li><p>替换：<code>String replaceAll(regex,str);</code>如果regex中有定义组，可以在第二参数中通过$符号获取正则表达式中的已有的组。</p></li></ol><h3 id="网络架构" tabindex="-1"><a class="header-anchor" href="#网络架构" aria-hidden="true">#</a> 网络架构：</h3><p><code>C/S:Client/Server</code> 客户端，服务端。 特点： 1，需要在客户端和服务端都需要按照编写的软件。 2，维护较麻烦。 好处：可以减轻服务端的压力，如网络游戏。</p><p><code>B/S:Browser/Server</code> 浏览器 ，服务端。 1，客户端不用单独编写软件。 因为客户端用的就是浏览器。 2，对于软件升级，只要考虑服务端即可。</p><p>弊端：所有的程序都运行在服务端，客户端的浏览器毕竟解析能力较弱。对游戏等。</p>',8),t=[a];function o(d,p){return i(),l("div",null,t)}const s=e(c,[["render",o],["__file","index.html.vue"]]);export{s as default};
