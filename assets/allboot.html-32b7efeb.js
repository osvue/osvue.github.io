import{_ as n,p as s,q as a,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<ul><li>xxxxAutoConfiguration ：向容器中添加自动配置组件</li><li>xxxxProperties :使用自动配置类 来封装 配置文件的内容</li></ul><h4 id="springmvc配置-webmvcautoconfiguration-和-webmvcproperties" tabindex="-1"><a class="header-anchor" href="#springmvc配置-webmvcautoconfiguration-和-webmvcproperties" aria-hidden="true">#</a> SpringMVC配置 ： WebMvcAutoConfiguration 和 WebMvcProperties</h4><h4 id="内嵌-servlet-容器-servletwebserverfactoryautoconfiguration-和-serverproperties" tabindex="-1"><a class="header-anchor" href="#内嵌-servlet-容器-servletwebserverfactoryautoconfiguration-和-serverproperties" aria-hidden="true">#</a> 内嵌 Servlet 容器 ： ServletWebServerFactoryAutoConfiguration 和 ServerProperties</h4><h4 id="上传文件的属性-multipartautoconfiguration-和-multipartproperties" tabindex="-1"><a class="header-anchor" href="#上传文件的属性-multipartautoconfiguration-和-multipartproperties" aria-hidden="true">#</a> 上传文件的属性 ：MultipartAutoConfiguration 和 MultipartProperties</h4><h4 id="jdbc-datasourceautoconfiguration-和-datasourceproperties" tabindex="-1"><a class="header-anchor" href="#jdbc-datasourceautoconfiguration-和-datasourceproperties" aria-hidden="true">#</a> JDBC : DataSourceAutoConfiguration 和 DataSourceProperties</h4><h4 id="对静态资源的映射规则-可通过分析-webmvcautoconfiguration-自动配置类得到" tabindex="-1"><a class="header-anchor" href="#对静态资源的映射规则-可通过分析-webmvcautoconfiguration-自动配置类得到" aria-hidden="true">#</a> 对静态资源的映射规则， 可通过分析 WebMvcAutoConfiguration 自动配置类得到</h4><h3 id="springboot默认的静态资源目录" tabindex="-1"><a class="header-anchor" href="#springboot默认的静态资源目录" aria-hidden="true">#</a> Springboot默认的静态资源目录</h3><ol><li>在<code>src/main/resources/</code>目录下创建 static文件夹</li><li>在<code>src/main/resources/</code>目录下创建 resources文件夹</li><li>在<code>src/main/resources/</code>目录下创建 public文件夹</li><li>在<code>src/main/resources/</code>目录下创建 META-INF/resources文件夹</li></ol><p>如果每个目录下面都有相同的文件，那么访问的优先级为 <code>META-INF&gt;resources&gt;static&gt;public</code></p><h2 id="图标映射" tabindex="-1"><a class="header-anchor" href="#图标映射" aria-hidden="true">#</a> 图标映射</h2><ul><li><p>Spring Boot 会在静态资源目录下 与 根路径(按该顺序) 查找 faicon.ico 页面；如果存在这样的文件，Spring Boot 会自动将其设置为应用图标。</p></li><li><p><code>classpath:/META-INF/resources/</code></p></li><li><p><code>classpath:/resources/</code></p></li><li><p><code>classpath:/static/</code></p></li><li><p><code>classpath:/public/</code></p></li><li><p><code>/: 当前项目根路径下</code></p></li></ul><h3 id="静态资源的映射规则" tabindex="-1"><a class="header-anchor" href="#静态资源的映射规则" aria-hidden="true">#</a> 静态资源的映射规则</h3><ul><li>对静态资源的映射规则， 可通过分析 <code>WebMvcAutoConfiguration</code> 自动配置类得到 <ol><li><code>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#addResourceHandlers</code></li></ol></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Default resource handling disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取静态资源</span>
            registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ServletContextResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Resources</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CLASSPATH_RESOURCE_LOCATIONS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/resources/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/static/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/public/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="2"><li><code>org.springframework.boot.autoconfigure.web.WebProperties.Resources</code></li></ol><h2 id="thymeleaf-模板引擎" tabindex="-1"><a class="header-anchor" href="#thymeleaf-模板引擎" aria-hidden="true">#</a> Thymeleaf 模板引擎</h2><h4 id="引入-thymeleaf" tabindex="-1"><a class="header-anchor" href="#引入-thymeleaf" aria-hidden="true">#</a> 引入 Thymeleaf</h4><p>pom.xml 加入 Thymeleaf 启动器</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre></div><ul><li>ThymeleafProperties</li><li>导入 Thymeleaf 的名称空间 在 html 页面加上以下名称空间, 使用 Thymeleaf 时就有语法提示。 <code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></li></ul><ul><li><ul><li>开发环境下关闭thymeleaf模板缓存，thymeleaf默认是开启状态 <code> spring.thymeleaf.cache=false</code></li></ul></li></ul><h2 id="springboot-热部署" tabindex="-1"><a class="header-anchor" href="#springboot-热部署" aria-hidden="true">#</a> SpringBoot 热部署</h2><ul><li>在Intellij IEDA 中，修改文件后都是自动保存，默认不会自动编译文件， 需要手动编译按 Ctrl + F9 （推荐使用）或 <code>Build -&gt; Build Project</code></li></ul><div class="language-xml" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="注册servlet三大组件" tabindex="-1"><a class="header-anchor" href="#注册servlet三大组件" aria-hidden="true">#</a> 注册Servlet三大组件</h2><p><code>Servlet/Filter/Listener</code></p><ul><li>而由于 Spring Boot 默认是以 jar 包的方式运行嵌入式Servlet容器来启动应用，没有web.xml文件，Spring提供以下Bean来注册三大组件： <ul><li>ServletRegistrationBean ：注册自定义Servlet</li><li>FilterRegistrationBean ：注册自定义Filter</li><li>ServletListenerRegistrationBean ：注册自定义Listener</li></ul></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code>
 <span class="token comment">//注册Filter组件</span>
 <span class="token annotation punctuation">@Configuration</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilterConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">//注册Filter组件</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FilterRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定过滤器</span>
        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//过滤哪些请求</span>
        bean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

 <span class="token comment">//监听应用启动与销毁</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SpringBoot.Servlet应用启动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SpringBoot.Servlet应用销毁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>


<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">//注册Listener</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletListenerRegistrationBean</span> <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><h3 id="springboot-错误处理机制" tabindex="-1"><a class="header-anchor" href="#springboot-错误处理机制" aria-hidden="true">#</a> SpringBoot 错误处理机制</h3><ul><li><p>底层原理分析 ErrorProperties</p></li><li><p>底层原理关注 ErrorMvcAutoConfiguration 错误自动配置类</p></li><li><p>第1步： <code>ErrorPageCustomizer</code> 错误页面定制器</p></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ErrorPageCustomizer</span> <span class="token keyword">implements</span> <span class="token class-name">ErrorPageRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerProperties</span> properties<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DispatcherServletPath</span> dispatcherServletPath<span class="token punctuation">;</span>

<span class="token keyword">protected</span> <span class="token class-name">ErrorPageCustomizer</span><span class="token punctuation">(</span><span class="token class-name">ServerProperties</span> properties<span class="token punctuation">,</span> <span class="token class-name">DispatcherServletPath</span> dispatcherServletPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath <span class="token operator">=</span> dispatcherServletPath<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerErrorPages</span><span class="token punctuation">(</span><span class="token class-name">ErrorPageRegistry</span> errorPageRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 出现错误后来到 /error 请求进行处理（类似web.xml注册的错误页面规则）</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//private String path = &quot;/error&quot;;</span>

<span class="token class-name">ErrorPage</span> errorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorPage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath<span class="token punctuation">.</span><span class="token function">getRelativePath</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
errorPageRegistry<span class="token punctuation">.</span><span class="token function">addErrorPages</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorPage</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>errorPage<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>当应用出现了4xx或5xx之类的错误 ,ErrorPageCustomizer就会被激活,它主要 用于定制错误 处理的响应规则,</li><li>就会发送一个<code>/error</code>请求,它会交给 <code>BasicErrorController</code>进行处理</li><li><code>BasicErrorController</code> 就会接收 <code>/error</code> 请求处理</li><li><code>BasicErrorController</code> 会接收一个<code>/error</code>请求, 两个 方法处理,第1个erroHtml响应html数据, 还有一个error用来响应json数据 的, 使用了 <code>ErrorViewResolver (DefaultErrorViewResolver)</code> 组件进行封装视图</li></ul><h2 id="springboot2版本无法加载静态资源问题解决" tabindex="-1"><a class="header-anchor" href="#springboot2版本无法加载静态资源问题解决" aria-hidden="true">#</a> <strong>springboot2版本无法加载静态资源问题解决</strong></h2><ul><li>默认加载路径</li></ul><p>首先得知道springboot默认加载得资源路径是什么。</p><p>首先我们看<strong>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</strong>这个类。里面有一个方法叫做<strong>addResourceHandlers()</strong></p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">DispatcherServletAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TaskExecutionAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
    <span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Default resource handling disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token class-name">Duration</span> cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">CacheControl</span> cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">//所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment">//静态资源文件夹映射</span>
      <span class="token comment">//  org.springframework.boot.autoconfigure.web.WebProperties</span>
      <span class="token class-name">String</span> staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol><li><p>首先springboot会将我们<code>classpath:/META-INF/resources/webjars/</code>路径下的文件映射为<code>/webjars/**</code></p></li><li><p>然后再一个if判断进行静态资源文件夹映射，首先判断我们是否以使用 <strong><code>&quot;/**&quot;</code></strong> 做映射</p></li><li><p>如果没有，则将 <code>&quot;/**&quot;</code> 访问当前项目的任何资源，都去（如下静态资源的文件夹）找映射</p></li></ol><h4 id="容易出问题的地方" tabindex="-1"><a class="header-anchor" href="#容易出问题的地方" aria-hidden="true">#</a> <strong>容易出问题的地方</strong></h4><h2 id="全面控制-springmvc" tabindex="-1"><a class="header-anchor" href="#全面控制-springmvc" aria-hidden="true">#</a> 全面控制 SpringMVC</h2><ul><li>如果你想全面控制SpringMVC（SpringBoot对SpringMVC的自动配置都废弃）, 在自定义的Web配置类上添加 <code>@Configuration 和 @EnableWebMvc</code> 注解。</li></ul><h4 id="为什么添加-enablewebmvc-自动配置就失效了" tabindex="-1"><a class="header-anchor" href="#为什么添加-enablewebmvc-自动配置就失效了" aria-hidden="true">#</a> 为什么添加 @EnableWebMvc 自动配置就失效了？</h4><ol><li>@EnableWebMvc 的核心</li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DelegatingWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre></div><ol start="2"><li>先记住继承了WebMvcConfigurationSupport类</li><li>而在 <code>WebMvcAutoConfiguration</code> 上使用了 <code>**@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)**</code></li></ol><ul><li>有些时候 代码中，直接访问静态资源却无法做映射</li><li>仔细看看<code>WebMvcAutoConfiguration</code>这个类。在其头上有一个这个注解： <strong>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</strong></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addCorsMappings</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol><li><p>继承了<strong>WebMvcConfigurationSupport</strong>这个类，使得springboot的自动装配失效了。</p></li><li><p>因为 <strong>@ConditionalOnMissingBean</strong> 这个注解得作用就是，当容器中不存在这个类，如下得代码才有作用。</p></li><li><p>有时候我们得项目并不希望springboot给我们自动装配。希望完全由我们自己来配置自己来掌握。</p></li><li><p>要想达到这个效果，springboot给我们提供了一个更为简洁得方式。</p></li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DelegatingWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token comment">// @EnableWebMvc注解会导入DelegatingWebMvcConfiguration.clss</span>
<span class="token comment">// 而DelegatingWebMvcConfiguration又继承了WebMvcConfigurationSupport</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 所以当我们加上@EnableWebMvc也会有同样得效果且简洁。</span>
</code></pre></div><h2 id="事务的隔离级别和传播行为" tabindex="-1"><a class="header-anchor" href="#事务的隔离级别和传播行为" aria-hidden="true">#</a> 事务的隔离级别和传播行为</h2><p>除了指定事务管理器之后，还能对事务进行隔离级别和传播行为的控制，下面分别详细解释：</p><ul><li>隔离级别 隔离级别是指在发生并发的事务之间的隔离程度，与我们开发时候主要相关的场景包括：脏读、不可重复读、幻 读。 <ul><li>脏读：A事务执行过程中修改了id=1的数据，未提交前，B事务读取了A修改的id=1的数据，而A事务却回滚了，这 样B事务就形成了脏读。</li><li>不可重复读：A事务先读取了一条数据，然后执行逻辑的时候，B事务将这条数据改变了，然后A事务再次读取的时 候，发现数据不匹配了，就是所谓的不可重复读了。</li><li>幻读：A事务先根据条件查询到了N条数据，然后B事务新增了M条符合A事务查询条件的数据，导致A事务再次查询 发现有N+M条数据了，就产生了幻读；</li></ul></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>
<span class="token comment">// spring  中的 事务隔离级别</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Isolation</span> <span class="token punctuation">{</span>
    <span class="token function">DEFAULT</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">READ_UNCOMMITTED</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">READ_COMMITTED</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">REPEATABLE_READ</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SERIALIZABLE</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Isolation</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre></div><ul><li><strong>READ_UNCOMMITTED</strong> ：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级 别不能防止脏读和不可重复读，因此很少使用该隔离级别。</li><li><strong>READ_COMMITTED</strong> ：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏 读，这也是大多数情况下的推荐值，性能最好。</li><li><strong>REPEATABLE_READ</strong> ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回 的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可 以防止脏读和不可重复读。</li><li><strong>SERIALIZABLE</strong> ：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可 以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。 指定方式：通过使用 isolation 属性设置，例如：<code>@Transactional(isolation=Isolation.DEFAULT)</code></li></ul>`,54),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","allboot.html.vue"]]);export{r as default};
