import{_ as t,M as e,p as o,q as p,R as a,t as n,N as i,a1 as l}from"./framework-d81ad7e5.js";const c="/img/cloud1.png",r="/img/alibaba.png",u={},d=l('<h3 id="warring-spring官方宣布netflix项目进入维护模式" tabindex="-1"><a class="header-anchor" href="#warring-spring官方宣布netflix项目进入维护模式" aria-hidden="true">#</a> WARRING Spring官方宣布Netflix项目进入维护模式</h3><h5 id="_2018年6月底-eureka-2-0-开源工作宣告停止-继续使用风险自负。" tabindex="-1"><a class="header-anchor" href="#_2018年6月底-eureka-2-0-开源工作宣告停止-继续使用风险自负。" aria-hidden="true">#</a> 2018年6月底，Eureka 2.0 开源工作宣告停止，继续使用风险自负。</h5><blockquote><p>Netflix 为何开始减少在开源上的投入？ Netflix 是一家靠卖技术为生的公司么？答案是显而易见的，采用新技术是提升Netflix 在主营业务竞争力的有力手段。与AWS, Oracle，AZure，Google这些不同的是，卖技术和服务的开源及“云计算”并不是Netflix 要真正关注的。</p></blockquote><blockquote><p>而如今Netflix在开源上上削减投入，其实并不是什么不可思议的事情，一般像Netflix这种情况的公司，尤其当其主营的业务面临挑战时，首先考虑的很可能就是削减不在主线上的技术上的投资，从这个角度来讲，Netflix即使不是在现在削减开源上的投入，也会在未来的某个时间点削减。</p></blockquote><blockquote><p>那Netflix现在遇到挑战了么？可以从近期媒体上的几篇文章，觉得可见一斑:</p></blockquote><blockquote><p>Netflix大溃败：放弃算法崇拜，向好莱坞低头；</p></blockquote><blockquote><p>Netflix 的盛世危局；</p></blockquote><blockquote><p>另一篇是一位Netflix的美剧中毒者 头顶光环、骂声一片，他垮台了；神似《哈利波特》赫敏，她演砸了，在文中写到</p></blockquote><blockquote><p>曾几何时，我们都迷信一句话—— 网飞出品，必属精品。 网飞（Netflix）从出道以来，就走在美剧一线。 从题材到品质，严格把控，前卫又不失格调，高端又不缺人气。 可如今，慢慢走下神坛。 神话，已经变成了传说——</p></blockquote><h2 id="netflix" tabindex="-1"><a class="header-anchor" href="#netflix" aria-hidden="true">#</a> Netflix</h2><p><img src="'+c+'" alt="netflix"></p><h2 id="alibaba" tabindex="-1"><a class="header-anchor" href="#alibaba" aria-hidden="true">#</a> Alibaba</h2><p><img src="'+r+`" alt="ali"></p><h2 id="支持多协议的服务调用" tabindex="-1"><a class="header-anchor" href="#支持多协议的服务调用" aria-hidden="true">#</a> 支持多协议的服务调用</h2><p>Spring Cloud 默认的服务调用依赖 OpenFeign 或 RestTemplate 使用 REST 进行调用。</p><p>使用 @DubboTransported 注解可将底层的 Rest 协议无缝切换成 Dubbo RPC 协议，进行 RPC 调用。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;dubbo-provider&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DubboTransported</span><span class="token punctuation">(</span>protocol <span class="token operator">=</span> <span class="token string">&quot;dubbo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DubboFeignRestService</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/param&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">param</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;param&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 
  <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/saveB&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">String</span> <span class="token function">saveB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="服务限流降级" tabindex="-1"><a class="header-anchor" href="#服务限流降级" aria-hidden="true">#</a> 服务限流降级</h2><p>作为稳定性的核心要素之一，服务限流和降级是微服务领域特别重要的一环，Spring Cloud Alibaba 基于 Sentinel，对 Spring 体系内基本所有的客户端，网关进行了适配，</p><p>默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入。</p><p>Sentinel应用比较简单，只需引入 starter，即可生效，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</p><h2 id="微服务消息驱动" tabindex="-1"><a class="header-anchor" href="#微服务消息驱动" aria-hidden="true">#</a> 微服务消息驱动</h2><p>支持为微服务应用构建消息驱动能力，基于 Spring Cloud Stream 提供 Binder 的新实现: Spring Cloud Stream RocketMQ Binder，</p><p>也新增了 Spring Cloud Bus 消息总线的新实现 Spring Cloud Bus RocketMQ。</p><h2 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务" aria-hidden="true">#</a> 分布式事务</h2><p>使用 Seata 解决微服务场景下面临的分布式事务问题。</p><p>使用 @GlobalTransactional 注解，在微服务中传递事务上下文，可以对业务零侵入地解决分布式事务问题。</p><h2 id="阿里云提供的商业能力" tabindex="-1"><a class="header-anchor" href="#阿里云提供的商业能力" aria-hidden="true">#</a> 阿里云提供的商业能力</h2><p>通过上面提到的OSS，schedulerx等组件，开发者可以在阿里云上实现对象存储，分布式任务调度等功能。</p><h1 id="番外篇" tabindex="-1"><a class="header-anchor" href="#番外篇" aria-hidden="true">#</a> 番外篇</h1>`,30),k={href:"https://github.com/osvue/alibaba2020",target:"_blank",rel:"noopener noreferrer"},h=a("hr",null,null,-1),b=a("p",null,"本文部分素材图片来源于网络如有侵权请私信删除",-1);function g(f,x){const s=e("ExternalLinkIcon");return o(),p("div",null,[d,a("blockquote",null,[a("p",null,[n("受到疫情的影响,各行各业都多少进行了延迟开工, 在此之际,本人利用闲暇时间,回顾了Netflix+Cloud ,以及阿里系的全新Spring Cloud Alibaba , 截止发文时间,项目还在持续集成中, (工作之外更新 ^_^ ),敬请期待~~~ "),a("strong",null,[a("a",k,[n("阿里巴巴Cloud"),i(s)])]),n("：Spring Cloud Alibaba Spring Cloud Hoxton")])]),h,b])}const _=t(u,[["render",g],["__file","Tce_a.html.vue"]]);export{_ as default};
