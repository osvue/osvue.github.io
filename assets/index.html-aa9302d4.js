import{_ as t,p as n,q as s,a1 as a}from"./framework-d81ad7e5.js";const e={},l=a(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>关于 JavaScript 的概念</p><p><strong>「比较运算符」</strong></p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">案例</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">&lt;</td><td style="text-align:left;">小于号</td><td style="text-align:left;">1&lt;2</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:left;">大于号</td><td style="text-align:left;">1&gt;2</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:left;">大于等于号(大于或者等于)</td><td style="text-align:left;">2 &gt;= 2</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:left;">小于等于号(小于或者等于)</td><td style="text-align:left;">3 &lt;= 2</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:center;">==</td><td style="text-align:left;">判等号(会转型)</td><td style="text-align:left;">15 == &#39;15&#39;</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:left;">不等号</td><td style="text-align:left;">37 != 37</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:center;">=== !===</td><td style="text-align:left;">全等 全不等(要求值和数据类型都一致)</td><td style="text-align:left;">37 === &#39;37&#39;</td><td style="text-align:left;">false</td></tr></tbody></table><h3 id="js去除html标签" tabindex="-1"><a class="header-anchor" href="#js去除html标签" aria-hidden="true">#</a> JS去除HTML标签</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1、匹配&lt;开始&gt;结束的全局正则：</span>
<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&lt;([^&gt;]+)&gt;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>
<span class="token comment">// 2、body内部的p标签</span>
body <span class="token operator">=</span> <span class="token string">&quot;&lt;p&gt;test&lt;/p&gt;&quot;</span>
<span class="token comment">// 3、根据正则表达式直接替换为&quot;&quot;</span>
result <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4、打印结果，显示test</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> Math</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>＝<span class="token number">4</span>   
<span class="token comment">//四舍五入，round() 方法可把一个数字舍入为最接近的整数。  </span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>＝<span class="token number">4</span>   
<span class="token comment">//强制向上取整，ceil() 方法将数字向上舍入为最接近的整数，并返回结果。如果传递的参数是整数，则不会舍入该值。  </span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>＝<span class="token number">3</span>   <span class="token comment">//强制向下取整，floor() 方法返回小于等于x的最大整数。如果传递的参数是一个整数，该值不变  </span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3</span>   <span class="token comment">//强行转化，得出最小整数，同Math.floor方法。parseInt() 函数可解析一个字符串，并返回一个整数。</span>
</code></pre></div>`,8),p=[l];function o(c,r){return n(),s("div",null,p)}const i=t(e,[["render",o],["__file","index.html.vue"]]);export{i as default};
