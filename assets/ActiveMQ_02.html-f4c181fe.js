import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const e={},p=t(`<h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>session.commit();
session.rollback();
</code></pre></div><p>用来提交/回滚事务</p><h3 id="purge" tabindex="-1"><a class="header-anchor" href="#purge" aria-hidden="true">#</a> Purge</h3><p>清理消息</p><h3 id="签收模式" tabindex="-1"><a class="header-anchor" href="#签收模式" aria-hidden="true">#</a> 签收模式</h3><p>签收代表接收端的session已收到消息的一次确认，反馈给broker</p><p>ActiveMQ支持自动签收与手动签收</p><h4 id="session-auto-acknowledge" tabindex="-1"><a class="header-anchor" href="#session-auto-acknowledge" aria-hidden="true">#</a> Session.AUTO_ACKNOWLEDGE</h4><p>当客户端从receiver或onMessage成功返回时，Session自动签收客户端的这条消息的收条。</p><h4 id="session-client-acknowledge" tabindex="-1"><a class="header-anchor" href="#session-client-acknowledge" aria-hidden="true">#</a> Session.CLIENT_ACKNOWLEDGE</h4><p>客户端通过调用消息(Message)的acknowledge方法签收消息。在这种情况下，签收发生在Session层面：签收一个已经消费的消息会自动地签收这个Session所有已消费的收条。</p><h4 id="session-dups-ok-acknowledge" tabindex="-1"><a class="header-anchor" href="#session-dups-ok-acknowledge" aria-hidden="true">#</a> Session.DUPS_OK_ACKNOWLEDGE</h4><p>Session不必确保对传送消息的签收，这个模式可能会引起消息的重复，但是降低了Session的开销，所以只有客户端能容忍重复的消息，才可使用。</p><h3 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化" aria-hidden="true">#</a> 持久化</h3><p>默认持久化是开启的</p><div class="language-text" data-ext="text"><pre class="language-text"><code>producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT)
</code></pre></div><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h3><p>可以打乱消费顺序</p><div class="language-text" data-ext="text"><pre class="language-text"><code>producer.setPriority
</code></pre></div><p>配置文件需要指定使用优先级的目的地</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&lt;policyEntry queue=&quot;queue1&quot; prioritizedMessages=&quot;true&quot; /&gt;
</code></pre></div><h3 id="消息超时-过期" tabindex="-1"><a class="header-anchor" href="#消息超时-过期" aria-hidden="true">#</a> 消息超时/过期</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>producer.setTimeToLive
</code></pre></div><p>设置了消息超时的消息，消费端在超时后无法在消费到此消息。</p><p>给消息设置一个超时时间 -&gt; 死信队列 -&gt; 拿出来 -&gt; 重发</p><h4 id="死信" tabindex="-1"><a class="header-anchor" href="#死信" aria-hidden="true">#</a> 死信</h4><p>此类消息会进入到<code>ActiveMQ.DLQ</code>队列且不会自动清除，称为死信</p><p>此处有消息堆积的风险</p><h4 id="修改死信队列名称" tabindex="-1"><a class="header-anchor" href="#修改死信队列名称" aria-hidden="true">#</a> 修改死信队列名称</h4><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>			  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policyEntry</span> <span class="token attr-name">queue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>f<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prioritizedMessages</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>deadLetterStrategy</span><span class="token punctuation">&gt;</span></span> 

					<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>individualDeadLetterStrategy</span>   <span class="token attr-name">queuePrefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DLxxQ.<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useQueueForQueueMessages</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> 

				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>deadLetterStrategy</span><span class="token punctuation">&gt;</span></span> 
			  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policyEntry</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>useQueueForQueueMessages: 设置使用队列保存死信，还可以设置useQueueForTopicMessages，使用Topic来保存死信</p><h4 id="让非持久化的消息也进入死信队列" tabindex="-1"><a class="header-anchor" href="#让非持久化的消息也进入死信队列" aria-hidden="true">#</a> 让非持久化的消息也进入死信队列</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>			&lt;individualDeadLetterStrategy   queuePrefix=&quot;DLxxQ.&quot; useQueueForQueueMessages=&quot;true&quot;  processNonPersistent=&quot;true&quot; /&gt; 
</code></pre></div><p>processNonPersistent=&quot;true&quot;</p><h4 id="过期消息不进死信队列" tabindex="-1"><a class="header-anchor" href="#过期消息不进死信队列" aria-hidden="true">#</a> 过期消息不进死信队列</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>&lt;individualDeadLetterStrategy   processExpired=&quot;false&quot;  /&gt; 
</code></pre></div><h3 id="独占消费者" tabindex="-1"><a class="header-anchor" href="#独占消费者" aria-hidden="true">#</a> 独占消费者</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>	Queue queue = session.createQueue(&quot;xxoo?consumer.exclusive=true&quot;);
</code></pre></div><p>还可以设置优先级</p><div class="language-text" data-ext="text"><pre class="language-text"><code>Queue queue = session.createQueue(&quot;xxoo?consumer.exclusive=true&amp;consumer.priority=10&quot;);
</code></pre></div><h2 id="消息类型" tabindex="-1"><a class="header-anchor" href="#消息类型" aria-hidden="true">#</a> 消息类型</h2><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h3><h4 id="发送端" tabindex="-1"><a class="header-anchor" href="#发送端" aria-hidden="true">#</a> 发送端</h4><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">&quot;qiqi&quot;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">398.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token class-name">Message</span> message <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createObjectMessage</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="接受端" tabindex="-1"><a class="header-anchor" href="#接受端" aria-hidden="true">#</a> 接受端</h4><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token keyword">if</span><span class="token punctuation">(</span>message <span class="token keyword">instanceof</span> <span class="token class-name">ActiveMQObjectMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			
			<span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Girl</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ActiveMQObjectMessage</span><span class="token punctuation">)</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
</code></pre></div><p><strong>如果遇到此类报错</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>Exception in thread &quot;main&quot; javax.jms.JMSException: Failed to build body from content. Serializable class not available to broker. Reason: java.lang.ClassNotFoundException: Forbidden class com.osvue.mq.Girl! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http://activemq.apache.org/objectmessage.html for more information on how to configure trusted classes.
	at org.apache.activemq.util.JMSExceptionSupport.create(JMSExceptionSupport.java:36)
	at org.apache.activemq.command.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:213)
	at com.osvue.mq.Receiver.main(Receiver.java:65)
Caused by: java.lang.ClassNotFoundException: Forbidden class com.osvue.mq.Girl! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http://activemq.apache.org/objectmessage.html for more information on how to configure trusted classes.
	at org.apache.activemq.util.ClassLoadingAwareObjectInputStream.checkSecurity(ClassLoadingAwareObjectInputStream.java:112)
	at org.apache.activemq.util.ClassLoadingAwareObjectInputStream.resolveClass(ClassLoadingAwareObjectInputStream.java:57)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1868)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2042)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.apache.activemq.command.ActiveMQObjectMessage.getObject(ActiveMQObjectMessage.java:211)
	... 1 more
</code></pre></div><p><strong>需要添加信任</strong></p><div class="language-java" data-ext="java"><pre class="language-java"><code>		connectionFactory<span class="token punctuation">.</span><span class="token function">setTrustedPackages</span><span class="token punctuation">(</span>
				<span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
						<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
								<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
										<span class="token class-name">Girl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
										<span class="token punctuation">}</span>
								
								<span class="token punctuation">)</span>
						<span class="token punctuation">)</span>
				
				<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="bytesmessage" tabindex="-1"><a class="header-anchor" href="#bytesmessage" aria-hidden="true">#</a> bytesMessage</h3><h4 id="发送端-1" tabindex="-1"><a class="header-anchor" href="#发送端-1" aria-hidden="true">#</a> 发送端</h4><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token class-name">BytesMessage</span> bytesMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createBytesMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bytesMessage<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bytesMessage<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="接受端-1" tabindex="-1"><a class="header-anchor" href="#接受端-1" aria-hidden="true">#</a> 接受端</h4><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token keyword">if</span><span class="token punctuation">(</span>message <span class="token keyword">instanceof</span> <span class="token class-name">BytesMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">BytesMessage</span> bm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BytesMessage</span><span class="token punctuation">)</span>message<span class="token punctuation">;</span>
			
			 <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
             <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
             <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bm<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
</code></pre></div><p>还可以使用ActiveMQ给提供的便捷方法,但要注意读取和写入的顺序</p><div class="language-text" data-ext="text"><pre class="language-text"><code>bm.readBoolean()
bm.readUTF()
</code></pre></div><h4 id="写入文件" tabindex="-1"><a class="header-anchor" href="#写入文件" aria-hidden="true">#</a> 写入文件</h4><div class="language-java" data-ext="java"><pre class="language-java"><code>                    <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d:/aa.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e2<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> by <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bm<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>by<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
</code></pre></div><h3 id="mapmessage" tabindex="-1"><a class="header-anchor" href="#mapmessage" aria-hidden="true">#</a> MapMessage</h3><h4 id="发送端-2" tabindex="-1"><a class="header-anchor" href="#发送端-2" aria-hidden="true">#</a> 发送端</h4><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token class-name">MapMessage</span> mapMessage <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createMapMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
		
		mapMessage<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mapMessage<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;yihun&quot;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mapMessage<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mapMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="接收端" tabindex="-1"><a class="header-anchor" href="#接收端" aria-hidden="true">#</a> 接收端</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>		Message message = consumer.receive();
		MapMessage mes = (MapMessage) message;
		
		System.out.println(mes);

		System.out.println(mes.getString(&quot;name&quot;));
</code></pre></div><h2 id="消息发送原理" tabindex="-1"><a class="header-anchor" href="#消息发送原理" aria-hidden="true">#</a> 消息发送原理</h2><h3 id="同步与异步" tabindex="-1"><a class="header-anchor" href="#同步与异步" aria-hidden="true">#</a> 同步与异步</h3><table><thead><tr><th></th><th>开启事务</th><th>关闭事务</th></tr></thead><tbody><tr><td>持久化</td><td>异步</td><td>同步</td></tr><tr><td>非持久化</td><td>异步</td><td>异步</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>我们可以通过以下几种方式来设置异步发送：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token class-name">ActiveMQConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span>
				<span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
				<span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
				<span class="token string">&quot;tcp://localhost:61616&quot;</span>
				<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 2.获取一个向ActiveMQ的连接</span>
		connectionFactory<span class="token punctuation">.</span><span class="token function">setUseAsyncSend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">ActiveMQConnection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ActiveMQConnection</span><span class="token punctuation">)</span>connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		connection<span class="token punctuation">.</span><span class="token function">setUseAsyncSend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="消息堆积" tabindex="-1"><a class="header-anchor" href="#消息堆积" aria-hidden="true">#</a> 消息堆积</h3><p>producer每发送一个消息，统计一下发送的字节数，当字节数达到ProducerWindowSize值时，需要等待broker的确认，才能继续发送。</p><p>brokerUrl中设置: <code>tcp://localhost:61616?jms.producerWindowSize=1048576</code></p><p>destinationUri中设置: <code>myQueue?producer.windowSize=1048576</code></p><h3 id="延迟消息投递" tabindex="-1"><a class="header-anchor" href="#延迟消息投递" aria-hidden="true">#</a> 延迟消息投递</h3><p>首先在配置文件activemq.xml中开启延迟和调度</p><p><strong>schedulerSupport=&quot;true&quot;</strong></p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token operator">&lt;</span>broker xmlns<span class="token operator">=</span><span class="token string">&quot;http://activemq.apache.org/schema/core&quot;</span> brokerName<span class="token operator">=</span><span class="token string">&quot;localhost&quot;</span> dataDirectory<span class="token operator">=</span><span class="token string">&quot;\${activemq.data}&quot;</span> schedulerSupport<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">&gt;</span>
</code></pre></div><h3 id="延迟发送" tabindex="-1"><a class="header-anchor" href="#延迟发送" aria-hidden="true">#</a> 延迟发送</h3><div class="language-java" data-ext="java"><pre class="language-java"><code>message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_DELAY</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="带间隔的重复发送" tabindex="-1"><a class="header-anchor" href="#带间隔的重复发送" aria-hidden="true">#</a> 带间隔的重复发送</h3><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token keyword">long</span> delay <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
		<span class="token keyword">long</span> period <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> repeat <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
		message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_DELAY</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
		message<span class="token punctuation">.</span><span class="token function">setLongProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_PERIOD</span><span class="token punctuation">,</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>
		message<span class="token punctuation">.</span><span class="token function">setIntProperty</span><span class="token punctuation">(</span><span class="token class-name">ScheduledMessage</span><span class="token punctuation">.</span><span class="token constant">AMQ_SCHEDULED_REPEAT</span><span class="token punctuation">,</span> repeat<span class="token punctuation">)</span><span class="token punctuation">;</span>
		createProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="cron表达式定时发送" tabindex="-1"><a class="header-anchor" href="#cron表达式定时发送" aria-hidden="true">#</a> Cron表达式定时发送</h3><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式：</p><p><em>Seconds Minutes Hours DayofMonth Month DayofWeek Year或</em></p><p>Seconds Minutes Hours DayofMonth Month DayofWeek</p><p>每一个域可出现的字符如下：</p><p>Seconds:可出现&quot;, - * /&quot;四个字符，有效范围为0-59的整数</p><p>Minutes:可出现&quot;, - * /&quot;四个字符，有效范围为0-59的整数</p><p>Hours:可出现&quot;, - * /&quot;四个字符，有效范围为0-23的整数</p><p>DayofMonth:可出现&quot;, - * / ? L W C&quot;八个字符，有效范围为0-31的整数</p><p>Month:可出现&quot;, - * /&quot;四个字符，有效范围为1-12的整数或JAN-DEc</p><p>DayofWeek:可出现&quot;, - * / ? L C #&quot;四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推</p><p>Year:可出现&quot;, - * /&quot;四个字符，有效范围为1970-2099年</p><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p><p>(1)<em>：表示匹配该域的任意值，假如在Minutes域使用</em>, 即表示每分钟都会触发事件。</p><p>(2)?:只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样。</p><p>(3)-:表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次</p><p>(4)/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次.</p><p>(5),:表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。</p><p>(6)L:表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</p><p>(7)W: 表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一 到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份</p><p>(8)LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</p><p>(9)#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p><p>举几个例子:</p><p>0 0 2 1 * ? * 表示在每月的1日的凌晨2点调度任务</p><p>0 15 10 ? * MON-FRI 表示周一到周五每天上午10：15执行作业</p><p>0 15 10 ? 6L 2002-2006 表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p><p>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。</p><p>按顺序依次为</p><p>秒（0~59）</p><p>分钟（0~59）</p><p>小时（0~23）</p><p>天（月）（0~31，但是你需要考虑你月的天数）</p><p>月（0~11）</p><p>天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）</p><p>年份（1970－2099）</p><p>其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于&quot;月份中的日期&quot;和&quot;星期中的日期&quot;这两个元素互斥的,必须要对其中一个设置?</p><p>0 0 10,14,16 * * ? 每天上午10点，下午2点，4点</p><p>0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时</p><p>0 0 12 ? * WED 表示每个星期三中午12点</p><p>&quot;0 0 12 * * ?&quot; 每天中午12点触发</p><p>&quot;0 15 10 ? * *&quot; 每天上午10:15触发</p><p>&quot;0 15 10 * * ?&quot; 每天上午10:15触发</p><p>&quot;0 15 10 * * ? *&quot; 每天上午10:15触发</p><p>&quot;0 15 10 * * ? 2005&quot; 2005年的每天上午10:15触发</p><p>&quot;0 * 14 * * ?&quot; 在每天下午2点到下午2:59期间的每1分钟触发</p><p>&quot;0 0/5 14 * * ?&quot; 在每天下午2点到下午2:55期间的每5分钟触发</p><p>&quot;0 0/5 14,18 * * ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</p><p>&quot;0 0-5 14 * * ?&quot; 在每天下午2点到下午2:05期间的每1分钟触发</p><p>&quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午2:10和2:44触发</p><p>&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午10:15触发</p><p>&quot;0 15 10 15 * ?&quot; 每月15日上午10:15触发</p><p>&quot;0 15 10 L * ?&quot; 每月最后一日的上午10:15触发</p><p>&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午10:15触发</p><p>&quot;0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触发</p><p>&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15触发</p><h2 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器" aria-hidden="true">#</a> 监听器</h2><p>可以使用监听器来处理消息接收</p><div class="language-java" data-ext="java"><pre class="language-java"><code>consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>需要实现接口MessageListener</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListener</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// TODO Auto-generated method stub</span>
		<span class="token class-name">TextMessage</span> textMessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span>message<span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;xxoo&quot;</span> <span class="token operator">+</span> textMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// TODO Auto-generated catch block</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre></div><p>当收到消息后会调起onMessage方法</p><h2 id="消息过滤" tabindex="-1"><a class="header-anchor" href="#消息过滤" aria-hidden="true">#</a> 消息过滤</h2><h3 id="消息发送" tabindex="-1"><a class="header-anchor" href="#消息发送" aria-hidden="true">#</a> 消息发送</h3><div class="language-java" data-ext="java"><pre class="language-java"><code>		<span class="token class-name">MapMessage</span> msg1 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createMapMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg1<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;qiqi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg1<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		msg1<span class="token punctuation">.</span><span class="token function">setStringProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;qiqi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg1<span class="token punctuation">.</span><span class="token function">setIntProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">MapMessage</span> msg2 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createMapMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg2<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg2<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg2<span class="token punctuation">.</span><span class="token function">setStringProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg2<span class="token punctuation">.</span><span class="token function">setIntProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">MapMessage</span> msg3 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createMapMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg3<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;qianqian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg3<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;17&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg3<span class="token punctuation">.</span><span class="token function">setStringProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;qianqian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		msg3<span class="token punctuation">.</span><span class="token function">setIntProperty</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="消息接收" tabindex="-1"><a class="header-anchor" href="#消息接收" aria-hidden="true">#</a> 消息接收</h3><div class="language-java" data-ext="java"><pre class="language-java"><code>	
		<span class="token class-name">String</span> selector1 <span class="token operator">=</span> <span class="token string">&quot;age &gt; 17&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> selector2 <span class="token operator">=</span> <span class="token string">&quot;name = &#39;lucy&#39;&quot;</span><span class="token punctuation">;</span>
		<span class="token class-name">MessageConsumer</span> consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>selector2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,148),o=[p];function c(u,l){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","ActiveMQ_02.html.vue"]]);export{r as default};
