import{_ as u,M as l,p as i,q as r,R as n,N as a,V as t,t as s,a1 as c}from"./framework-d81ad7e5.js";const d={},k=c(`<h1 id="客户端信息入库" tabindex="-1"><a class="header-anchor" href="#客户端信息入库" aria-hidden="true">#</a> 客户端信息入库</h1><h2 id="oauth-client-details" tabindex="-1"><a class="header-anchor" href="#oauth-client-details" aria-hidden="true">#</a> oauth_client_details</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>为什么要入库 ?? <ul><li>配置资源服务器需要为每一个App配置一个AppID</li><li>优雅</li><li>简单</li><li>等等.........</li></ul></li></ul></div><h2 id="之前的写法" tabindex="-1"><a class="header-anchor" href="#之前的写法" aria-hidden="true">#</a> 之前的写法</h2><ul><li>(这个还是只配置了一个)</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  clients<span class="token punctuation">.</span><span class="token function">inMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">&quot;javaboy&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">resourceIds</span><span class="token punctuation">(</span><span class="token string">&quot;res1&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">&quot;authorization_code&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;refresh_token&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">redirectUris</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8082/index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>客户端信息入库涉及到的接口主要是 ClientDetailsService，这个接口主要有两个实现类 <ul><li>InMemoryClientDetailsService</li><li>JdbcClientDetailsService</li></ul></li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>oauth_client_details<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>oauth_client_details<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>client_id<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>resource_ids<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>client_secret<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>scope<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>authorized_grant_types<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>web_server_redirect_uri<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>authorities<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>access_token_validity<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>refresh_token_validity<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>additional_information<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>autoapprove<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>client_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre></div><ul><li>auth-server 添加数据库依赖,和配置 <strong>application.properties</strong></li></ul><div class="language-properties" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///ssm?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimeZone=Asia/Shanghai</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">0</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>

<span class="token key attr-name">spring.main.allow-bean-definition-overriding</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre></div><blockquote><p>这里的配置多了最后一条。这是因为我们一会要创建自己的 ClientDetailsService，而系统已经创建了 ClientDetailsService，加了最后一条就允许我们自己的实例覆盖系统默认的实例。</p></blockquote><ul><li>接下来，我们来提供自己的实例即可：</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token class-name">ClientDetailsService</span> <span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcClientDetailsService</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    clients<span class="token punctuation">.</span><span class="token function">withClientDetails</span><span class="token punctuation">(</span><span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li><p>配置完成后，重启 auth-server，走一遍第三方登录流程</p></li><li><p>修改后的 AuthorizationServerTokenServices 实例如下：</p></li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token class-name">AuthorizationServerTokenServices</span> <span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultTokenServices</span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">setClientDetailsService</span><span class="token punctuation">(</span><span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">setSupportRefreshToken</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">setTokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> services<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="授权-url-id-authorized-url" tabindex="-1"><a class="header-anchor" href="#授权-url-id-authorized-url" aria-hidden="true">#</a> 授权 URL{id=authorized-url}</h2>`,16),h={class:"table-of-contents"},_=c(`<h2 id="基于-httpsecurity-配置-id-http-security" tabindex="-1"><a class="header-anchor" href="#基于-httpsecurity-配置-id-http-security" aria-hidden="true">#</a> 基于 HttpSecurity 配置 {id=http-security}</h2><div class="language-java" data-ext="java"><pre class="language-java"><code> 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">SecurityFilterChain</span></span><span class="token punctuation">;</span>
 
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">defaultSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span>customizer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>

            <span class="token comment">// 这里可以根据 下方表格 配置</span>
            <span class="token comment">// 这里可以根据 下方表格 配置</span>
            <span class="token comment">// 这里可以根据 下方表格 配置</span>

            <span class="token comment">// 其他地址：需要授权访问</span>
            <span class="token comment">// 如果需要此配置，必须要放在最后一行，否则启动项目报错</span>
            customizer<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div>`,2),m=n("code",null,"POST",-1),y=n("code",null,"PUT",-1),v=n("code",null,"PATCH",-1),f=n("code",null,"DELETE",-1),g=c("<li><code>mvcMatchers</code> 基于 <code>org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher</code> 实现，方法支持正则表达式，可以填写多个路径</li><li><code>regexMatchers</code> 基于 <code>org.springframework.security.web.util.matcher.RegexRequestMatcher</code> 实现，方法支持正则表达式，可以填写多个路径</li><li><code>antMatchers</code> 基于 <code>org.springframework.security.web.util.matcher.AntPathRequestMatcher</code> 实现，方法支持正则表达式，可以填写多个路径</li><li><code>requestMatchers</code> 无论是使用字符串还是接口 <code>RequestMatcher</code> 的实现，都支持填写多个值（参数为数组） <ol><li>Spring Boot 2 不支持使用字符串，仅支持使用 <code>RequestMatcher</code> 的实现</li><li>Spring Boot 3 支持使用 字符串 和 <code>RequestMatcher</code> 的实现</li></ol></li>",4),w=n("th",null,"作用",-1),A=n("tr",null,[n("td",null,[n("code",null,'customizer.mvcMatchers("/a1").permitAll();')]),n("td",null,[n("code",null,"/a1"),s(" 路径允许所有人访问，基于 "),n("code",null,"MvcRequestMatcher"),s(" 实现")])],-1),b=n("tr",null,[n("td",null,[n("code",null,'customizer.mvcMatchers(HttpMethod.GET, "/a2").permitAll();')]),n("td",null,[n("code",null,"/a2"),s(" 仅允许使用 "),n("code",null,"GET"),s(" 请求 匿名访问")])],-1),M=n("tr",null,[n("td",null,[n("code",null,'customizer.mvcMatchers("/a3").hasAuthority("A1");')]),n("td",null,[n("code",null,"/a3"),s(" 拥有 "),n("code",null,"A1"),s(" 权限的用户才能访问")])],-1),z=n("td",null,[n("code",null,'customizer.mvcMatchers("/a4").hasAnyAuthority("A1", "A2");')],-1),S=n("code",null,"/a4",-1),q=n("code",null,"A1",-1),R=n("code",null,"A2",-1),L=n("code",null,"权限",-1),T=n("tr",null,[n("td",null,[n("code",null,'customizer.mvcMatchers("/a5").hasRole("R1");')]),n("td",null,[n("code",null,"/a5"),s(" 拥有 "),n("code",null,"R1"),s(),n("code",null,"角色"),s("的用户才能访问")])],-1),E=n("td",null,[n("code",null,'customizer.mvcMatchers("/a6").hasAnyRole("R1", "R2");')],-1),D=n("code",null,"/a6",-1),C=n("code",null,"R1",-1),U=n("code",null,"R2",-1),x=n("code",null,"角色",-1),N=n("tr",null,[n("td",null,[n("code",null,'customizer.mvcMatchers("/a7").hasIpAddress("192.168.0.0/16");')]),n("td",null,[n("code",null,"/a7"),s(" 从 "),n("code",null,"192.168.0.0/16"),s(" 发送请求可以匿名访问")])],-1),F=n("tr",null,[n("td",null,[n("code",null,'customizer.mvcMatchers("/a8").rememberMe();')]),n("td",null,[n("code",null,"/a8"),s(" 使用 "),n("code",null,"记住我"),s(" 功能登陆的用户可以访问")])],-1),j=n("tr",null,[n("td",null,[n("code",null,'customizer.mvcMatchers("/a9").fullyAuthenticated();')]),n("td",null,[n("code",null,"/a9"),s(" 必须完整验证身份后才能访问，使用 "),n("code",null,"记住我"),s(" 功能登陆的用户无法访问")])],-1),B=n("td",null,[n("code",null,'customizer.mvcMatchers("/a10").denyAll();')],-1),P=n("code",null,"/a10",-1),H=n("td",null,[n("code",null,'customizer.mvcMatchers("/a11").not().hasAuthority("A1");')],-1),I=n("code",null,"/a11",-1),G=n("code",null,"A1",-1),O=n("code",null,"权限",-1),V=n("tr",null,[n("td",null,[n("code",null,`customizer.mvcMatchers("/a12").access("hasAuthority('A1')");`)]),n("td",null,[n("code",null,"/a12"),s(" 与上方 "),n("code",null,"/a3"),s(" 结果一致")])],-1),J=n("td",null,[n("code",null,`customizer.mvcMatchers("/a13").access("hasAuthority('A1') and hasAuthority('A2')");`)],-1),Y=n("code",null,"/a13",-1),K=n("code",null,"同时",-1),X=n("code",null,"A1",-1),Z=n("code",null,"A2",-1),Q=n("td",null,[n("code",null,`customizer.mvcMatchers("/a14").access("!hasAuthority('A1')");`)],-1),W=n("code",null,"/a14",-1),$=n("code",null,"A1",-1),nn=n("code",null,"权限",-1),sn=n("tr",null,[n("td",null,[n("code",null,'customizer.regexMatchers("/a21").permitAll();')]),n("td",null,[n("code",null,"/a21"),s(" 与 "),n("code",null,"mvcMatchers"),s(" 方法雷同，使用 "),n("code",null,"RegexRequestMatcher"),s(" 实现")])],-1),an=n("tr",null,[n("td",null,[n("code",null,'customizer.antMatchers("/a31").permitAll();')]),n("td",null,[n("code",null,"/a31"),s(" 与 "),n("code",null,"mvcMatchers"),s(" 方法雷同，使用 "),n("code",null,"AntPathRequestMatcher"),s(" 实现")])],-1),tn=n("th",null,"作用",-1),en=n("tr",null,[n("td",null,[n("code",null,'customizer.requestMatchers("/a1").permitAll();')]),n("td",null,[n("code",null,"/a1"),s(" 路径允许所有人访问，基于 "),n("code",null,"MvcRequestMatcher"),s(" 实现")])],-1),on=n("tr",null,[n("td",null,[n("code",null,'customizer.requestMatchers(HttpMethod.GET, "/a2").permitAll();')]),n("td",null,[n("code",null,"/a2"),s(" 仅允许使用 "),n("code",null,"GET"),s(" 请求 匿名访问")])],-1),ln=n("tr",null,[n("td",null,[n("code",null,'customizer.requestMatchers("/a3").hasAuthority("A1");')]),n("td",null,[n("code",null,"/a3"),s(" 拥有 "),n("code",null,"A1"),s(" 权限的用户才能访问")])],-1),cn=n("td",null,[n("code",null,'customizer.requestMatchers("/a4").hasAnyAuthority("A1", "A2");')],-1),pn=n("code",null,"/a4",-1),un=n("code",null,"A1",-1),rn=n("code",null,"A2",-1),dn=n("code",null,"权限",-1),kn=n("tr",null,[n("td",null,[n("code",null,'customizer.requestMatchers("/a5").hasRole("R1");')]),n("td",null,[n("code",null,"/a5"),s(" 拥有 "),n("code",null,"R1"),s(),n("code",null,"角色"),s("的用户才能访问")])],-1),hn=n("td",null,[n("code",null,'customizer.requestMatchers("/a6").hasAnyRole("R1", "R2");')],-1),_n=n("code",null,"/a6",-1),mn=n("code",null,"R1",-1),yn=n("code",null,"R2",-1),vn=n("code",null,"角色",-1),fn=n("tr",null,[n("td",null,[n("code",null,'customizer.requestMatchers("/a8").rememberMe();')]),n("td",null,[n("code",null,"/a8"),s(" 使用 "),n("code",null,"记住我"),s(" 功能登陆的用户可以访问")])],-1),gn=n("tr",null,[n("td",null,[n("code",null,'customizer.requestMatchers("/a9").fullyAuthenticated();')]),n("td",null,[n("code",null,"/a9"),s(" 必须完整验证身份后才能访问，使用 "),n("code",null,"记住我"),s(" 功能登陆的用户无法访问")])],-1),wn=n("td",null,[n("code",null,'customizer.requestMatchers("/a10").denyAll();')],-1),An=n("code",null,"/a10",-1),bn=n("th",null,"作用",-1),Mn=n("tbody",null,[n("tr",null,[n("td",null,[n("code",null,"customizer.requestMatchers(request -> { /* 这里可以使用 request 进行判断*/ return true;}).permitAll();")]),n("td",null,[s("可以根据 "),n("code",null,"HttpServletRequest"),s(" 进行自定义判断，最后的 "),n("code",null,"permitAll"),s(" 也可修改为 "),n("code",null,"hasRole"),s(" 等等")])])],-1),zn=n("h2",{id:"基于-preauthorize-配置-id-pre-authorize",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基于-preauthorize-配置-id-pre-authorize","aria-hidden":"true"},"#"),s(" 基于 @PreAuthorize 配置 {id=pre-authorize}")],-1);function Sn(qn,Rn){const o=l("router-link"),p=l("RouterLink"),e=l("font");return i(),r("div",null,[k,n("nav",h,[n("ul",null,[n("li",null,[a(o,{to:"#oauth-client-details"},{default:t(()=>[s("oauth_client_details")]),_:1})]),n("li",null,[a(o,{to:"#之前的写法"},{default:t(()=>[s("之前的写法")]),_:1})]),n("li",null,[a(o,{to:"#授权-url-id-authorized-url"},{default:t(()=>[s("授权 URL{id=authorized-url}")]),_:1})]),n("li",null,[a(o,{to:"#基于-httpsecurity-配置-id-http-security"},{default:t(()=>[s("基于 HttpSecurity 配置 {id=http-security}")]),_:1})]),n("li",null,[a(o,{to:"#基于-preauthorize-配置-id-pre-authorize"},{default:t(()=>[s("基于 @PreAuthorize 配置 {id=pre-authorize}")]),_:1})])])]),_,n("ol",null,[n("li",null,[s("注意："),m,s("、"),y,s("、"),v,s("、"),f,s(" 可能会被 CSRF 拦截而响应 401， 请参考："),a(p,{to:"/spring/springSecurity/csrf.html"},{default:t(()=>[s("CSRF 跨站请求伪造")]),_:1})]),g]),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[s("使用方法："),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("仅限 Spring Boot 2")]),_:1})])]),w])]),n("tbody",null,[A,b,M,n("tr",null,[z,n("td",null,[S,s(" 拥有 "),q,s(),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("或")]),_:1})]),s(),R,s(),L,s("的用户才能访问")])]),T,n("tr",null,[E,n("td",null,[D,s(" 拥有 "),C,s(),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("或")]),_:1})]),s(),U,s(),x,s("的用户才能访问")])]),N,F,j,n("tr",null,[B,n("td",null,[P,s(),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("禁止")]),_:1})]),s("访问")])]),n("tr",null,[H,n("td",null,[I,s(" 取反，"),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("不")]),_:1})]),s("拥有 "),G,s(),O,s("才能访问")])]),V,n("tr",null,[J,n("td",null,[Y,s(),K,s("拥有 "),X,s(),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("和")]),_:1})]),s(),Z,s(" 权限才能访问")])]),n("tr",null,[Q,n("td",null,[W,s(" 取反，"),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("不")]),_:1})]),s("拥有 "),$,s(),nn,s("才能访问")])]),sn,an])]),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[s("使用方法："),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("仅限 Spring Boot 3")]),_:1})])]),tn])]),n("tbody",null,[en,on,ln,n("tr",null,[cn,n("td",null,[pn,s(" 拥有 "),un,s(),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("或")]),_:1})]),s(),rn,s(),dn,s("的用户才能访问")])]),kn,n("tr",null,[hn,n("td",null,[_n,s(" 拥有 "),mn,s(),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("或")]),_:1})]),s(),yn,s(),vn,s("的用户才能访问")])]),fn,gn,n("tr",null,[wn,n("td",null,[An,s(),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("禁止")]),_:1})]),s("访问")])])])]),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,[s("使用方法："),n("strong",null,[a(e,{color:"red"},{default:t(()=>[s("同时支持 Spring Boot 2、3")]),_:1})])]),bn])]),Mn]),zn,n("p",null,[s("参见："),a(p,{to:"/spring/springSecurity/pre-authorize.html"},{default:t(()=>[s("使用 @PreAuthorize 注解")]),_:1})])])}const Tn=u(d,[["render",Sn],["__file","client_jdbc.html.vue"]]);export{Tn as default};
