import{_ as s,p as n,q as a,a1 as e}from"./framework-d81ad7e5.js";const o={},t=e(`<ul><li>Oracle的三层分页指的是在进行分页查询时，使用三种不同的方式来实现分页效果，</li><li>分别是使用<strong>ROWNUM</strong>、使用<strong>OFFSET</strong>和<strong>FETC</strong>H、使用<code>ROW_NUMBER() OVER()</code></li></ul><h3 id="使用rownum" tabindex="-1"><a class="header-anchor" href="#使用rownum" aria-hidden="true">#</a> 使用ROWNUM</h3><ul><li>ROWNUM是Oracle中一个伪列，它用于表示返回的行的序号。</li><li>使用ROWNUM进行分页查询的方法是在SELECT语句中加入WHERE子句，并在WHERE子句中指定ROWNUM的取值范围，例如：</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> ROWNUM r
  <span class="token keyword">FROM</span> my_table a
  <span class="token keyword">WHERE</span> ROWNUM <span class="token operator">&lt;=</span> <span class="token number">30</span>
<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> r <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>上述查询语句的意思是查询my_table表中的前30条记录，然后<strong>在这30条记录中取出第20到第30条记录</strong>作为结果返回。</li><li>使用ROWNUM进行分页查询的优点是简单易懂，<strong>缺点是在查询大量数据时性能较差</strong>。</li></ul><h3 id="使用offset和fetch" tabindex="-1"><a class="header-anchor" href="#使用offset和fetch" aria-hidden="true">#</a> 使用OFFSET和FETCH</h3><ul><li>OFFSET和FETCH是<strong>Oracle 12c</strong>引入的语法，它们可以更方便地实现分页查询。</li><li>使用OFFSET和FETCH进行分页查询的方法是在SELECT语句中加入OFFSET和FETCH子句，例如：</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> my_table
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> my_column
<span class="token keyword">OFFSET</span> <span class="token number">20</span> <span class="token keyword">ROWS</span> <span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token number">10</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span>
</code></pre></div><ul><li>上述查询语句的意思是对my_table表按照my_column列进行排序，然后<strong>取出从第21条记录开始的10条记录作为结果</strong>返回。</li><li>使用OFFSET和FETCH进行分页查询的优点是简单方便，<strong>缺点</strong>是只有在Oracle 12c及以上版本中才能使用。</li></ul><h3 id="使用row-number-over" tabindex="-1"><a class="header-anchor" href="#使用row-number-over" aria-hidden="true">#</a> 使用ROW_NUMBER() OVER()</h3><ul><li>ROW_NUMBER() OVER()是Oracle中一种用于计算行号的函数。</li><li>使用ROW_NUMBER() OVER()进行分页查询的方法是在SELECT语句中加入ROW_NUMBER() OVER()函数，</li><li>并在WHERE子句中指定ROW_NUMBER() OVER()的取值范围，例如：</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> <span class="token punctuation">(</span>
  <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> my_column<span class="token punctuation">)</span> r
  <span class="token keyword">FROM</span> my_table a
<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> r <span class="token operator">BETWEEN</span> <span class="token number">21</span> <span class="token operator">AND</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>上述查询语句的意思是对my_table表按照my_column列进行排序，然后<strong>取出第21到第30条记录作为结果</strong>返回。</li><li>使用ROW_NUMBER() OVER()进行分页查询的优点是灵活性高，可以实现各种不同的分页方式，缺点是语法较为复杂。</li></ul>`,13),l=[t];function p(c,r){return n(),a("div",null,l)}const i=s(o,[["render",p],["__file","ora_limit.html.vue"]]);export{i as default};
