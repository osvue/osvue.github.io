import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<ul><li><p><strong>在并发编程中，我们通常要保证可见性、原子性、有序性：</strong></p><ul><li>可见性：当多个线程共享同一变量时，若其中一个线程对该共享变量进行了修改，那么这个修改对其他线程是立即可见的。</li><li>原子性：一个或多个操作为一个整体，要么都执行且不会受到任何因素的干扰而中断，要么都不执行。</li><li>有序性：程序执行的顺序按照代码的先后顺序执行。</li></ul></li><li><p>但是volatile只保证了可见性和有序性。</p></li></ul><h3 id="java内存模型jmm介绍——可见性" tabindex="-1"><a class="header-anchor" href="#java内存模型jmm介绍——可见性" aria-hidden="true">#</a> java内存模型JMM介绍——可见性</h3><ul><li>JVM运行程序的实体是<strong>线程</strong>，而每个线程创建时由JVM分配各自的<strong>工作内存</strong>。线程的工作内存是<strong>各自私有的数据区域</strong>，互相各不影响。 <ul><li><strong>java内存模型中所有的变量是存储在主内存中的，主内存是线程共享的区域</strong>，但是线程对变量的操作（读取赋值）必须在工作内存中进行， 当多个线程访问同一个变量（放在主存中）的时候，并不是直接在主存中操作变量，而是将此对象分别拷贝到每一个线程各自的工作内存中， 当其中一个线程操作了变量之后，需要将修改后的对象（也就是最新值）重新写回主内存，也要将最新值同步给其他的线程。（可见性：让其他的线程可以看到。） 线程之间的通信（传值）必须通过主内存来完成。</li></ul></li></ul><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h2><ol><li>一般来说CPU都是有计算核心的, 除了有计算核心外,它还有一块叫高速缓存,(二级缓存), 这个缓存存储的就是 CPU 里正在计算的临时数据, 在计算机里面有一块是内存, 有一块是硬盘(磁盘), 还有一块是cpu 里的缓存 ,把磁盘中的classes 字节码文件读取到内存中, 内存中的一个类对象和对象,在运行是,会把对象总的一些变量读取到缓存中</li></ol><ul><li>通知OS操作系统底层，在CPU计算过程中，都要检查内存中数据的有效性。保证最新的内存数据被使用。</li><li>volatile的非原子性问题</li><li>volatile， 只能保证可见性，不能保证原子性。</li><li>不是加锁问题，只是内存数据可见</li></ul><ul><li>防止指令重排序 <ul><li>java虚拟机优化内部指令，对象创建初始化</li><li>synchronized <ul><li>防止指令重排序，是在进入代码块后的禁止重排序</li></ul></li></ul></li></ul><h4 id="多级缓存" tabindex="-1"><a class="header-anchor" href="#多级缓存" aria-hidden="true">#</a> 多级缓存</h4><ul><li>L1 Cache (一级缓存)是CPU第一层高速缓存, 分为数据缓存和指令缓存, 一般服务器CPU的L1缓存的容量通常在32-4096kb</li><li>L2 Cache (二级缓存) 由于L1高速缓存的容量限制, 为了再次提高CPU的运算速度, 在CPU外部放置一高速缓存存储器, 即二级缓存</li><li>L3 Cache(三级缓存)现在都是内置的, 而它的实际作用既是, L3缓存的应用可以进一步降低内存延迟, 同时提升大数据量计算时处理器的性能. 具有较大L3缓存的处理器更有效的文件系统缓存行为及较短消息和处理器队列长度. 一般是多核共享一个L3缓存</li></ul><ul><li>CPU在读取数据时, 先在L1中寻找, 再从L2中寻找, 再从L3中寻找, 然后是<strong>内存</strong>, 最后是外存储器</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code>
<span class="token comment">// volatile 一个很明显的区别</span>
	<span class="token keyword">volatile</span> <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

	<span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">final</span> <span class="token class-name">EuserApplication</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EuserApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token annotation punctuation">@Override</span>
			<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				t<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// TODO Auto-generated catch block</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		t<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


</code></pre></div>`,11),c=[o];function l(e,u){return a(),s("div",null,c)}const k=n(p,[["render",l],["__file","volatile.html.vue"]]);export{k as default};
