import{_ as e,p as i,q as r,a1 as l}from"./framework-d81ad7e5.js";const t="/assets/dubbo-2169df53.png",p={},a=l('<h1 id="dubbo" tabindex="-1"><a class="header-anchor" href="#dubbo" aria-hidden="true">#</a> Dubbo</h1><p>官方网站 : http://dubbo.apache.org/</p><p>阿里巴巴已经将dubbo框架捐献给了Apache软件基金会</p><h3 id="传统架构-all-in-one" tabindex="-1"><a class="header-anchor" href="#传统架构-all-in-one" aria-hidden="true">#</a> 传统架构 All in One</h3><p>测试麻烦，微小修改 全都得重新测</p><p>单体架构也称之为单体系统或者是单体应用。就是一种把系统中所有的功能、模块耦合在一个应用中的架构方式。其优点为：项目易于管理、部署简单。缺点：测试成本高、可伸缩性差、可靠性差、迭代困难、跨语言程度差、团队协作难</p><p>聚合项目划分</p><p>单项目容易 因为某个功能导致整体oom</p><p>拆分完 咋实现</p><h3 id="soa-架构-service-oriented-architecture" tabindex="-1"><a class="header-anchor" href="#soa-架构-service-oriented-architecture" aria-hidden="true">#</a> SOA 架构: Service-Oriented Architecture</h3><p>面向服务的架构（SOA）是一个组件模型，它将应用程序拆分成不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。</p><p>在没有实施SOA的年代，从我们研发的角度来看，只能在代码级别复用，即Ctrl +V。SOA出现，我们开始走向了模块、业务线的复用。</p><p>SOA年代的典型实现： SOAP协议，CXF框架，XML传输</p><p>xsd，数据校验</p><p>SOA架构伴随着软件研发行业20年的发展，在最初的时候，大型it公司内部系统规模越来越大，IT系统越来越复杂，All in One单体架构的思想导致公司内项目业务和数据相互隔离，形成了孤岛。</p><p>最初，我们使用数据库作为项目之间数据交互和中转的平台，现在我们有了消息中间件。</p><p>最初，我们使用XML完成系统之间解耦与相互关联，现在我们有了RPC，Restful</p><p>最初，我们使用业务维度划分整体项目结构，</p><p>最初，我们多项目节点维护一个共享数据中心，现在我们做冗余存储，闭环数据，保证高效运行及数据最终一致性</p><p>最初，SOA思想指导指导我们把所有的IT系统汇总成一个大的整体，按照业务维度划分服务，集中化管理 现在我们拆分抽象服务使其可以多系统复用相同的功能模块。</p><h3 id="基于dubbo-rpc的微服务式架构" tabindex="-1"><a class="header-anchor" href="#基于dubbo-rpc的微服务式架构" aria-hidden="true">#</a> 基于dubbo RPC的微服务式架构</h3><p><img src="'+t+'" alt="alt"> RPC远程过程调用 : Remote Procedure Call Protocol</p><p>远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在<a href="#_OSI%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E6%A8%A1%E5%9E%8B_:">OSI</a>网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。</p><p>原来的RPC也有其他几种比如DCOM，CORBA，RMI（Java）等</p><ul><li>RMI——Remote Method Invoke：调用远程的方法。“方法”一般是附属于某个对象上的，所以通常RMI指对在远程的计算机上的某个对象，进行其方法函数的调用。</li><li>RPC——Remote Procedure Call：远程过程调用。指的是对网络上另外一个计算机上的，某段特定的函数代码的调用。</li></ul><p><strong>传输协议</strong></p><ul><li>RPC，可以基于TCP协议，也可以基于HTTP协议</li><li>HTTP，基于HTTP协议</li></ul><p><strong>传输效率</strong></p><ul><li>RPC，使用自定义的TCP协议，可以让请求报文体积更小，或者使用HTTP2协议，也可以很好的减少报文的体积，提高传输效率</li><li>HTTP，如果是基于HTTP1.1的协议，请求中会包含很多无用的内容，如果是基于HTTP2.0，那么简单的封装以下是可以作为一个RPC来使用的，这时标准RPC框架更多的是服务治理</li></ul><p><strong>性能消耗</strong></p><ul><li>RPC，可以基于thrift实现高效的二进制传输</li><li>HTTP，大部分是通过json来实现的，字节大小和序列化耗时都比thrift要更消耗性能</li></ul><p><strong>负载均衡</strong></p><ul><li>RPC，基本都自带了负载均衡策略</li><li>HTTP，需要配置Nginx，HAProxy来实现</li></ul><p><strong>服务治理</strong></p><ul><li>RPC，能做到自动通知，不影响上游</li><li>HTTP，需要事先通知，修改Nginx/HAProxy配置</li></ul><p>RPC主要用于公司内部的服务调用，性能消耗低，传输效率高，服务治理方便。HTTP主要用于对外的异构环境，浏览器接口调用，APP接口调用，第三方接口调用等。</p>',36),o=[a];function n(d,s){return i(),r("div",null,o)}const h=e(p,[["render",n],["__file","index.html.vue"]]);export{h as default};
