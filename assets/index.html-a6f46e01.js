import{_ as n,p as a,q as s,a1 as p}from"./framework-d81ad7e5.js";const t={},o=p(`<h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3><blockquote><p>遍历数组中每个元素并返回一个新数组，不改变原始数组，原始数组元素顺序依次处理元素。</p></blockquote><p>示例：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1 0 [1, 2, 3]</span>
    <span class="token comment">// 2 1 [1, 2, 3]</span>
    <span class="token comment">// 3 2 [1, 2, 3]</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;----------&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 4, 9]</span>
</code></pre></div><ul><li>注意：<code>map()</code> 不会对空数组进行检测。</li></ul><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach" aria-hidden="true">#</a> forEach</h3><blockquote><p>遍历数组中每个元素，并将元素传递给回调函数，但是没有返回值。</p></blockquote><ul><li>示例：</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1 0 [1, 2, 3]</span>
    <span class="token comment">// 2 1 [1, 2, 3]</span>
    <span class="token comment">// 3 2 [1, 2, 3]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>注意: <code>forEach()</code> 对于空数组是不会执行回调函数的。</li></ul><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter</h3><blockquote><p>遍历数组中每个元素返回一个满足返回条件的新数组，起到一个过滤作用。</p><p>简单点说就是，新数组中的元素是通过检查指定数组中符合条件的所有元素，不符合条件的元素就会被过滤掉。</p></blockquote><p>示例：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1 0 [1, 2, 3]</span>
    <span class="token comment">// 2 1 [1, 2, 3]</span>
    <span class="token comment">// 3 2 [1, 2, 3]</span>
    <span class="token keyword">return</span> x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>
</code></pre></div><ul><li>注意：<code>filter()</code> 不会对空数组进行检测，也不会改变原始数组。</li></ul><h3 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> reduce</h3><blockquote><p>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算出一个值。比如，我们计算【1+2+3+4+5=？】时可以用此方法。</p></blockquote><p>示例：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num <span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1 2</span>
    <span class="token comment">// 3 3</span>
    <span class="token keyword">return</span> num <span class="token operator">+</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre></div><ul><li>注意: <code>reduce()</code> 对于空数组是不会执行回调函数的。</li></ul><h3 id="find方法" tabindex="-1"><a class="header-anchor" href="#find方法" aria-hidden="true">#</a> find方法：</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// -1</span>
</code></pre></div><ul><li>find方法比较好理解，这里的参数n代表数组里的每一项</li><li>然后find方法内部通过遍历数组里的每一项，找到<code>＜0的这一项( -1 )</code>。</li></ul><p>findIndex方法：</p><p>findIndex方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。看一个例子：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">//2</span>
</code></pre></div><ul><li>在这个例子当中，value代表这个数组的每一项，<strong>1，3，-5，11</strong>。index代表每一项的索引值，arr代表这个数组<code>[1, 3, -5, 11]</code>，然后我们需要返回的是<code>＜0</code>的这一项的索引值，即是2了。</li></ul><h3 id="every方法" tabindex="-1"><a class="header-anchor" href="#every方法" aria-hidden="true">#</a> every方法：</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span> <span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//true</span>

</code></pre></div><ul><li><code>every（）</code>方法必须所有都返回true才会返回true，哪怕有一个false，就会返回false。</li></ul><h3 id="some方法" tabindex="-1"><a class="header-anchor" href="#some方法" aria-hidden="true">#</a> some方法：</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> b<span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//true</span>
</code></pre></div><h4 id="some方法-只要其中一个为true-就会返回true的。" tabindex="-1"><a class="header-anchor" href="#some方法-只要其中一个为true-就会返回true的。" aria-hidden="true">#</a> some方法 只要其中一个为true 就会返回true的。</h4><h4 id="every-和-some-目的-确定数组的所有成员是否满足指定的条件" tabindex="-1"><a class="header-anchor" href="#every-和-some-目的-确定数组的所有成员是否满足指定的条件" aria-hidden="true">#</a> <code>every（）和 some（）</code>目的：确定数组的所有成员是否满足指定的条件</h4><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>map 和 filter 都是 immutable methods，也就是说它们只会返回一个新数组，而不会改变原来的那个数组。</li></ul>`,36),e=[o];function c(u,l){return a(),s("div",null,e)}const i=n(t,[["render",c],["__file","index.html.vue"]]);export{i as default};
