import{_ as n,p as s,q as a,a1 as t}from"./framework-d81ad7e5.js";const p={},o=t(`<ul><li>Python的注释及乱码 <ol><li>单行注释：以#开头，#右边的所有东西当做说明，而不是真正要执行的程序，起辅助说明作用</li><li>多行注释：’’’多行注释’’’可以写多行的功能说明</li><li>Python乱码问题 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</li></ol></li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code>	<span class="token comment"># -*- coding:utf-8 -*-</span>
	<span class="token comment"># coding=utf-8</span>
</code></pre></div><h3 id="整数" tabindex="-1"><a class="header-anchor" href="#整数" aria-hidden="true">#</a> 整数</h3><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。 计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p><h3 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h3><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。 整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。 字符串 字符串是以单引号&#39;或双引号&quot;括起来的任意文本，比如&#39;abc&#39;，&quot;xyz&quot;等等。请注意，&#39;&#39;或&quot;&quot;本身只是一种表示方式，不是字符串的一部分，因此，字符串&#39;abc&#39;只有a，b，c这3个字符。如果&#39;本身也是一个字符，那就可以用&quot;&quot;括起来，比如&quot;I&#39;m OK&quot;包含的字符是I，&#39;，m，空格，O，K这6个字符。 如果字符串内部既包含&#39;又包含&quot;怎么办？可以用转义字符\\来标识，比如： &#39;I&#39;m &quot;OK&quot;!&#39; 表示的字符串内容是： I&#39;m &quot;OK&quot;! 转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\表示的字符就是\\，可以在Python的交互式命令行用print()打印字符串看看： 如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r&#39;&#39;表示&#39;&#39;内部的字符串默认不转义，可以自己试试： 如果字符串内部有很多换行，用\\n写在一行里不好阅读，为了简化，Python允许用&#39;&#39;&#39;...&#39;&#39;&#39;的格式表示多行内容， print(&#39;&#39;&#39;line1 line2 line3&#39;&#39;&#39;)</p><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><p>布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来 布尔值可以用and、or和not运算。 and运算是与运算，只有所有都为True，and运算结果才是True：</p><h3 id="空值" tabindex="-1"><a class="header-anchor" href="#空值" aria-hidden="true">#</a> 空值</h3><p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。 此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。 怎样知道一个变量的类型呢？ 在python中，只要定义了一个变量，而且它有数据，那么它的类型就已经确定了，不需要咱们开发者主动的去说明它的类型，系统会自动辨别 可以使用type(变量的名字)，来查看变量的类型</p><p>函数 说明 int(x [,base ]) 将x转换为一个整数 long(x [,base ]) 将x转换为一个长整数 float(x ) 将x转换到一个浮点数 complex(real [,imag ]) 创建一个复数 str(x ) 将对象 x 转换为字符串 repr(x ) 将对象 x 转换为表达式字符串 eval(str ) 用来计算在字符串中的有效Python表达式,并返回一个对象 tuple(s ) 将序列 s 转换为一个元组 list(s ) 将序列 s 转换为一个列表 chr(x ) 将一个整数转换为一个字符 unichr(x ) 将一个整数转换为Unicode字符 ord(x ) 将一个字符转换为它的整数值 hex(x ) 将一个整数转换为一个十六进制字符串 oct(x ) 将一个整数转换为一个八进制字符串</p><p>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;Hello, %s&#39;</span> <span class="token operator">%</span> <span class="token string">&#39;world&#39;</span>
<span class="token string">&#39;Hello, world&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;Hi, %s, you have $%d.&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token string">&#39;Hi, Michael, you have $1000000.&#39;</span>
</code></pre></div><p>你可能猜到了，%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。</p><h2 id="常见的占位符" tabindex="-1"><a class="header-anchor" href="#常见的占位符" aria-hidden="true">#</a> 常见的占位符</h2><p>%d 整数 %f 浮点数 %s 字符串 %x 十六进制整数</p><p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;%2d-%02d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token string">&#39; 3-01&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;%.2f&#39;</span> <span class="token operator">%</span> <span class="token number">3.1415926</span>
<span class="token string">&#39;3.14&#39;</span>
如果你不太确定应该用什么，<span class="token operator">%</span>s永远起作用，它会把任何数据类型转换为字符串：
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;Age: %s. Gender: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token string">&#39;Age: 25. Gender: True&#39;</span>
有些时候，字符串里面的<span class="token operator">%</span>是一个普通字符怎么办？这个时候就需要转义，用<span class="token operator">%</span><span class="token operator">%</span>来表示一个<span class="token operator">%</span>：
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;growth rate: %d %%&#39;</span> <span class="token operator">%</span> <span class="token number">7</span>
<span class="token string">&#39;growth rate: 7 %&#39;</span>

</code></pre></div><h3 id="输入" tabindex="-1"><a class="header-anchor" href="#输入" aria-hidden="true">#</a> 输入</h3><p>如果要让用户从电脑输入一些字符怎么办？Python提供了一个input()，可以让用户输入字符串，并存放到一个变量里</p><ol><li>python2版本中 1.1 raw_input() 在Python中，获取键盘输入的数据的方法是采用 raw_input 函数。 看如下示例: 注意: raw_input()的小括号中放入的是，提示信息，用来在获取数据之前给用户的一个简单提示 raw_input()在从键盘获取了数据以后，会存放到等号右边的变量中 raw_input()会把用户输入的任何值都作为字符串来对待 1.2 input() input()函数与raw_input()类似，但其接受的输入作为是表达式。 input()接受表达式输入，并把表达式的结果赋值给等号左边的变量 raw_input()输入的都当成字符串（和Python3的input功能一样）</li><li>python3版本中 没有raw_input()函数，只有input() 并且 python3中的input与python2中的raw_input()功能一样</li></ol><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><ul><li>运算符 逻辑表达式 描述 实例</li><li>and  x and y 布尔&quot;与&quot; - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。</li><li>or x or y 布尔&quot;或&quot; - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。 (a or b) 返回 10。</li><li>not not x 布尔&quot;非&quot; - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False</li></ul><p>5、比较（关系）运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>==</code></td><td>检查两个操作数的值是否相等，如果是则条件变为真。</td><td>如a=3,b=3则（a == b) 为 true.</td></tr><tr><td><code>!=</code></td><td>检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td><td>如a=1,b=3则(a != b) 为 true.</td></tr><tr><td><code>&lt;&gt;</code></td><td>检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td><td>如a=1,b=3则(a &lt;&gt; b) 为 true。这个类似于 != 运算符</td></tr><tr><td><code>&gt;</code></td><td>检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</td><td>如a=7,b=3则(a &gt; b) 为 true.</td></tr><tr><td><code>&lt;</code></td><td>检查左操作数的值是否小于右操作数的值，如果是，则条件成立。</td><td>如a=7,b=3则(a &lt; b) 为 false.</td></tr><tr><td><code>&gt;=</code></td><td>检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。</td><td>如a=3,b=3则(a &gt;= b) 为 true.</td></tr><tr><td><code>&lt;=</code></td><td>检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</td><td>如a=3,b=3则(a &lt;= b) 为 true.</td></tr></tbody></table><p>Python的逻辑判断和循环 1、if elif else条件判断 计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。 elif是else if的缩写，完全可以有多个elif，所以if语句的完整形式就是：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">&gt;</span>
<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">&gt;</span>
<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">&gt;</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">&gt;</span>
</code></pre></div><p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用if语句实现：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;your age is&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;adult&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>根据Python的缩进规则，如果if语句判断是True，就把缩进的两行print语句执行了，否则，什么也不做。</p><h3 id="字符串常见操作" tabindex="-1"><a class="header-anchor" href="#字符串常见操作" aria-hidden="true">#</a> 字符串常见操作</h3><p>下标索引 所谓下标，就是编号，就好比超市中的存储柜的编号，通过这个编号就能找到相应的存储空间 字符串实际上就是字符的数组，所以也支持下标索引。 如果有字符串:name = &#39;abcdef&#39;，在内存中的实际存储如下:</p><p>如果想取出部分字符，那么可以通过下标的方法，（注意python中下标从 0 开始）</p><div class="language-python" data-ext="py"><pre class="language-python"><code>   name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
   <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="切片-分片" tabindex="-1"><a class="header-anchor" href="#切片-分片" aria-hidden="true">#</a> 切片(分片)</h3><p>切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。 切片的语法：<code>[起始:结束:步长]</code> 步长：表示下标变化的规律。 注意：选取的区间属于左闭右开型，即从&quot;起始&quot;位开始，到&quot;结束&quot;位的前一位结束<strong>不包含结束位本身</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 取 下标0~2 的字符</span>
name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 取 下标为0~4 的字符</span>
name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 取 下标为3、4 的字符</span>
name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 取 下标为2开始到最后的字符</span>
name <span class="token operator">=</span> <span class="token string">&#39;abcdef&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 取 下标为1开始 到 最后第2个  之间的字符</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">&quot;abcdef&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token string">&#39;abc&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token string">&#39;ace&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> 
<span class="token string">&#39;&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token string">&#39;bd&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token string">&#39;fdb&#39;</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token string">&#39;fd&#39;</span>

</code></pre></div><p>如有字符串 <code>mystr = &#39;hello world and hhhzzzqqq yunshuxueyuan osvee beijing&#39;</code> 以下是常见的操作</p><ol><li>find == java Indexof方法 检测 str 是否包含在 mystr中，如果是返回开始的索引值，否则返回-1 mystr.find(str, start=0, end=len(mystr))</li><li>index 跟find()方法一样，只不过如果str不在 mystr中会报一个异常. mystr.index(str, start=0, end=len(mystr))</li><li><strong>count</strong> 返回 str在start和end之间 在 mystr里面出现的次数 mystr.count(str, start=0, end=len(mystr))</li><li><strong>replace</strong> 把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次. mystr.replace(str1, str2, mystr.count(str1))</li><li><strong>split</strong> 以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串 mystr.split(str=&quot; &quot;, 2)</li><li><strong>capitalize</strong> 把字符串的第一个字符大写 mystr.capitalize()</li><li><strong>title</strong> 把字符串的每个单词首字母大写</li><li><strong>startswith</strong> 检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False mystr.startswith(obj)</li><li><strong>endswith</strong> 检查字符串是否以obj结束，如果是返回True,否则返回 False. mystr.endswith(obj)</li><li><strong>lower</strong> 转换 mystr 中所有大写字符为小写 mystr.lower()</li><li><strong>upper</strong> 转换 mystr 中的小写字母为大写 mystr.upper()</li><li><strong>ljust</strong> 返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 mystr.ljust(width)</li><li><strong>rjust</strong> 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 mystr.rjust(width)</li><li><strong>center</strong> 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串 mystr.center(width)</li><li><strong>lstrip</strong> 删除 mystr 左边的空白字符 mystr.lstrip()</li><li><strong>rstrip</strong> 删除 mystr 字符串末尾的空白字符 mystr.rstrip()</li><li><strong>strip</strong> ---java trim 删除mystr字符串两端的空白字符</li><li><strong>rfind</strong> 类似于 find()函数，不过是从右边开始查找. mystr.rfind(str, start=0,end=len(mystr) )</li><li><strong>rindex</strong> 类似于 index()，不过是从右边开始. mystr.rindex( str, start=0,end=len(mystr))</li><li><strong>partition</strong> 把mystr以str分割成三部分,str前，str和str后 mystr.partition(str)</li><li><strong>rpartition</strong> 类似于 partition()函数,不过是从右边开始. mystr.rpartition(str)</li><li><strong>splitlines</strong> 按照换行符分隔，返回一个包含各行作为元素的列表 mystr.splitlines()</li><li><strong>isalpha</strong> 如果 mystr 所有字符都是字母 则返回 True,否则返回 False mystr.isalpha()</li><li><strong>isdigit</strong> 如果 mystr 只包含数字则返回 True 否则返回 False. mystr.isdigit()</li><li><strong>isalnum</strong> 如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False mystr.isalnum()</li><li><strong>isspace</strong> 如果 mystr 中只包含空格，则返回 True，否则返回 False. mystr.isspace()</li><li><strong>join</strong> mystr 中每个字符后面插入list的每个元素后面,构造出一个新的字符串 mystr.join(list)</li></ol><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> 元素序列是列表
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token string">&#39;!@&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Fusion&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sphere&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cloud&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token string">&#39;Fusion!@Sphere!@Cloud&#39;</span>
<span class="token number">2.</span> 元素序列是元组
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;China&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Japan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;USA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;UK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">&#39;China Japan USA UK&#39;</span>
<span class="token number">3.</span> 元素序列是集合
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token string">&#39;ahCni&#39;</span>
可以看出，输出的字符顺序与集合中元素的顺序不是保持一致的。

<span class="token number">4.</span> 元素序列是字典
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39; ~ &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;Asia&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;China&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Europe&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;UK&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token string">&#39;Asia ~ Europe&#39;</span>
可以看出，如果序列是字典，拼接的字符是字典的键。

<span class="token number">5.</span> 元素序列是字符串
当元素序列仅仅是字符串时，join函数会将字符串中的每一个单个字符抽取出来，与连接符组合。

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&#39;happy&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;h, a, p, p, y&#39;</span>
注意事项
<span class="token number">1.</span> 要连接的字符串序列（参数）必须是字符串
join函数的参数应该是全部由字符串构成的可迭代对象。当可迭代对象不全是由字符串构成的时，Python会报错TypeError。 
</code></pre></div><p>总结： 查找字符串： find：找不到返回-1 ，都是从左边找，右边查找r index：找不到报错</p><h3 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构" aria-hidden="true">#</a> 循环结构</h3><p>Python的循环有两种，一种是for...in循环，另外一种是while循环。</p><h3 id="for循环的格式" tabindex="-1"><a class="header-anchor" href="#for循环的格式" aria-hidden="true">#</a> for循环的格式</h3><p>for 临时变量 in 列表或者字符串等: 循环满足条件时执行的代码 else: 循环不满足条件时执行的代码</p><h2 id="列表的相关操作" tabindex="-1"><a class="header-anchor" href="#列表的相关操作" aria-hidden="true">#</a> 列表的相关操作</h2><p>列表中存放的数据是可以进行修改的，比如&quot;增&quot;、&quot;删&quot;、&quot;改&quot;&quot;</p><ul><li>添加元素(&quot;增&quot;append, extend, insert) append 通过append可以向列表添加元素 extend（+） 通过extend可以将另一个集合中的元素逐一添加到列表中</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
</code></pre></div><p>insert insert(index, object) 在指定位置index前插入元素object</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre></div><ol><li>修改元素(&quot;改&quot;) 修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改</li><li>查找元素(&quot;查&quot;in, not in, index, count) 所谓的查找，就是看看指定的元素是否存在</li></ol><h4 id="in-not-in" tabindex="-1"><a class="header-anchor" href="#in-not-in" aria-hidden="true">#</a> in, not in</h4><p>python中查找的常用方法为： in（存在）,如果存在那么结果为true，否则为false not in（不存在），如果不存在那么结果为true，否则false #查找是否存在if findName in nameList: print(&#39;在字典中找到了相同的名字&#39;) else: print(&#39;没有找到&#39;) 说明： in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在</p><h4 id="index-count" tabindex="-1"><a class="header-anchor" href="#index-count" aria-hidden="true">#</a> index, count</h4><p>index和count与字符串中的用法相同</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 注意是左闭右开区间</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
ValueError<span class="token punctuation">:</span> <span class="token string">&#39;a&#39;</span>isnotin <span class="token builtin">list</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
<span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
<span class="token number">0</span>
</code></pre></div><ul><li>删除元素 <strong>(&quot;删&quot;del, pop, remove)</strong> 类比现实生活中，如果某位同学调班了，那么就应该把这个条走后的学生的姓名删除掉；在开发中经常会用到删除这种功能。 列表元素的常用删除方法有： del：根据下标进行删除，其实可以删除所有变量 pop：默认删除最后一个元素 remove：根据元素的值进行删除第一个</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l
<span class="token punctuation">[</span><span class="token string">&#39;abcdef&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ccc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;ddd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fff&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">del</span>  l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> l
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ccc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;ddd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fff&#39;</span><span class="token punctuation">]</span>
</code></pre></div><ul><li>排序(sort, reverse) sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。 reverse方法是将list逆置。</li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> a
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">&lt;</span><span class="token number">6</span><span class="token operator">&gt;</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token builtin">chr</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span> i<span class="token punctuation">,</span> <span class="token builtin">chr</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">0</span> a
<span class="token number">1</span> b
<span class="token number">2</span> c
<span class="token number">3</span> d
</code></pre></div>`,61),e=[o];function c(l,r){return s(),a("div",null,e)}const i=n(p,[["render",c],["__file","base_use.html.vue"]]);export{i as default};
