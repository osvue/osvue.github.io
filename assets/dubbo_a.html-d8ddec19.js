import{_ as t,p as d,q as e,a1 as r}from"./framework-d81ad7e5.js";const a={},h=r('<h3 id="角色" tabindex="-1"><a class="header-anchor" href="#角色" aria-hidden="true">#</a> 角色</h3><h4 id="registry" tabindex="-1"><a class="header-anchor" href="#registry" aria-hidden="true">#</a> registry</h4><p>注册中心. 是用于发布和订阅服务的一个平台.用于替代SOA结构体系框架中的ESB服务总线的。</p><h5 id="发布" tabindex="-1"><a class="header-anchor" href="#发布" aria-hidden="true">#</a> 发布</h5><p>开发服务端代码完毕后, 将服务信息发布出去. 实现一个服务的公开.</p><h5 id="订阅" tabindex="-1"><a class="header-anchor" href="#订阅" aria-hidden="true">#</a> 订阅</h5><p>客户端程序,从注册中心下载服务内容 这个过程是订阅.</p><p>订阅服务的时候, 会将发布的服务所有信息,一次性下载到客户端.</p><p>客户端也可以自定义, 修改部分服务配置信息. 如: 超时的时长, 调用的重试次数等.</p><h4 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer" aria-hidden="true">#</a> consumer</h4><p>服务的消费者, 就是服务的客户端.</p><p>消费者必须使用Dubbo技术开发部分代码. 基本上都是配置文件定义.</p><h4 id="provider" tabindex="-1"><a class="header-anchor" href="#provider" aria-hidden="true">#</a> provider</h4><p>服务的提供者, 就是服务端.</p><p>服务端必须使用Dubbo技术开发部分代码. 以配置文件为主.</p><h4 id="container" tabindex="-1"><a class="header-anchor" href="#container" aria-hidden="true">#</a> container</h4><p>容器. Dubbo技术的服务端(Provider), 在启动执行的时候, 必须依赖容器才能正常启动.</p><p>默认依赖的就是spring容器. 且Dubbo技术不能脱离spring框架.</p><p>在2.5.3版本的dubbo中, 默认依赖的是spring2.5版本技术. 可以选用spring4.5以下版本.</p><p>在2.5.7版本的dubbo中, 默认依赖的是spring4.3.10版本技术. 可以选择任意的spring版本.</p><h4 id="monitor-dubbo-admin" tabindex="-1"><a class="header-anchor" href="#monitor-dubbo-admin" aria-hidden="true">#</a> monitor dubbo admin</h4><p>监控中心. 是Dubbo提供的一个jar工程.</p><p>主要功能是监控服务端(Provider)和消费端(Consumer)的使用数据的. 如: 服务端是什么,有多少接口,多少方法, 调用次数, 压力信息等. 客户端有多少, 调用过哪些服务端, 调用了多少次等.</p><h3 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h3><ul><li><p>start: 启动Spring容器时,自动启动Dubbo的Provider</p></li><li><p>register: Dubbo的Provider在启动后自动会去注册中心注册内容.注册的内容包括:</p><ul><li>Provider的 IP</li><li>Provider 的端口.</li><li>Provider 对外提供的接口列表.哪些方法.哪些接口类</li><li>Dubbo 的版本.</li><li>访问Provider的协议.</li></ul></li><li><p>subscribe: 订阅.当Consumer启动时,自动去Registry获取到所已注册的服务的信息.</p></li><li><p>notify: 通知.当Provider的信息发生变化时, 自动由Registry向Consumer推送通知.</p></li><li><p>invoke: 调用. Consumer 调用Provider中方法</p><ul><li>同步请求.消耗一定性能.但是必须是同步请求,因为需要接收调用方法后的结果.</li></ul></li><li><p>count:次数. 每隔2分钟,provoider和consumer自动向Monitor发送访问次数.Monitor进行统计.</p></li></ul><h3 id="协议" tabindex="-1"><a class="header-anchor" href="#协议" aria-hidden="true">#</a> 协议</h3><h4 id="dubbo协议-官方推荐协议" tabindex="-1"><a class="header-anchor" href="#dubbo协议-官方推荐协议" aria-hidden="true">#</a> Dubbo协议(官方推荐协议)</h4><p>优点：</p><p>采用NIO复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）</p><p>缺点：</p><p>大文件上传时,可能出现问题(不使用Dubbo文件上传)</p><h4 id="rmi-remote-method-invocation-协议" tabindex="-1"><a class="header-anchor" href="#rmi-remote-method-invocation-协议" aria-hidden="true">#</a> RMI(Remote Method Invocation)协议</h4><p>优点:</p><p>JDK自带的能力。可与原生RMI互操作，基于TCP协议</p><p>缺点:</p><p>偶尔连接失败.</p><h4 id="hessian协议" tabindex="-1"><a class="header-anchor" href="#hessian协议" aria-hidden="true">#</a> Hessian协议</h4><p>优点:</p><p>可与原生Hessian互操作，基于HTTP协议</p><p>缺点:</p><p>需hessian.jar支持，http短连接的开销大</p><h3 id="注册中心" tabindex="-1"><a class="header-anchor" href="#注册中心" aria-hidden="true">#</a> 注册中心</h3><h4 id="zookeeper-官方推荐" tabindex="-1"><a class="header-anchor" href="#zookeeper-官方推荐" aria-hidden="true">#</a> Zookeeper(官方推荐)</h4><p>优点:</p><p>支持分布式.很多周边产品.</p><p>缺点:</p><p>受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优</p><h3 id="multicast" tabindex="-1"><a class="header-anchor" href="#multicast" aria-hidden="true">#</a> Multicast</h3><p>优点:</p><p>去中心化,不需要单独安装软件.</p><p>缺点:</p><p>2.2.1 Provider和Consumer和Registry不能跨机房(路由)</p><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h3><p>优点:</p><p>支持集群,性能高</p><p>缺点:</p><p>要求服务器时间同步.否则可能出现集群失败问题.</p><h3 id="simple" tabindex="-1"><a class="header-anchor" href="#simple" aria-hidden="true">#</a> Simple</h3><p>优点:</p><p>标准RPC服务.没有兼容问题</p><p>缺点:</p><p>不支持集群.</p><h2 id="组件选型及成熟度" tabindex="-1"><a class="header-anchor" href="#组件选型及成熟度" aria-hidden="true">#</a> 组件选型及成熟度</h2><p>http://dubbo.apache.org/zh-cn/docs/user/maturity.html</p><h3 id="功能成熟度" tabindex="-1"><a class="header-anchor" href="#功能成熟度" aria-hidden="true">#</a> 功能成熟度</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Feature</td><td>Maturity</td><td>Strength</td><td>Problem</td><td>Advise</td><td>User</td></tr><tr><td>并发控制</td><td>Tested</td><td>并发控制</td><td></td><td>试用</td><td></td></tr><tr><td>连接控制</td><td>Tested</td><td>连接数控制</td><td></td><td>试用</td><td></td></tr><tr><td>直连提供者</td><td>Tested</td><td>点对点直连服务提供方，用于测试</td><td></td><td>测试环境使用</td><td>Alibaba</td></tr><tr><td>分组聚合</td><td>Tested</td><td>分组聚合返回值，用于菜单聚合等服务</td><td>特殊场景使用</td><td>可用于生产环境</td><td></td></tr><tr><td>参数验证</td><td>Tested</td><td>参数验证，JSR303验证框架集成</td><td>对性能有影响</td><td>试用</td><td>LaiWang</td></tr><tr><td>结果缓存</td><td>Tested</td><td>结果缓存，用于加速请求</td><td></td><td>试用</td><td></td></tr><tr><td>泛化引用</td><td>Stable</td><td>泛化调用，无需业务接口类进行远程调用，用于测试平台，开放网关桥接等</td><td></td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>泛化实现</td><td>Stable</td><td>泛化实现，无需业务接口类实现任意接口，用于Mock平台</td><td></td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>回声测试</td><td>Tested</td><td>回声测试</td><td></td><td>试用</td><td></td></tr><tr><td>隐式传参</td><td>Stable</td><td>附加参数</td><td></td><td>可用于生产环境</td><td></td></tr><tr><td>异步调用</td><td>Tested</td><td>不可靠异步调用</td><td></td><td>试用</td><td></td></tr><tr><td>本地调用</td><td>Tested</td><td>本地调用</td><td></td><td>试用</td><td></td></tr><tr><td>参数回调</td><td>Tested</td><td>参数回调</td><td>特殊场景使用</td><td>试用</td><td>Registry</td></tr><tr><td>事件通知</td><td>Tested</td><td>事件通知，在远程调用执行前后触发</td><td></td><td>试用</td><td></td></tr><tr><td>本地存根</td><td>Stable</td><td>在客户端执行部分逻辑</td><td></td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>本地伪装</td><td>Stable</td><td>伪造返回结果，可在失败时执行，或直接执行，用于服务降级</td><td>需注册中心支持</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>延迟暴露</td><td>Stable</td><td>延迟暴露服务，用于等待应用加载warmup数据，或等待spring加载完成</td><td></td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>延迟连接</td><td>Tested</td><td>延迟建立连接，调用时建立</td><td></td><td>试用</td><td>Registry</td></tr><tr><td>粘滞连接</td><td>Tested</td><td>粘滞连接，总是向同一个提供方发起请求，除非此提供方挂掉，再切换到另一台</td><td></td><td>试用</td><td>Registry</td></tr><tr><td>令牌验证</td><td>Tested</td><td>令牌验证，用于服务授权</td><td>需注册中心支持</td><td>试用</td><td></td></tr><tr><td>路由规则</td><td>Tested</td><td>动态决定调用关系</td><td>需注册中心支持</td><td>试用</td><td></td></tr><tr><td>配置规则</td><td>Tested</td><td>动态下发配置，实现功能的开关</td><td>需注册中心支持</td><td>试用</td><td></td></tr><tr><td>访问日志</td><td>Tested</td><td>访问日志，用于记录调用信息</td><td>本地存储，影响性能，受磁盘大小限制</td><td>试用</td><td></td></tr><tr><td>分布式事务</td><td>Research</td><td>JTA/XA三阶段提交事务</td><td>不稳定</td><td>不可用</td><td></td></tr></tbody></table><h3 id="策略成熟度" tabindex="-1"><a class="header-anchor" href="#策略成熟度" aria-hidden="true">#</a> 策略成熟度</h3><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Zookeeper注册中心</td><td>Stable</td><td>支持基于网络的集群方式，有广泛周边开源产品，建议使用dubbo-2.3.3以上版本（推荐使用）</td><td>依赖于Zookeeper的稳定性</td><td>可用于生产环境</td><td></td></tr><tr><td>Redis注册中心</td><td>Stable</td><td>支持基于客户端双写的集群方式，性能高</td><td>要求服务器时间同步，用于检查心跳过期脏数据</td><td>可用于生产环境</td><td></td></tr><tr><td>Multicast注册中心</td><td>Tested</td><td>去中心化，不需要安装注册中心</td><td>依赖于网络拓扑和路由，跨机房有风险</td><td>小规模应用或开发测试环境</td><td></td></tr><tr><td>Simple注册中心</td><td>Tested</td><td>Dogfooding，注册中心本身也是一个标准的RPC服务</td><td>没有集群支持，可能单点故障</td><td>试用</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Simple监控中心</td><td>Stable</td><td>支持JFreeChart统计报表</td><td>没有集群支持，可能单点故障，但故障后不影响RPC运行</td><td>可用于生产环境</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Dubbo协议</td><td>Stable</td><td>采用NIO复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）</td><td>在大文件传输时，单一连接会成为瓶颈</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Rmi协议</td><td>Stable</td><td>可与原生RMI互操作，基于TCP协议</td><td>偶尔会连接失败，需重建Stub</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Hessian协议</td><td>Stable</td><td>可与原生Hessian互操作，基于HTTP协议</td><td>需hessian.jar支持，http短连接的开销大</td><td>可用于生产环境</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Netty Transporter</td><td>Stable</td><td>JBoss的NIO框架，性能较好（推荐使用）</td><td>一次请求派发两种事件，需屏蔽无用事件</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Mina Transporter</td><td>Stable</td><td>老牌NIO框架，稳定</td><td>待发送消息队列派发不及时，大压力下，会出现FullGC</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Grizzly Transporter</td><td>Tested</td><td>Sun的NIO框架，应用于GlassFish服务器中</td><td>线程池不可扩展，Filter不能拦截下一Filter</td><td>试用</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Hessian Serialization</td><td>Stable</td><td>性能较好，多语言支持（推荐使用）</td><td>Hessian的各版本兼容性不好，可能和应用使用的Hessian冲突，Dubbo内嵌了hessian3.2.1的源码</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Dubbo Serialization</td><td>Tested</td><td>通过不传送POJO的类元信息，在大量POJO传输时，性能较好</td><td>当参数对象增加字段时，需外部文件声明</td><td>试用</td><td></td></tr><tr><td>Json Serialization</td><td>Tested</td><td>纯文本，可跨语言解析，缺省采用FastJson解析</td><td>性能较差</td><td>试用</td><td></td></tr><tr><td>Java Serialization</td><td>Stable</td><td>Java原生支持</td><td>性能较差</td><td>可用于生产环境</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Javassist ProxyFactory</td><td>Stable</td><td>通过字节码生成代替反射，性能比较好（推荐使用）</td><td>依赖于javassist.jar包，占用JVM的Perm内存，Perm可能要设大一些：java -XX:PermSize=128m</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Jdk ProxyFactory</td><td>Stable</td><td>JDK原生支持</td><td>性能较差</td><td>可用于生产环境</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Failover Cluster</td><td>Stable</td><td>失败自动切换，当出现失败，重试其它服务器，通常用于读操作（推荐使用）</td><td>重试会带来更长延迟</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Failfast Cluster</td><td>Stable</td><td>快速失败，只发起一次调用，失败立即报错,通常用于非幂等性的写操作</td><td>如果有机器正在重启，可能会出现调用失败</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Failsafe Cluster</td><td>Stable</td><td>失败安全，出现异常时，直接忽略，通常用于写入审计日志等操作</td><td>调用信息丢失</td><td>可用于生产环境</td><td>Monitor</td></tr><tr><td>Failback Cluster</td><td>Tested</td><td>失败自动恢复，后台记录失败请求，定时重发，通常用于消息通知操作</td><td>不可靠，重启丢失</td><td>可用于生产环境</td><td>Registry</td></tr><tr><td>Forking Cluster</td><td>Tested</td><td>并行调用多个服务器，只要一个成功即返回，通常用于实时性要求较高的读操作</td><td>需要浪费更多服务资源</td><td>可用于生产环境</td><td></td></tr><tr><td>Broadcast Cluster</td><td>Tested</td><td>广播调用所有提供者，逐个调用，任意一台报错则报错，通常用于更新提供方本地状态</td><td>速度慢，任意一台报错则报错</td><td>可用于生产环境</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Random LoadBalance</td><td>Stable</td><td>随机，按权重设置随机概率（推荐使用）</td><td>在一个截面上碰撞的概率高，重试时，可能出现瞬间压力不均</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>RoundRobin LoadBalance</td><td>Stable</td><td>轮询，按公约后的权重设置轮询比率</td><td>存在慢的机器累积请求问题，极端情况可能产生雪崩</td><td>可用于生产环境</td><td></td></tr><tr><td>LeastActive LoadBalance</td><td>Stable</td><td>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差，使慢的机器收到更少请求</td><td>不支持权重，在容量规划时，不能通过权重把压力导向一台机器压测容量</td><td>可用于生产环境</td><td></td></tr><tr><td>ConsistentHash LoadBalance</td><td>Stable</td><td>一致性Hash，相同参数的请求总是发到同一提供者，当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动</td><td>压力分摊不均</td><td>可用于生产环境</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>条件路由规则</td><td>Stable</td><td>基于条件表达式的路由规则，功能简单易用</td><td>有些复杂多分支条件情况，规则很难描述</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>脚本路由规则</td><td>Tested</td><td>基于脚本引擎的路由规则，功能强大</td><td>没有运行沙箱，脚本能力过于强大，可能成为后门</td><td>试用</td><td></td></tr></tbody></table><table><thead><tr><th>Feature</th><th>Maturity</th><th>Strength</th><th>Problem</th><th>Advise</th><th>User</th></tr></thead><tbody><tr><td>Spring Container</td><td>Stable</td><td>自动加载META-INF/spring目录下的所有Spring配置</td><td></td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Jetty Container</td><td>Stable</td><td>启动一个内嵌Jetty，用于汇报状态</td><td>大量访问页面时，会影响服务器的线程和内存</td><td>可用于生产环境</td><td>Alibaba</td></tr><tr><td>Log4j Container</td><td>Stable</td><td>自动配置log4j的配置，在多进程启动时，自动给日志文件按进程分目录</td><td>用户不能控制log4j的配置，不灵活</td><td>可用于生产环境</td><td>Alibaba</td></tr></tbody></table>',77),i=[h];function s(o,b){return d(),e("div",null,i)}const n=t(a,[["render",s],["__file","dubbo_a.html.vue"]]);export{n as default};
