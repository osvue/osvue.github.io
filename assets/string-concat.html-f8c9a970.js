import{_ as a,p as n,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},e=t(`<h2 id="string-prototype-concat" tabindex="-1"><a class="header-anchor" href="#string-prototype-concat" aria-hidden="true">#</a> String.prototype.concat</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.concat(string2, string3[, ..., stringN])</p></div><p>参数：</p><ul><li>string2...stringN：和原字符串连接的多个字符串。</li></ul><p>返回值：</p><p>返回一个新的字符串。</p><h3 id="_2-描述" tabindex="-1"><a class="header-anchor" href="#_2-描述" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>一般使用模板字符串或 <code>+</code> 拼接，尚未使用过，强烈不推荐使用该方法。</li></ul></blockquote><h2 id="string-prototype-padstart" tabindex="-1"><a class="header-anchor" href="#string-prototype-padstart" aria-hidden="true">#</a> String.prototype.padStart</h2><h3 id="_1-语法-1" tabindex="-1"><a class="header-anchor" href="#_1-语法-1" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.padStart(targetLength [, padString])</p></div><p>参数：</p><ul><li>targetLength：当前字符串需要填充到的目标长度；</li><li>padString：填充字符串。</li></ul><p>返回值：</p><p>在原字符串开头填充指定字符串直到形成直到目标长度字符串。</p><h3 id="_2-描述-1" tabindex="-1"><a class="header-anchor" href="#_2-描述-1" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>尚未使用过。</li></ul></blockquote><h3 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using padStart</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;foofoofabc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&quot;123465&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;00000abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &quot;abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &quot; abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// &quot;       abc&quot;</span>
</code></pre></div></li></ul><h2 id="string-prototype-padend" tabindex="-1"><a class="header-anchor" href="#string-prototype-padend" aria-hidden="true">#</a> String.prototype.padEnd</h2><h3 id="_1-语法-2" tabindex="-1"><a class="header-anchor" href="#_1-语法-2" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.padEnd(targetLength [, padString])</p></div><p>参数：</p><ul><li>targetLength：当前字符串需要填充到的目标长度；</li><li>padString：填充字符串。</li></ul><p>返回值：</p><p>在原字符串末尾填充指定字符串直到形成直到目标长度字符串。</p><h3 id="_2-描述-2" tabindex="-1"><a class="header-anchor" href="#_2-描述-2" aria-hidden="true">#</a> 2. 描述</h3><p>与 padStart 一致，在末尾添加。</p><h2 id="string-prototype-repeat" tabindex="-1"><a class="header-anchor" href="#string-prototype-repeat" aria-hidden="true">#</a> String.prototype.repeat</h2><h3 id="_1-语法-3" tabindex="-1"><a class="header-anchor" href="#_1-语法-3" aria-hidden="true">#</a> 1. 语法</h3><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>str.repeat(count)</p></div><p>参数：</p><ul><li>count：重复的次数。</li></ul><p>返回值：</p><p>指定数量的新字符串。</p><h3 id="_2-描述-3" tabindex="-1"><a class="header-anchor" href="#_2-描述-3" aria-hidden="true">#</a> 2. 描述</h3><p>描述即返回值。</p><blockquote><p>个人在日常开发中常用场景：</p><ul><li>填充字符串时使用。</li></ul></blockquote><h3 id="_3-示例-1" tabindex="-1"><a class="header-anchor" href="#_3-示例-1" aria-hidden="true">#</a> 3. 示例</h3><ul><li><p>using repeat</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// RangeError</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &#39;&#39;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &#39;abc&#39;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &#39;abcabc&#39;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;abcabcabc&#39; (count will be converted to integer)</span>
</code></pre></div></li></ul>`,43),c=[e];function o(i,r){return n(),s("div",null,c)}const l=a(p,[["render",o],["__file","string-concat.html.vue"]]);export{l as default};
