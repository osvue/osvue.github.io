import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const p={},e=t(`<blockquote><p><code>implements ApplicationListener&lt;ContextRefreshedEvent&gt;</code></p></blockquote><h5 id="spring容器将所有的bean都初始化完成之后-做一些操作" tabindex="-1"><a class="header-anchor" href="#spring容器将所有的bean都初始化完成之后-做一些操作" aria-hidden="true">#</a> Spring容器将所有的Bean都初始化完成之后，做一些操作</h5><blockquote><p>防止重复提交 <code>event.getApplicationContext().getDisplayName().equals(“Root WebApplicationContext”)</code></p></blockquote><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckVersionProcesstor</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">CheckVersionProcesstor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TODO Auto-generated constructor stub</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextRefreshedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//            从Spring容器中获取 被Spring 管理的对象 Any</span>
            <span class="token class-name">IXcpestatisticsBizc</span> result <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">IXcpestatisticsBizc</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span><span class="token function">syncTableExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="配置xml" tabindex="-1"><a class="header-anchor" href="#配置xml" aria-hidden="true">#</a> 配置XML</h3><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>  <span class="token comment">&lt;!-- 后置处理器 spring .xml --&gt;</span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.osvue.spring.config.event.CheckVersionProcesstor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
 
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>或在新版本中使用 注解 <code>@PostConstruct</code></p></div><h2 id="applicationcontextinitializer" tabindex="-1"><a class="header-anchor" href="#applicationcontextinitializer" aria-hidden="true">#</a> ApplicationContextInitializer</h2><ol><li>类名ApplicationContextInitializer</li><li>spring容器刷新之前执行的一个回调函数</li><li>向springboot容器中注册属性</li><li>继承接口自定义实现</li><li>ApplicationContextInitializer是Spring框架提供的接口,</li><li>该接口的主要功能就是在接口ConfigurableApplicationContext刷新之前</li><li>允许用户对ConfigurableApplicationContext实例做一定的操作。该接口只有一个initialize方法。</li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实现该接口，并在initialize方法中打印容器中初始化了多少个Bean对象。</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// @Order的value值越小越早执行</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LearnApplicationContextInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextInitializer</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 打印容器里面初始化了多少个Bean</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;容器中初始化Bean数量：&quot;</span> <span class="token operator">+</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="配置使用" tabindex="-1"><a class="header-anchor" href="#配置使用" aria-hidden="true">#</a> 配置使用</h3><ol><li>仿照Spring Boot初始化配置使用该接口实现类的方法，在项目的classpath下创建<code>META-INF/spring.factories</code>文件。并仿照Spring Boot的配置格式进行配置：</li></ol><div class="language-text" data-ext="text"><pre class="language-text"><code># Application Context Initializers
org.springframework.context.ApplicationContextInitializer=\\
com.sovue.lusifer.LearnApplicationContextInitializer
</code></pre></div><ol start="2"><li>application.properties或application.yml文件进行配置。格式如下：</li></ol><p><code>context.initializer.classes=com.sovue.lusifer.LearnApplicationContextInitializer</code></p><ol start="3"><li>通过SpringApplication提供的addInitializers方法进行追加配置的。</li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">SpringLearnApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   app<span class="token punctuation">.</span><span class="token function">addInitializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LearnApplicationContextInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,17),o=[e];function c(i,l){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","spring_after.html.vue"]]);export{k as default};
