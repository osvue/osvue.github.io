import{_ as o,M as p,p as c,q as u,R as a,t as n,N as t,a1 as e}from"./framework-d81ad7e5.js";const l={},r=a("h1",{id:"server-sent-events-教程",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#server-sent-events-教程","aria-hidden":"true"},"#"),n(" Server-Sent Events 教程")],-1),i={href:"https://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"},k=a("p",null,[a("img",{src:"https://www.ruanyifeng.com/blogimg/asset/2017/bg2017052701.png",alt:"img"})],-1),d=a("h2",{id:"一、sse-的本质",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#一、sse-的本质","aria-hidden":"true"},"#"),n(" 一、SSE 的本质")],-1),g={href:"https://www.ruanyifeng.com/blog/2016/08/http.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。本质上，这种通信就是以流信息的方式，完成一次用时很长的下载。</p><p>SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 HTTP 协议，目前除了 IE/Edge，其他浏览器都支持。</p><h2 id="二、sse-的特点" tabindex="-1"><a class="header-anchor" href="#二、sse-的特点" aria-hidden="true">#</a> 二、SSE 的特点</h2><p>SSE 与 WebSocket 作用相似，都是建立浏览器与服务器之间的通信渠道，然后服务器向浏览器推送信息。</p><p>总体来说，WebSocket 更强大和灵活。因为它是全双工通道，可以双向通信；SSE 是单向通道，只能服务器向浏览器发送，因为流信息本质上就是下载。如果浏览器向服务器发送信息，就变成了另一次 HTTP 请求。</p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2017/bg2017052702.jpg" alt="img"></p><p>但是，SSE 也有自己的优点。</p><blockquote><ul><li>SSE 使用 HTTP 协议，现有的服务器软件都支持。WebSocket 是一个独立协议。</li><li>SSE 属于轻量级，使用简单；WebSocket 协议相对复杂。</li><li>SSE 默认支持断线重连，WebSocket 需要自己实现。</li><li>SSE 一般只用来传送文本，二进制数据需要编码后传送，WebSocket 默认支持传送二进制数据。</li><li>SSE 支持自定义发送的消息类型。</li></ul></blockquote><p>因此，两者各有特点，适合不同的场合。</p><h2 id="三、客户端-api" tabindex="-1"><a class="header-anchor" href="#三、客户端-api" aria-hidden="true">#</a> 三、客户端 API</h2><h3 id="_3-1-eventsource-对象" tabindex="-1"><a class="header-anchor" href="#_3-1-eventsource-对象" aria-hidden="true">#</a> 3.1 EventSource 对象</h3><p>SSE 的客户端 API 部署在<code>EventSource</code>对象上。下面的代码可以检测浏览器是否支持 SSE。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;EventSource&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div></blockquote><p>使用 SSE 时，浏览器首先生成一个<code>EventSource</code>实例，向服务器发起连接。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><p>上面的<code>url</code>可以与当前网址同域，也可以跨域。跨域时，可以指定第二个参数，打开<code>withCredentials</code>属性，表示是否一起发送 Cookie。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><p><code>EventSource</code>实例的<code>readyState</code>属性，表明连接的当前状态。该属性只读，可以取以下值。</p><blockquote><ul><li>0：相当于常量<code>EventSource.CONNECTING</code>，表示连接还未建立，或者断线正在重连。</li><li>1：相当于常量<code>EventSource.OPEN</code>，表示连接已经建立，可以接受数据。</li><li>2：相当于常量<code>EventSource.CLOSED</code>，表示连接已断，且不会重连。</li></ul></blockquote><h3 id="_3-2-基本用法" tabindex="-1"><a class="header-anchor" href="#_3-2-基本用法" aria-hidden="true">#</a> 3.2 基本用法</h3><p>连接一旦建立，就会触发<code>open</code>事件，可以在<code>onopen</code>属性定义回调函数。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>source<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 另一种写法</span>
source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><p>客户端收到服务器发来的数据，就会触发<code>message</code>事件，可以在<code>onmessage</code>属性的回调函数。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>source<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token comment">// handle message</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 另一种写法</span>
source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token comment">// handle message</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><p>上面代码中，事件对象的<code>data</code>属性就是服务器端传回的数据（文本格式）。</p><p>如果发生通信错误（比如连接中断），就会触发<code>error</code>事件，可以在<code>onerror</code>属性定义回调函数。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>source<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// handle error event</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 另一种写法</span>
source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// handle error event</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><p><code>close</code>方法用于关闭 SSE 连接。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>source<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><h3 id="_3-3-自定义事件" tabindex="-1"><a class="header-anchor" href="#_3-3-自定义事件" aria-hidden="true">#</a> 3.3 自定义事件</h3><p>默认情况下，服务器发来的数据，总是触发浏览器<code>EventSource</code>实例的<code>message</code>事件。开发者还可以自定义 SSE 事件，这种情况下，发送回来的数据不会触发<code>message</code>事件。</p><blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>source<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token comment">// handle message</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><p>上面代码中，浏览器对 SSE 的<code>foo</code>事件进行监听。如何实现服务器发送<code>foo</code>事件，请看下文。</p><h2 id="四、服务器实现" tabindex="-1"><a class="header-anchor" href="#四、服务器实现" aria-hidden="true">#</a> 四、服务器实现</h2><h3 id="_4-1-数据格式" tabindex="-1"><a class="header-anchor" href="#_4-1-数据格式" aria-hidden="true">#</a> 4.1 数据格式</h3><p>服务器向浏览器发送的 SSE 数据，必须是 UTF-8 编码的文本，具有如下的 HTTP 头信息。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>Content-Type: text/event-stream
Cache-Control: no-cache
Connection: keep-alive
</code></pre></div></blockquote><p>上面三行之中，第一行的<code>Content-Type</code>必须指定 MIME 类型为<code>event-steam</code>。</p><p>每一次发送的信息，由若干个<code>message</code>组成，每个<code>message</code>之间用<code>\\n\\n</code>分隔。每个<code>message</code>内部由若干行组成，每一行都是如下格式。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>[field]: value\\n
</code></pre></div></blockquote><p>上面的<code>field</code>可以取四个值。</p><blockquote><ul><li>data</li><li>event</li><li>id</li><li>retry</li></ul></blockquote><p>此外，还可以有冒号开头的行，表示注释。通常，服务器每隔一段时间就会向浏览器发送一个注释，保持连接不中断。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>: This is a comment
</code></pre></div></blockquote><p>下面是一个例子。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>: this is a test stream\\n\\n

data: some text\\n\\n

data: another message\\n
data: with two lines \\n\\n
</code></pre></div></blockquote><h3 id="_4-2-data-字段" tabindex="-1"><a class="header-anchor" href="#_4-2-data-字段" aria-hidden="true">#</a> 4.2 data 字段</h3><p>数据内容用<code>data</code>字段表示。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>data:  message\\n\\n
</code></pre></div></blockquote><p>如果数据很长，可以分成多行，最后一行用<code>\\n\\n</code>结尾，前面行都用<code>\\n</code>结尾。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>data: begin message\\n
data: continue message\\n\\n
</code></pre></div></blockquote><p>下面是一个发送 JSON 数据的例子。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>data: {\\n
data: &quot;foo&quot;: &quot;bar&quot;,\\n
data: &quot;baz&quot;, 555\\n
data: }\\n\\n
</code></pre></div></blockquote><h3 id="_4-3-id-字段" tabindex="-1"><a class="header-anchor" href="#_4-3-id-字段" aria-hidden="true">#</a> 4.3 id 字段</h3><p>数据标识符用<code>id</code>字段表示，相当于每一条数据的编号。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>id: msg1\\n
data: message\\n\\n
</code></pre></div></blockquote><p>浏览器用<code>lastEventId</code>属性读取这个值。一旦连接断线，浏览器会发送一个 HTTP 头，里面包含一个特殊的<code>Last-Event-ID</code>头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</p><h3 id="_4-4-event-字段" tabindex="-1"><a class="header-anchor" href="#_4-4-event-字段" aria-hidden="true">#</a> 4.4 event 字段</h3><p><code>event</code>字段表示自定义的事件类型，默认是<code>message</code>事件。浏览器可以用<code>addEventListener()</code>监听该事件。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>event: foo\\n
data: a foo event\\n\\n

data: an unnamed event\\n\\n

event: bar\\n
data: a bar event\\n\\n
</code></pre></div></blockquote><p>上面的代码创造了三条信息。第一条的名字是<code>foo</code>，触发浏览器的<code>foo</code>事件；第二条未取名，表示默认类型，触发浏览器的<code>message</code>事件；第三条是<code>bar</code>，触发浏览器的<code>bar</code>事件。</p><p>下面是另一个例子。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>event: userconnect
data: {&quot;username&quot;: &quot;bobby&quot;, &quot;time&quot;: &quot;02:33:48&quot;}

event: usermessage
data: {&quot;username&quot;: &quot;bobby&quot;, &quot;time&quot;: &quot;02:34:11&quot;, &quot;text&quot;: &quot;Hi everyone.&quot;}

event: userdisconnect
data: {&quot;username&quot;: &quot;bobby&quot;, &quot;time&quot;: &quot;02:34:23&quot;}

event: usermessage
data: {&quot;username&quot;: &quot;sean&quot;, &quot;time&quot;: &quot;02:34:36&quot;, &quot;text&quot;: &quot;Bye, bobby.&quot;}
</code></pre></div></blockquote><h3 id="_4-5-retry-字段" tabindex="-1"><a class="header-anchor" href="#_4-5-retry-字段" aria-hidden="true">#</a> 4.5 retry 字段</h3><p>服务器可以用<code>retry</code>字段，指定浏览器重新发起连接的时间间隔。</p><blockquote><div class="language-markup" data-ext="markup"><pre class="language-markup"><code>retry: 10000\\n
</code></pre></div></blockquote><p>两种情况会导致浏览器重新发起连接：一种是时间间隔到期，二是由于网络错误等原因，导致连接出错。</p><h2 id="五、node-服务器实例" tabindex="-1"><a class="header-anchor" href="#五、node-服务器实例" aria-hidden="true">#</a> 五、Node 服务器实例</h2><p>SSE 要求服务器与浏览器保持连接。对于不同的服务器软件来说，所消耗的资源是不一样的。Apache 服务器，每个连接就是一个线程，如果要维持大量连接，势必要消耗大量资源。Node 则是所有连接都使用同一个线程，因此消耗的资源会小得多，但是这要求每个连接不能包含很耗时的操作，比如磁盘的 IO 读写。</p>`,69),q={href:"http://cjihrig.com/blog/server-sent-events-in-node-js/",target:"_blank",rel:"noopener noreferrer"},m=e(`<blockquote><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> fileName <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName <span class="token operator">===</span> <span class="token string">&quot;./stream&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span><span class="token string">&quot;text/event-stream&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;Cache-Control&quot;</span><span class="token operator">:</span><span class="token string">&quot;no-cache&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;Connection&quot;</span><span class="token operator">:</span><span class="token string">&quot;keep-alive&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;Access-Control-Allow-Origin&quot;</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;retry: 10000\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;event: connecttime\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;data: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;data: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;data: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    req<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8844</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></blockquote><p>请将上面的代码保存为<code>server.js</code>，然后执行下面的命令。</p><blockquote><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> server.js
</code></pre></div></blockquote><p>上面的命令会在本机的<code>8844</code>端口，打开一个 HTTP 服务。</p>`,4),h={href:"http://jsbin.com/vuziboduwa/edit?html,output",target:"_blank",rel:"noopener noreferrer"};function b(f,S){const s=p("ExternalLinkIcon");return c(),u("div",null,[r,a("p",null,[n("服务器向浏览器推送信息，除了 "),a("a",i,[n("WebSocket"),t(s)]),n("，还有一种方法：Server-Sent Events（以下简称 SSE）。本文介绍它的用法。")]),k,d,a("p",null,[n("严格地说，"),a("a",g,[n("HTTP 协议"),t(s)]),n("无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息（streaming）。")]),v,a("p",null,[n("下面是 Node 的 SSE 服务器"),a("a",q,[n("实例"),t(s)]),n("。")]),m,a("p",null,[n("然后，打开这个"),a("a",h,[n("网页"),t(s)]),n("，查看客户端代码并运行。")])])}const y=o(l,[["render",b],["__file","sse.html.vue"]]);export{y as default};
