import{_ as n,p as a,q as s,a1 as t}from"./framework-d81ad7e5.js";const e="/assets/202011281207520-329e625f.png",p={},o=t('<p><img src="'+e+`" alt="alt"></p><ol><li>接收请求</li></ol><ul><li><code>org.springframework.web.servlet.FrameworkServlet#initContextHolders</code></li><li>RequestContextHolder就是利用ThreadLocal，将request放到线程关联的ThreadLocal中</li></ul><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initContextHolders</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
			<span class="token annotation punctuation">@Nullable</span> <span class="token class-name">LocaleContext</span> localeContext<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RequestAttributes</span> requestAttributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>localeContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">setLocaleContext</span><span class="token punctuation">(</span>localeContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadContextInheritable<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>requestAttributes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestAttributes</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadContextInheritable<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre></div><blockquote><p><strong>RequestContextHolder</strong> 是springmvc的工具类，持有上下文request的容器，从而使得可以在任何java代码处获取request对象</p></blockquote><h3 id="寻找handlermapping-关联handlermethod-controller" tabindex="-1"><a class="header-anchor" href="#寻找handlermapping-关联handlermethod-controller" aria-hidden="true">#</a> 寻找HandlerMapping，关联HandlerMethod（@Controller）</h3><ul><li>确定这个请求需要被哪个@Controller的哪个方法处理</li></ul><ol start="3"><li>生成处理器执行链</li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span>#doDispatch<span class="token punctuation">}</span>


				<span class="token comment">// 生成处理器执行链   Determine handler for the current request.</span>
				mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>

				<span class="token comment">// Determine handler adapter for the current request.</span>
				<span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// Process last-modified header, if supported by the handler.</span>
				<span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
				

</code></pre></div><p>获得到mappedHandler</p><ul><li>位于处理器链末端的是一个HandlerMethod，DispatcherServlet通过handlerAdapter适配器对InterceptorList和HandlerMethod进行封装，</li><li>并按照统一的适配器接口对HandlerAdapter处理方法进行调用</li></ul><h3 id="处理器适配" tabindex="-1"><a class="header-anchor" href="#处理器适配" aria-hidden="true">#</a> 处理器适配</h3><ul><li><p>根据HandlerMethod寻找HandlerAdapter</p></li><li><p>HandlerAdatper作用：</p><ul><li>帮助DispatcherServlet调用请求处理器（HandlerMethod），无需关注其中实际的调用细节。</li><li>比如，调用注解实现的@Controller需要解析其关联的注解，</li><li>比如请求参数绑定，类型转换，校验等，</li><li>HandlerAdapter的主要目的是为了屏蔽与DispatcherServlet之间的诸多细节，下面的 都是其作用的体现</li></ul></li></ul><h3 id="handlermethod转换" tabindex="-1"><a class="header-anchor" href="#handlermethod转换" aria-hidden="true">#</a> handlerMethod转换</h3><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestMappingHandlerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHandlerMethodAdapter</span>
		<span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 其使用一个Composite组合对象来装载多个HandlerMethodArgumentResolver</span>
    <span class="token keyword">private</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span> argumentResolvers<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><ul><li>其使用一个Composite组合对象来装载多个<code>HandlerMethodArgumentResolver</code></li></ul><h4 id="方法参数解析器-handlermethodargumentresolver" tabindex="-1"><a class="header-anchor" href="#方法参数解析器-handlermethodargumentresolver" aria-hidden="true">#</a> 方法参数解析器：<code>HandlerMethodArgumentResolver</code></h4><ol><li>将请求参数映射到比如<code>@RequestParam、@PathVariable以及@RequestBody</code></li><li>其也是有多个，哪个支持就处理</li></ol><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerMethodArgumentResolver</span><span class="token punctuation">&gt;</span></span> argumentResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre></div><blockquote><p><code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod</code></p></blockquote><h3 id="通过handlermethodargumentresolver来解析方法参数" tabindex="-1"><a class="header-anchor" href="#通过handlermethodargumentresolver来解析方法参数" aria-hidden="true">#</a> 通过HandlerMethodArgumentResolver来解析方法参数</h3>`,21),l=[o];function c(r,u){return a(),s("div",null,l)}const d=n(p,[["render",c],["__file","mvc.html.vue"]]);export{d as default};
